// ignore_for_file: unused_element, unused_field
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'data_type.dart' as data_type;

/// Gen code for SystemInformer
class SystemInformerAPI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SystemInformerAPI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SystemInformerAPI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<PVOID> _PhInstanceHandle =
      _lookup<PVOID>('PhInstanceHandle');

  PVOID get PhInstanceHandle => _PhInstanceHandle.value;

  set PhInstanceHandle(PVOID value) => _PhInstanceHandle.value = value;

  late final ffi.Pointer<PCWSTR> _PhApplicationName =
      _lookup<PCWSTR>('PhApplicationName');

  PCWSTR get PhApplicationName => _PhApplicationName.value;

  set PhApplicationName(PCWSTR value) => _PhApplicationName.value = value;

  late final ffi.Pointer<PVOID> _PhHeapHandle = _lookup<PVOID>('PhHeapHandle');

  PVOID get PhHeapHandle => _PhHeapHandle.value;

  set PhHeapHandle(PVOID value) => _PhHeapHandle.value = value;

  late final ffi.Pointer<RTL_OSVERSIONINFOEXW> _PhOsVersion =
      _lookup<RTL_OSVERSIONINFOEXW>('PhOsVersion');

  RTL_OSVERSIONINFOEXW get PhOsVersion => _PhOsVersion.ref;

  late final ffi.Pointer<ULONG> _WindowsVersion =
      _lookup<ULONG>('WindowsVersion');

  DartDWORD get WindowsVersion => _WindowsVersion.value;

  set WindowsVersion(DartDWORD value) => _WindowsVersion.value = value;

  late final ffi.Pointer<PCWSTR> _WindowsVersionString =
      _lookup<PCWSTR>('WindowsVersionString');

  PCWSTR get WindowsVersionString => _WindowsVersionString.value;

  set WindowsVersionString(PCWSTR value) => _WindowsVersionString.value = value;

  late final ffi.Pointer<PCWSTR> _WindowsVersionName =
      _lookup<PCWSTR>('WindowsVersionName');

  PCWSTR get WindowsVersionName => _WindowsVersionName.value;

  set WindowsVersionName(PCWSTR value) => _WindowsVersionName.value = value;

  late final ffi.Pointer<PH_SYSTEM_BASIC_INFORMATION$1>
      _PhSystemBasicInformation =
      _lookup<PH_SYSTEM_BASIC_INFORMATION$1>('PhSystemBasicInformation');

  PH_SYSTEM_BASIC_INFORMATION$1 get PhSystemBasicInformation =>
      _PhSystemBasicInformation.ref;

  late final ffi.Pointer<PH_SYSTEM_PROCESSOR_INFORMATION$1>
      _PhSystemProcessorInformation =
      _lookup<PH_SYSTEM_PROCESSOR_INFORMATION$1>(
          'PhSystemProcessorInformation');

  PH_SYSTEM_PROCESSOR_INFORMATION$1 get PhSystemProcessorInformation =>
      _PhSystemProcessorInformation.ref;

  late final ffi.Pointer<IN_ADDR> _inaddr_any = _lookup<IN_ADDR>('inaddr_any');

  IN_ADDR get inaddr_any => _inaddr_any.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_any =
      _lookup<IN6_ADDR>('in6addr_any');

  IN6_ADDR get in6addr_any => _in6addr_any.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_v4mappedprefix =
      _lookup<IN6_ADDR>('in6addr_v4mappedprefix');

  IN6_ADDR get in6addr_v4mappedprefix => _in6addr_v4mappedprefix.ref;

  late final ffi.Pointer<PPH_OBJECT_TYPE> _PhFileStreamType =
      _lookup<PPH_OBJECT_TYPE>('PhFileStreamType');

  PPH_OBJECT_TYPE get PhFileStreamType => _PhFileStreamType.value;

  set PhFileStreamType(PPH_OBJECT_TYPE value) =>
      _PhFileStreamType.value = value;

  late final ffi.Pointer<PPH_STRINGREF> _PhServiceTypeStrings =
      _lookup<PPH_STRINGREF>('PhServiceTypeStrings');

  ffi.Pointer<PPH_STRINGREF> get PhServiceTypeStrings => _PhServiceTypeStrings;

  late final ffi.Pointer<PPH_STRINGREF> _PhServiceStartTypeStrings =
      _lookup<PPH_STRINGREF>('PhServiceStartTypeStrings');

  ffi.Pointer<PPH_STRINGREF> get PhServiceStartTypeStrings =>
      _PhServiceStartTypeStrings;

  late final ffi.Pointer<PPH_STRINGREF> _PhServiceErrorControlStrings =
      _lookup<PPH_STRINGREF>('PhServiceErrorControlStrings');

  ffi.Pointer<PPH_STRINGREF> get PhServiceErrorControlStrings =>
      _PhServiceErrorControlStrings;

  late final ffi.Pointer<LONG> _PhFontQuality = _lookup<LONG>('PhFontQuality');

  DartLONG get PhFontQuality => _PhFontQuality.value;

  set PhFontQuality(DartLONG value) => _PhFontQuality.value = value;

  late final ffi.Pointer<LONG> _PhSystemDpi = _lookup<LONG>('PhSystemDpi');

  DartLONG get PhSystemDpi => _PhSystemDpi.value;

  set PhSystemDpi(DartLONG value) => _PhSystemDpi.value = value;

  late final ffi.Pointer<PH_INTEGER_PAIR$1> _PhSmallIconSize =
      _lookup<PH_INTEGER_PAIR$1>('PhSmallIconSize');

  PH_INTEGER_PAIR$1 get PhSmallIconSize => _PhSmallIconSize.ref;

  late final ffi.Pointer<PH_INTEGER_PAIR$1> _PhLargeIconSize =
      _lookup<PH_INTEGER_PAIR$1>('PhLargeIconSize');

  PH_INTEGER_PAIR$1 get PhLargeIconSize => _PhLargeIconSize.ref;

  /// Windows Imaging Component (WIC) bitmap support
  late final ffi.Pointer<GUID$1> _IID_IWICBitmapSource =
      _lookup<GUID$1>('IID_IWICBitmapSource');

  GUID$1 get IID_IWICBitmapSource => _IID_IWICBitmapSource.ref;

  late final ffi.Pointer<GUID$1> _IID_IWICImagingFactory =
      _lookup<GUID$1>('IID_IWICImagingFactory');

  GUID$1 get IID_IWICImagingFactory => _IID_IWICImagingFactory.ref;

  /// theme support (theme.c)
  late final ffi.Pointer<HFONT> _PhApplicationFont =
      _lookup<HFONT>('PhApplicationFont');

  HFONT get PhApplicationFont => _PhApplicationFont.value;

  set PhApplicationFont(HFONT value) => _PhApplicationFont.value = value;

  late final ffi.Pointer<HFONT> _PhTreeWindowFont =
      _lookup<HFONT>('PhTreeWindowFont');

  HFONT get PhTreeWindowFont => _PhTreeWindowFont.value;

  set PhTreeWindowFont(HFONT value) => _PhTreeWindowFont.value = value;

  late final ffi.Pointer<HFONT> _PhMonospaceFont =
      _lookup<HFONT>('PhMonospaceFont');

  HFONT get PhMonospaceFont => _PhMonospaceFont.value;

  set PhMonospaceFont(HFONT value) => _PhMonospaceFont.value = value;

  late final ffi.Pointer<HBRUSH> _PhThemeWindowBackgroundBrush =
      _lookup<HBRUSH>('PhThemeWindowBackgroundBrush');

  HBRUSH get PhThemeWindowBackgroundBrush =>
      _PhThemeWindowBackgroundBrush.value;

  set PhThemeWindowBackgroundBrush(HBRUSH value) =>
      _PhThemeWindowBackgroundBrush.value = value;

  late final ffi.Pointer<BOOLEAN> _PhEnableThemeSupport =
      _lookup<BOOLEAN>('PhEnableThemeSupport');

  Dartboolean get PhEnableThemeSupport => _PhEnableThemeSupport.value;

  set PhEnableThemeSupport(Dartboolean value) =>
      _PhEnableThemeSupport.value = value;

  late final ffi.Pointer<BOOLEAN> _PhEnableThemeAcrylicSupport =
      _lookup<BOOLEAN>('PhEnableThemeAcrylicSupport');

  Dartboolean get PhEnableThemeAcrylicSupport =>
      _PhEnableThemeAcrylicSupport.value;

  set PhEnableThemeAcrylicSupport(Dartboolean value) =>
      _PhEnableThemeAcrylicSupport.value = value;

  late final ffi.Pointer<BOOLEAN> _PhEnableThemeAcrylicWindowSupport =
      _lookup<BOOLEAN>('PhEnableThemeAcrylicWindowSupport');

  Dartboolean get PhEnableThemeAcrylicWindowSupport =>
      _PhEnableThemeAcrylicWindowSupport.value;

  set PhEnableThemeAcrylicWindowSupport(Dartboolean value) =>
      _PhEnableThemeAcrylicWindowSupport.value = value;

  late final ffi.Pointer<BOOLEAN> _PhEnableThemeNativeButtons =
      _lookup<BOOLEAN>('PhEnableThemeNativeButtons');

  Dartboolean get PhEnableThemeNativeButtons =>
      _PhEnableThemeNativeButtons.value;

  set PhEnableThemeNativeButtons(Dartboolean value) =>
      _PhEnableThemeNativeButtons.value = value;

  late final ffi.Pointer<BOOLEAN> _PhEnableThemeListviewBorder =
      _lookup<BOOLEAN>('PhEnableThemeListviewBorder');

  Dartboolean get PhEnableThemeListviewBorder =>
      _PhEnableThemeListviewBorder.value;

  set PhEnableThemeListviewBorder(Dartboolean value) =>
      _PhEnableThemeListviewBorder.value = value;

  late final ffi.Pointer<COLORREF> _PhThemeWindowForegroundColor =
      _lookup<COLORREF>('PhThemeWindowForegroundColor');

  DartDWORD get PhThemeWindowForegroundColor =>
      _PhThemeWindowForegroundColor.value;

  set PhThemeWindowForegroundColor(DartDWORD value) =>
      _PhThemeWindowForegroundColor.value = value;

  late final ffi.Pointer<COLORREF> _PhThemeWindowBackgroundColor =
      _lookup<COLORREF>('PhThemeWindowBackgroundColor');

  DartDWORD get PhThemeWindowBackgroundColor =>
      _PhThemeWindowBackgroundColor.value;

  set PhThemeWindowBackgroundColor(DartDWORD value) =>
      _PhThemeWindowBackgroundColor.value = value;

  late final ffi.Pointer<COLORREF> _PhThemeWindowBackground2Color =
      _lookup<COLORREF>('PhThemeWindowBackground2Color');

  DartDWORD get PhThemeWindowBackground2Color =>
      _PhThemeWindowBackground2Color.value;

  set PhThemeWindowBackground2Color(DartDWORD value) =>
      _PhThemeWindowBackground2Color.value = value;

  late final ffi.Pointer<COLORREF> _PhThemeWindowHighlightColor =
      _lookup<COLORREF>('PhThemeWindowHighlightColor');

  DartDWORD get PhThemeWindowHighlightColor =>
      _PhThemeWindowHighlightColor.value;

  set PhThemeWindowHighlightColor(DartDWORD value) =>
      _PhThemeWindowHighlightColor.value = value;

  late final ffi.Pointer<COLORREF> _PhThemeWindowHighlight2Color =
      _lookup<COLORREF>('PhThemeWindowHighlight2Color');

  DartDWORD get PhThemeWindowHighlight2Color =>
      _PhThemeWindowHighlight2Color.value;

  set PhThemeWindowHighlight2Color(DartDWORD value) =>
      _PhThemeWindowHighlight2Color.value = value;

  late final ffi.Pointer<COLORREF> _PhThemeWindowTextColor =
      _lookup<COLORREF>('PhThemeWindowTextColor');

  DartDWORD get PhThemeWindowTextColor => _PhThemeWindowTextColor.value;

  set PhThemeWindowTextColor(DartDWORD value) =>
      _PhThemeWindowTextColor.value = value;

  /// Graph drawing
  late final ffi.Pointer<RECT> _PhNormalGraphTextMargin =
      _lookup<RECT>('PhNormalGraphTextMargin');

  RECT get PhNormalGraphTextMargin => _PhNormalGraphTextMargin.ref;

  late final ffi.Pointer<RECT> _PhNormalGraphTextPadding =
      _lookup<RECT>('PhNormalGraphTextPadding');

  RECT get PhNormalGraphTextPadding => _PhNormalGraphTextPadding.ref;

  /// devprv
  late final ffi.Pointer<PPH_OBJECT_TYPE> _PhDeviceTreeType =
      _lookup<PPH_OBJECT_TYPE>('PhDeviceTreeType');

  PPH_OBJECT_TYPE get PhDeviceTreeType => _PhDeviceTreeType.value;

  set PhDeviceTreeType(PPH_OBJECT_TYPE value) =>
      _PhDeviceTreeType.value = value;

  late final ffi.Pointer<PPH_OBJECT_TYPE> _PhDeviceItemType =
      _lookup<PPH_OBJECT_TYPE>('PhDeviceItemType');

  PPH_OBJECT_TYPE get PhDeviceItemType => _PhDeviceItemType.value;

  set PhDeviceItemType(PPH_OBJECT_TYPE value) =>
      _PhDeviceItemType.value = value;

  late final ffi.Pointer<PPH_OBJECT_TYPE> _PhDeviceNotifyType =
      _lookup<PPH_OBJECT_TYPE>('PhDeviceNotifyType');

  PPH_OBJECT_TYPE get PhDeviceNotifyType => _PhDeviceNotifyType.value;

  set PhDeviceNotifyType(PPH_OBJECT_TYPE value) =>
      _PhDeviceNotifyType.value = value;
}

typedef _dev_t = ffi.UnsignedInt;
typedef Dart_dev_t = int;
typedef _ino_t = ffi.UnsignedShort;
typedef Dart_ino_t = int;
typedef _off_t = ffi.Long;
typedef Dart_off_t = int;
typedef __time32_t = ffi.Long;
typedef Dart__time32_t = int;

final class stat32 extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.UnsignedShort()
  external int st_mode;

  @ffi.Short()
  external int st_nlink;

  @ffi.Short()
  external int st_uid;

  @ffi.Short()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @_off_t()
  external int st_size;

  @__time32_t()
  external int st_atime;

  @__time32_t()
  external int st_mtime;

  @__time32_t()
  external int st_ctime;
}

final class stat32i64 extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.UnsignedShort()
  external int st_mode;

  @ffi.Short()
  external int st_nlink;

  @ffi.Short()
  external int st_uid;

  @ffi.Short()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @ffi.LongLong()
  external int st_size;

  @__time32_t()
  external int st_atime;

  @__time32_t()
  external int st_mtime;

  @__time32_t()
  external int st_ctime;
}

typedef __time64_t = ffi.LongLong;
typedef Dart__time64_t = int;

final class stat64i32 extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.UnsignedShort()
  external int st_mode;

  @ffi.Short()
  external int st_nlink;

  @ffi.Short()
  external int st_uid;

  @ffi.Short()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @_off_t()
  external int st_size;

  @__time64_t()
  external int st_atime;

  @__time64_t()
  external int st_mtime;

  @__time64_t()
  external int st_ctime;
}

final class stat64 extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.UnsignedShort()
  external int st_mode;

  @ffi.Short()
  external int st_nlink;

  @ffi.Short()
  external int st_uid;

  @ffi.Short()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @ffi.LongLong()
  external int st_size;

  @__time64_t()
  external int st_atime;

  @__time64_t()
  external int st_mtime;

  @__time64_t()
  external int st_ctime;
}

typedef time_t = __time64_t;

final class stat extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.UnsignedShort()
  external int st_mode;

  @ffi.Short()
  external int st_nlink;

  @ffi.Short()
  external int st_uid;

  @ffi.Short()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @_off_t()
  external int st_size;

  @time_t()
  external int st_atime;

  @time_t()
  external int st_mtime;

  @time_t()
  external int st_ctime;
}

typedef PVOID = ffi.Pointer<ffi.Void>;
typedef WCHAR = ffi.WChar;
typedef DartWCHAR = int;
typedef PCWSTR = ffi.Pointer<WCHAR>;
typedef DWORD = ffi.UnsignedLong;
typedef DartDWORD = int;
typedef WORD = ffi.UnsignedShort;
typedef DartWORD = int;
typedef BYTE = ffi.UnsignedChar;
typedef DartBYTE = int;

final class OSVERSIONINFOEXW extends ffi.Struct {
  @DWORD()
  external int dwOSVersionInfoSize;

  @DWORD()
  external int dwMajorVersion;

  @DWORD()
  external int dwMinorVersion;

  @DWORD()
  external int dwBuildNumber;

  @DWORD()
  external int dwPlatformId;

  @ffi.Array.multi([128])
  external ffi.Array<WCHAR> szCSDVersion;

  @WORD()
  external int wServicePackMajor;

  @WORD()
  external int wServicePackMinor;

  @WORD()
  external int wSuiteMask;

  @BYTE()
  external int wProductType;

  @BYTE()
  external int wReserved;
}

typedef RTL_OSVERSIONINFOEXW = OSVERSIONINFOEXW;
typedef ULONG = DWORD;
typedef USHORT = ffi.UnsignedShort;
typedef DartUSHORT = int;
typedef ULONG_PTR = ffi.UnsignedLongLong;
typedef DartULONG_PTR = int;
typedef KAFFINITY = ULONG_PTR;

final class PH_SYSTEM_BASIC_INFORMATION extends ffi.Struct {
  @USHORT()
  external int PageSize;

  @USHORT()
  external int NumberOfProcessors;

  @ULONG()
  external int MaximumTimerResolution;

  @ULONG()
  external int NumberOfPhysicalPages;

  @ULONG()
  external int AllocationGranularity;

  @ULONG_PTR()
  external int MaximumUserModeAddress;

  @KAFFINITY()
  external int ActiveProcessorsAffinityMask;
}

typedef PH_SYSTEM_BASIC_INFORMATION$1 = PH_SYSTEM_BASIC_INFORMATION;
typedef PPH_SYSTEM_BASIC_INFORMATION = ffi.Pointer<PH_SYSTEM_BASIC_INFORMATION>;
typedef boolean = ffi.UnsignedChar;
typedef Dartboolean = int;
typedef BOOLEAN = boolean;
typedef PUSHORT = ffi.Pointer<USHORT>;
typedef PKAFFINITY = ffi.Pointer<KAFFINITY>;

final class PH_SYSTEM_PROCESSOR_INFORMATION extends ffi.Struct {
  @BOOLEAN()
  external int SingleProcessorGroup;

  @USHORT()
  external int NumberOfProcessors;

  @USHORT()
  external int NumberOfProcessorGroups;

  external PUSHORT ActiveProcessorCount;

  external PKAFFINITY ActiveProcessorsAffinityMasks;
}

typedef PH_SYSTEM_PROCESSOR_INFORMATION$1 = PH_SYSTEM_PROCESSOR_INFORMATION;
typedef PPH_SYSTEM_PROCESSOR_INFORMATION
    = ffi.Pointer<PH_SYSTEM_PROCESSOR_INFORMATION>;
typedef UCHAR = ffi.UnsignedChar;
typedef DartUCHAR = int;

final class UnnamedStruct1 extends ffi.Struct {
  @UCHAR()
  external int s_b1;

  @UCHAR()
  external int s_b2;

  @UCHAR()
  external int s_b3;

  @UCHAR()
  external int s_b4;
}

final class UnnamedStruct2 extends ffi.Struct {
  @USHORT()
  external int s_w1;

  @USHORT()
  external int s_w2;
}

final class UnnamedUnion1 extends ffi.Union {
  external UnnamedStruct1 S_un_b;

  external UnnamedStruct2 S_un_w;

  @ULONG()
  external int S_addr;
}

final class in_addr extends ffi.Struct {
  external UnnamedUnion1 S_un;
}

typedef IN_ADDR = in_addr;

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<UCHAR> Byte;

  @ffi.Array.multi([8])
  external ffi.Array<USHORT> Word;
}

final class in6_addr extends ffi.Struct {
  external UnnamedUnion2 u;
}

typedef IN6_ADDR = in6_addr;

final class GUID extends ffi.Struct {
  @ffi.UnsignedLong()
  external int Data1;

  @ffi.UnsignedShort()
  external int Data2;

  @ffi.UnsignedShort()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> Data4;
}

typedef GUID$1 = GUID;

final class UnnamedUnion3 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<UCHAR> Ipv4;

  external IN_ADDR InAddr;

  @ffi.Array.multi([16])
  external ffi.Array<UCHAR> Ipv6;

  external IN6_ADDR In6Addr;

  external GUID$1 HvAddr;
}

final class PH_IP_ADDRESS extends ffi.Struct {
  @ULONG()
  external int Type;

  external UnnamedUnion3 unnamed;
}

typedef PH_IP_ADDRESS$1 = PH_IP_ADDRESS;
typedef PPH_IP_ADDRESS = ffi.Pointer<PH_IP_ADDRESS>;

final class PH_IP_ENDPOINT extends ffi.Struct {
  external PH_IP_ADDRESS$1 Address;

  @ULONG()
  external int Port;
}

typedef PH_IP_ENDPOINT$1 = PH_IP_ENDPOINT;
typedef PPH_IP_ENDPOINT = ffi.Pointer<PH_IP_ENDPOINT>;

/// DOH/HTTP/HTTP2 support (dmex)
final class PH_HTTP_CONTEXT extends ffi.Struct {
  external PVOID SessionHandle;

  external PVOID ConnectionHandle;

  external PVOID RequestHandle;
}

/// DOH/HTTP/HTTP2 support (dmex)
typedef PH_HTTP_CONTEXT$1 = PH_HTTP_CONTEXT;
typedef PPH_HTTP_CONTEXT = ffi.Pointer<PH_HTTP_CONTEXT>;

enum PH_HTTP_SOCKET_CLOSE_TYPE {
  PH_HTTP_SOCKET_CLOSE_SESSION(1),
  PH_HTTP_SOCKET_CLOSE_CONNECTION(2),
  PH_HTTP_SOCKET_CLOSE_REQUEST(4);

  final int value;
  const PH_HTTP_SOCKET_CLOSE_TYPE(this.value);

  static PH_HTTP_SOCKET_CLOSE_TYPE fromValue(int value) => switch (value) {
        1 => PH_HTTP_SOCKET_CLOSE_SESSION,
        2 => PH_HTTP_SOCKET_CLOSE_CONNECTION,
        4 => PH_HTTP_SOCKET_CLOSE_REQUEST,
        _ => throw ArgumentError(
            'Unknown value for PH_HTTP_SOCKET_CLOSE_TYPE: $value'),
      };
}

typedef ULONG64 = ffi.UnsignedLongLong;
typedef DartULONG64 = int;
typedef DOUBLE = ffi.Double;
typedef DartDOUBLE = double;

final class PH_HTTPDOWNLOAD_CONTEXT extends ffi.Struct {
  @ULONG64()
  external int ReadLength;

  @ULONG64()
  external int TotalLength;

  @ULONG64()
  external int BitsPerSecond;

  @DOUBLE()
  external double Percent;
}

typedef PH_HTTPDOWNLOAD_CONTEXT$1 = PH_HTTPDOWNLOAD_CONTEXT;
typedef PPH_HTTPDOWNLOAD_CONTEXT = ffi.Pointer<PH_HTTPDOWNLOAD_CONTEXT>;
typedef PPH_HTTPDOWNLOAD_CALLBACKFunction = BOOLEAN Function(
    PPH_HTTPDOWNLOAD_CONTEXT Parameter, PVOID Context);
typedef DartPPH_HTTPDOWNLOAD_CALLBACKFunction = Dartboolean Function(
    PPH_HTTPDOWNLOAD_CONTEXT Parameter, PVOID Context);
typedef PPH_HTTPDOWNLOAD_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PPH_HTTPDOWNLOAD_CALLBACKFunction>>;
typedef LPVOID = ffi.Pointer<ffi.Void>;
typedef PH_HTTP_STATUS_CALLBACK = ffi.NativeFunction<
    ffi.Void Function(
        PVOID InternetHandle,
        ULONG_PTR Context,
        ULONG InternetStatus,
        LPVOID StatusInformation,
        ULONG StatusInformationLength)>;
typedef PPH_HTTP_STATUS_CALLBACK = ffi.Pointer<PH_HTTP_STATUS_CALLBACK>;
typedef LONG = ffi.Long;
typedef DartLONG = int;

final class UnnamedStruct5 extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @LONG()
  external int HighPart;
}

final class UnnamedStruct6 extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @LONG()
  external int HighPart;
}

typedef LONGLONG = ffi.LongLong;
typedef DartLONGLONG = int;

final class LARGE_INTEGER extends ffi.Union {
  external UnnamedStruct5 unnamed;

  external UnnamedStruct6 u;

  @LONGLONG()
  external int QuadPart;
}

typedef LARGE_INTEGER$1 = LARGE_INTEGER;
typedef PWSTR = ffi.Pointer<WCHAR>;

final class PH_HTTP_CERTIFICATE_INFO extends ffi.Struct {
  external LARGE_INTEGER$1 Expiry;

  external LARGE_INTEGER$1 Start;

  external PWSTR SubjectInfo;

  external PWSTR IssuerInfo;

  external PWSTR ProtocolName;

  external PWSTR SignatureAlgName;

  external PWSTR EncryptionAlgName;

  @ULONG()
  external int KeySize;
}

typedef PH_HTTP_CERTIFICATE_INFO$1 = PH_HTTP_CERTIFICATE_INFO;
typedef PPH_HTTP_CERTIFICATE_INFO = ffi.Pointer<PH_HTTP_CERTIFICATE_INFO>;

enum PH_PROVIDER_THREAD_STATE {
  ProviderThreadRunning(0),
  ProviderThreadStopped(1),
  ProviderThreadStopping(2);

  final int value;
  const PH_PROVIDER_THREAD_STATE(this.value);

  static PH_PROVIDER_THREAD_STATE fromValue(int value) => switch (value) {
        0 => ProviderThreadRunning,
        1 => ProviderThreadStopped,
        2 => ProviderThreadStopping,
        _ => throw ArgumentError(
            'Unknown value for PH_PROVIDER_THREAD_STATE: $value'),
      };
}

typedef PPH_PROVIDER_FUNCTIONFunction = ffi.Void Function(PVOID Object);
typedef DartPPH_PROVIDER_FUNCTIONFunction = void Function(PVOID Object);
typedef PPH_PROVIDER_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<PPH_PROVIDER_FUNCTIONFunction>>;
typedef HANDLE = ffi.Pointer<ffi.Void>;

final class PH_QUEUED_LOCK extends ffi.Struct {
  @ULONG_PTR()
  external int Value;
}

typedef PH_QUEUED_LOCK$1 = PH_QUEUED_LOCK;

final class LIST_ENTRY extends ffi.Struct {
  external ffi.Pointer<LIST_ENTRY> Flink;

  external ffi.Pointer<LIST_ENTRY> Blink;
}

typedef LIST_ENTRY$1 = LIST_ENTRY;

final class PH_PROVIDER_THREAD extends ffi.Struct {
  external HANDLE ThreadHandle;

  external HANDLE TimerHandle;

  @ULONG()
  external int Interval;

  @ffi.UnsignedInt()
  external int StateAsInt;

  PH_PROVIDER_THREAD_STATE get State =>
      PH_PROVIDER_THREAD_STATE.fromValue(StateAsInt);

  external PH_QUEUED_LOCK$1 Lock;

  external LIST_ENTRY$1 ListHead;

  @ULONG()
  external int BoostCount;
}

typedef PPH_PROVIDER_THREAD = ffi.Pointer<PH_PROVIDER_THREAD>;

final class PH_PROVIDER_REGISTRATION extends ffi.Opaque {}

typedef PH_PROVIDER_REGISTRATION$1 = PH_PROVIDER_REGISTRATION;
typedef PPH_PROVIDER_REGISTRATION = ffi.Pointer<PH_PROVIDER_REGISTRATION>;
typedef PH_PROVIDER_THREAD$1 = PH_PROVIDER_THREAD;

/// Seek
enum PH_SEEK_ORIGIN {
  SeekStart(0),
  SeekCurrent(1),
  SeekEnd(2);

  final int value;
  const PH_SEEK_ORIGIN(this.value);

  static PH_SEEK_ORIGIN fromValue(int value) => switch (value) {
        0 => SeekStart,
        1 => SeekCurrent,
        2 => SeekEnd,
        _ => throw ArgumentError('Unknown value for PH_SEEK_ORIGIN: $value'),
      };
}

final class PH_FILE_STREAM extends ffi.Struct {
  external HANDLE FileHandle;

  @ULONG()
  external int Flags;

  /// file object position, *not* the actual position
  external LARGE_INTEGER$1 Position;

  external PVOID Buffer;

  @ULONG()
  external int BufferLength;

  /// read position in buffer
  @ULONG()
  external int ReadPosition;

  /// how much available to read from buffer
  @ULONG()
  external int ReadLength;

  /// write position in buffer
  @ULONG()
  external int WritePosition;
}

typedef PH_FILE_STREAM$1 = PH_FILE_STREAM;
typedef PPH_FILE_STREAM = ffi.Pointer<PH_FILE_STREAM>;

final class PH_OBJECT_TYPE extends ffi.Opaque {}

typedef PH_OBJECT_TYPE$1 = PH_OBJECT_TYPE;
typedef PPH_OBJECT_TYPE = ffi.Pointer<PH_OBJECT_TYPE$1>;

final class PH_FAST_LOCK extends ffi.Struct {
  @ULONG()
  external int Value;

  external HANDLE ExclusiveWakeEvent;

  external HANDLE SharedWakeEvent;
}

typedef PH_FAST_LOCK$1 = PH_FAST_LOCK;
typedef PPH_FAST_LOCK = ffi.Pointer<PH_FAST_LOCK>;
typedef NTSTATUS = LONG;
typedef PWCH = ffi.Pointer<WCHAR>;

final class UNICODE_STRING extends ffi.Struct {
  @USHORT()
  external int Length;

  @USHORT()
  external int MaximumLength;

  external PWCH Buffer;
}

typedef UNICODE_STRING$1 = UNICODE_STRING;
typedef LSA_UNICODE_STRING = UNICODE_STRING$1;

final class LUID extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @LONG()
  external int HighPart;
}

typedef LUID$1 = LUID;

final class POLICY_PRIVILEGE_DEFINITION extends ffi.Struct {
  external LSA_UNICODE_STRING Name;

  external LUID$1 LocalValue;
}

typedef PPOLICY_PRIVILEGE_DEFINITION = ffi.Pointer<POLICY_PRIVILEGE_DEFINITION>;
typedef PPH_ENUM_PRIVILEGESFunction = NTSTATUS Function(
    PPOLICY_PRIVILEGE_DEFINITION Privileges,
    ULONG NumberOfPrivileges,
    PVOID Context);
typedef DartPPH_ENUM_PRIVILEGESFunction = DartLONG Function(
    PPOLICY_PRIVILEGE_DEFINITION Privileges,
    DartDWORD NumberOfPrivileges,
    PVOID Context);
typedef PPH_ENUM_PRIVILEGES
    = ffi.Pointer<ffi.NativeFunction<PPH_ENUM_PRIVILEGESFunction>>;

enum LSA_USER_ACCOUNT_TYPE {
  UnknownUserAccountType(0),
  LocalUserAccountType(1),
  PrimaryDomainUserAccountType(2),
  ExternalDomainUserAccountType(3),
  LocalConnectedUserAccountType(4),
  AADUserAccountType(5),
  InternetUserAccountType(6),
  MSAUserAccountType(7);

  final int value;
  const LSA_USER_ACCOUNT_TYPE(this.value);

  static LSA_USER_ACCOUNT_TYPE fromValue(int value) => switch (value) {
        0 => UnknownUserAccountType,
        1 => LocalUserAccountType,
        2 => PrimaryDomainUserAccountType,
        3 => ExternalDomainUserAccountType,
        4 => LocalConnectedUserAccountType,
        5 => AADUserAccountType,
        6 => InternetUserAccountType,
        7 => MSAUserAccountType,
        _ => throw ArgumentError(
            'Unknown value for LSA_USER_ACCOUNT_TYPE: $value'),
      };
}

typedef PLSA_USER_ACCOUNT_TYPE = ffi.Pointer<ffi.UnsignedInt>;
typedef SIZE_T = ULONG_PTR;

final class PH_STRINGREF extends ffi.Struct {
  @SIZE_T()
  external int Length;

  external PWCH Buffer;
}

typedef PPH_STRINGREF = ffi.Pointer<PH_STRINGREF>;
typedef PH_ENUM_ACCOUNT_CALLBACK = ffi.NativeFunction<
    NTSTATUS Function(PPH_STRINGREF AccountName, PVOID Context)>;
typedef PPH_ENUM_ACCOUNT_CALLBACK = ffi.Pointer<PH_ENUM_ACCOUNT_CALLBACK>;

final class SC_HANDLE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef SC_HANDLE = ffi.Pointer<SC_HANDLE__>;
typedef PSC_HANDLE = ffi.Pointer<SC_HANDLE>;

final class PH_CIRCULAR_BUFFER_ULONG extends ffi.Struct {
  @ULONG()
  external int Size;

  @ULONG()
  external int SizeMinusOne;

  @ULONG()
  external int Count;

  @LONG()
  external int Index;

  external ffi.Pointer<ULONG> Data;
}

typedef PH_CIRCULAR_BUFFER_ULONG$1 = PH_CIRCULAR_BUFFER_ULONG;
typedef PPH_CIRCULAR_BUFFER_ULONG = ffi.Pointer<PH_CIRCULAR_BUFFER_ULONG>;

final class PH_CIRCULAR_BUFFER_ULONG64 extends ffi.Struct {
  @ULONG()
  external int Size;

  @ULONG()
  external int SizeMinusOne;

  @ULONG()
  external int Count;

  @LONG()
  external int Index;

  external ffi.Pointer<ULONG64> Data;
}

typedef PH_CIRCULAR_BUFFER_ULONG64$1 = PH_CIRCULAR_BUFFER_ULONG64;
typedef PPH_CIRCULAR_BUFFER_ULONG64 = ffi.Pointer<PH_CIRCULAR_BUFFER_ULONG64>;

final class PH_CIRCULAR_BUFFER_PVOID extends ffi.Struct {
  @ULONG()
  external int Size;

  @ULONG()
  external int SizeMinusOne;

  @ULONG()
  external int Count;

  @LONG()
  external int Index;

  external ffi.Pointer<PVOID> Data;
}

typedef PH_CIRCULAR_BUFFER_PVOID$1 = PH_CIRCULAR_BUFFER_PVOID;
typedef PPH_CIRCULAR_BUFFER_PVOID = ffi.Pointer<PH_CIRCULAR_BUFFER_PVOID>;

final class PH_CIRCULAR_BUFFER_SIZE_T extends ffi.Struct {
  @ULONG()
  external int Size;

  @ULONG()
  external int SizeMinusOne;

  @ULONG()
  external int Count;

  @LONG()
  external int Index;

  external ffi.Pointer<SIZE_T> Data;
}

typedef PH_CIRCULAR_BUFFER_SIZE_T$1 = PH_CIRCULAR_BUFFER_SIZE_T;
typedef PPH_CIRCULAR_BUFFER_SIZE_T = ffi.Pointer<PH_CIRCULAR_BUFFER_SIZE_T>;
typedef FLOAT = ffi.Float;
typedef DartFLOAT = double;

final class PH_CIRCULAR_BUFFER_FLOAT extends ffi.Struct {
  @ULONG()
  external int Size;

  @ULONG()
  external int SizeMinusOne;

  @ULONG()
  external int Count;

  @LONG()
  external int Index;

  external ffi.Pointer<FLOAT> Data;
}

typedef PH_CIRCULAR_BUFFER_FLOAT$1 = PH_CIRCULAR_BUFFER_FLOAT;
typedef PPH_CIRCULAR_BUFFER_FLOAT = ffi.Pointer<PH_CIRCULAR_BUFFER_FLOAT>;

final class PH_CIRCULAR_BUFFER_DOUBLE extends ffi.Struct {
  @ULONG()
  external int Size;

  @ULONG()
  external int SizeMinusOne;

  @ULONG()
  external int Count;

  @LONG()
  external int Index;

  external ffi.Pointer<DOUBLE> Data;
}

typedef PH_CIRCULAR_BUFFER_DOUBLE$1 = PH_CIRCULAR_BUFFER_DOUBLE;
typedef PPH_CIRCULAR_BUFFER_DOUBLE = ffi.Pointer<PH_CIRCULAR_BUFFER_DOUBLE>;

final class PH_SINGLE_DELTA extends ffi.Struct {
  @FLOAT()
  external double Value;

  @FLOAT()
  external double Delta;
}

typedef PH_SINGLE_DELTA$1 = PH_SINGLE_DELTA;
typedef PPH_SINGLE_DELTA = ffi.Pointer<PH_SINGLE_DELTA>;

final class PH_DOUBLE_DELTA extends ffi.Struct {
  @DOUBLE()
  external double Value;

  @DOUBLE()
  external double Delta;
}

typedef PH_DOUBLE_DELTA$1 = PH_DOUBLE_DELTA;
typedef PPH_DOUBLE_DELTA = ffi.Pointer<PH_DOUBLE_DELTA>;

final class PH_UINT32_DELTA extends ffi.Struct {
  @ULONG()
  external int Value;

  @ULONG()
  external int Delta;
}

typedef PH_UINT32_DELTA$1 = PH_UINT32_DELTA;
typedef PPH_UINT32_DELTA = ffi.Pointer<PH_UINT32_DELTA>;

final class PH_UINT64_DELTA extends ffi.Struct {
  @ULONG64()
  external int Value;

  @ULONG64()
  external int Delta;
}

typedef PH_UINT64_DELTA$1 = PH_UINT64_DELTA;
typedef PPH_UINT64_DELTA = ffi.Pointer<PH_UINT64_DELTA>;

final class PH_UINTPTR_DELTA extends ffi.Struct {
  @ULONG_PTR()
  external int Value;

  @ULONG_PTR()
  external int Delta;
}

typedef PH_UINTPTR_DELTA$1 = PH_UINTPTR_DELTA;
typedef PPH_UINTPTR_DELTA = ffi.Pointer<PH_UINTPTR_DELTA>;

final class HWND__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HWND = ffi.Pointer<HWND__>;
typedef UINT_PTR = ffi.UnsignedLongLong;
typedef DartUINT_PTR = int;
typedef UINT = ffi.UnsignedInt;
typedef DartUINT = int;

final class tagNMHDR extends ffi.Struct {
  external HWND hwndFrom;

  @UINT_PTR()
  external int idFrom;

  @UINT()
  external int code;
}

typedef NMHDR = tagNMHDR;

final class NMRUNFILEDLGW extends ffi.Struct {
  external NMHDR hdr;

  external PWSTR lpszFile;

  external PWSTR lpszDirectory;

  @UINT()
  external int ShowCmd;
}

typedef NMRUNFILEDLGW$1 = NMRUNFILEDLGW;
typedef LPNMRUNFILEDLGW = ffi.Pointer<NMRUNFILEDLGW>;
typedef PNMRUNFILEDLGW = ffi.Pointer<NMRUNFILEDLGW>;
typedef NMRUNFILEDLG = NMRUNFILEDLGW$1;
typedef PNMRUNFILEDLG = PNMRUNFILEDLGW;
typedef LPNMRUNFILEDLG = LPNMRUNFILEDLGW;
typedef HTHEME = HANDLE;

final class PH_INTEGER_PAIR extends ffi.Struct {
  @LONG()
  external int X;

  @LONG()
  external int Y;
}

typedef PH_INTEGER_PAIR$1 = PH_INTEGER_PAIR;

enum THEMEPARTSIZE {
  /// minimum size
  THEMEPARTSIZE_MIN(0),

  /// size without stretching
  THEMEPARTSIZE_TRUE(1),

  /// size that theme mgr will use to draw part
  THEMEPARTSIZE_DRAW(2);

  final int value;
  const THEMEPARTSIZE(this.value);

  static THEMEPARTSIZE fromValue(int value) => switch (value) {
        0 => THEMEPARTSIZE_MIN,
        1 => THEMEPARTSIZE_TRUE,
        2 => THEMEPARTSIZE_DRAW,
        _ => throw ArgumentError('Unknown value for THEMEPARTSIZE: $value'),
      };
}

typedef SHORT = ffi.Short;
typedef DartSHORT = int;

@ffi.Packed(1)
final class DLGTEMPLATEEX extends ffi.Struct {
  @USHORT()
  external int dlgVer;

  @USHORT()
  external int signature;

  @ULONG()
  external int helpID;

  @ULONG()
  external int exStyle;

  @ULONG()
  external int style;

  @USHORT()
  external int cDlgItems;

  @SHORT()
  external int x;

  @SHORT()
  external int y;

  @SHORT()
  external int cx;

  @SHORT()
  external int cy;
}

typedef DLGTEMPLATEEX$1 = DLGTEMPLATEEX;
typedef PDLGTEMPLATEEX = ffi.Pointer<DLGTEMPLATEEX>;
typedef HDWP = HANDLE;

final class tagRECT extends ffi.Struct {
  @LONG()
  external int left;

  @LONG()
  external int top;

  @LONG()
  external int right;

  @LONG()
  external int bottom;
}

typedef RECT = tagRECT;

final class PH_LAYOUT_ITEM extends ffi.Struct {
  external HWND Handle;

  /// for rectangle calculation
  external ffi.Pointer<PH_LAYOUT_ITEM> ParentItem;

  /// for actual resizing
  external ffi.Pointer<PH_LAYOUT_ITEM> LayoutParentItem;

  @ULONG()
  external int LayoutNumber;

  @ULONG()
  external int NumberOfChildren;

  external HDWP DeferHandle;

  external RECT Rect;

  external RECT Margin;

  @ULONG()
  external int Anchor;
}

typedef PH_LAYOUT_ITEM$1 = PH_LAYOUT_ITEM;
typedef PPH_LAYOUT_ITEM = ffi.Pointer<PH_LAYOUT_ITEM>;

final class PH_LIST extends ffi.Struct {
  @ULONG()
  external int Count;

  @ULONG()
  external int AllocatedCount;

  external ffi.Pointer<PVOID> Items;
}

typedef PPH_LIST = ffi.Pointer<PH_LIST>;

final class PH_LAYOUT_MANAGER extends ffi.Struct {
  external PPH_LIST List;

  external PH_LAYOUT_ITEM$1 RootItem;

  @ULONG()
  external int LayoutNumber;

  @LONG()
  external int dpiValue;
}

typedef PH_LAYOUT_MANAGER$1 = PH_LAYOUT_MANAGER;
typedef PPH_LAYOUT_MANAGER = ffi.Pointer<PH_LAYOUT_MANAGER>;
typedef BOOL = ffi.Int;
typedef DartBOOL = int;
typedef PH_ENUM_CALLBACKFunction = BOOL Function(
    HWND WindowHandle, PVOID Context);
typedef DartPH_ENUM_CALLBACKFunction = DartBOOL Function(
    HWND WindowHandle, PVOID Context);
typedef PH_ENUM_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PH_ENUM_CALLBACKFunction>>;
typedef PH_CHILD_ENUM_CALLBACKFunction = BOOLEAN Function(
    HWND WindowHandle, PVOID Context);
typedef DartPH_CHILD_ENUM_CALLBACKFunction = Dartboolean Function(
    HWND WindowHandle, PVOID Context);
typedef PH_CHILD_ENUM_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PH_CHILD_ENUM_CALLBACKFunction>>;

enum PH_ITEM_STATE {
  /// The item is normal. Use the ItemColorFunction to determine the color of the item.
  NormalItemState(0),

  /// The item is new. On the next tick, change the state to NormalItemState. When an item is in
  /// this state, highlight it in NewColor.
  NewItemState(1),

  /// The item is being removed. On the next tick, delete the item. When an item is in this state,
  /// highlight it in RemovingColor.
  RemovingItemState(2);

  final int value;
  const PH_ITEM_STATE(this.value);

  static PH_ITEM_STATE fromValue(int value) => switch (value) {
        0 => NormalItemState,
        1 => NewItemState,
        2 => RemovingItemState,
        _ => throw ArgumentError('Unknown value for PH_ITEM_STATE: $value'),
      };
}

typedef COLORREF = DWORD;
typedef PPH_EXTLV_GET_ITEM_COLORFunction = COLORREF Function(
    LONG Index, PVOID Param, PVOID Context);
typedef DartPPH_EXTLV_GET_ITEM_COLORFunction = DartDWORD Function(
    DartLONG Index, PVOID Param, PVOID Context);
typedef PPH_EXTLV_GET_ITEM_COLOR
    = ffi.Pointer<ffi.NativeFunction<PPH_EXTLV_GET_ITEM_COLORFunction>>;

final class HFONT__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HFONT = ffi.Pointer<HFONT__>;
typedef PPH_EXTLV_GET_ITEM_FONTFunction = HFONT Function(
    LONG Index, PVOID Param, PVOID Context);
typedef DartPPH_EXTLV_GET_ITEM_FONTFunction = HFONT Function(
    DartLONG Index, PVOID Param, PVOID Context);
typedef PPH_EXTLV_GET_ITEM_FONT
    = ffi.Pointer<ffi.NativeFunction<PPH_EXTLV_GET_ITEM_FONTFunction>>;

/// Window support
enum PH_PLUGIN_WINDOW_EVENT_TYPE {
  PH_PLUGIN_WINDOW_EVENT_TYPE_NONE(0),
  PH_PLUGIN_WINDOW_EVENT_TYPE_TOPMOST(1),
  PH_PLUGIN_WINDOW_EVENT_TYPE_MAX(2);

  final int value;
  const PH_PLUGIN_WINDOW_EVENT_TYPE(this.value);

  static PH_PLUGIN_WINDOW_EVENT_TYPE fromValue(int value) => switch (value) {
        0 => PH_PLUGIN_WINDOW_EVENT_TYPE_NONE,
        1 => PH_PLUGIN_WINDOW_EVENT_TYPE_TOPMOST,
        2 => PH_PLUGIN_WINDOW_EVENT_TYPE_MAX,
        _ => throw ArgumentError(
            'Unknown value for PH_PLUGIN_WINDOW_EVENT_TYPE: $value'),
      };
}

final class PH_PLUGIN_WINDOW_CALLBACK_REGISTRATION extends ffi.Struct {
  external HWND WindowHandle;

  @ffi.UnsignedInt()
  external int TypeAsInt;

  PH_PLUGIN_WINDOW_EVENT_TYPE get Type =>
      PH_PLUGIN_WINDOW_EVENT_TYPE.fromValue(TypeAsInt);
}

typedef PH_PLUGIN_WINDOW_CALLBACK_REGISTRATION$1
    = PH_PLUGIN_WINDOW_CALLBACK_REGISTRATION;
typedef PPH_PLUGIN_WINDOW_CALLBACK_REGISTRATION
    = ffi.Pointer<PH_PLUGIN_WINDOW_CALLBACK_REGISTRATION>;

final class UnnamedUnion15 extends ffi.Union {
  @BOOLEAN()
  external int TopMost;
}

final class PH_PLUGIN_WINDOW_NOTIFY_EVENT extends ffi.Struct {
  @ffi.UnsignedInt()
  external int TypeAsInt;

  PH_PLUGIN_WINDOW_EVENT_TYPE get Type =>
      PH_PLUGIN_WINDOW_EVENT_TYPE.fromValue(TypeAsInt);

  external UnnamedUnion15 unnamed;
}

typedef PH_PLUGIN_WINDOW_NOTIFY_EVENT$1 = PH_PLUGIN_WINDOW_NOTIFY_EVENT;
typedef PPH_PLUGIN_WINDOW_NOTIFY_EVENT
    = ffi.Pointer<PH_PLUGIN_WINDOW_NOTIFY_EVENT>;

final class PH_PLUGIN_MAINWINDOW_NOTIFY_EVENT extends ffi.Struct {
  external PPH_PLUGIN_WINDOW_NOTIFY_EVENT Event;

  external PPH_PLUGIN_WINDOW_CALLBACK_REGISTRATION Callback;
}

typedef PH_PLUGIN_MAINWINDOW_NOTIFY_EVENT$1 = PH_PLUGIN_MAINWINDOW_NOTIFY_EVENT;
typedef PPH_PLUGIN_MAINWINDOW_NOTIFY_EVENT
    = ffi.Pointer<PH_PLUGIN_MAINWINDOW_NOTIFY_EVENT>;

enum PROCESS_UICONTEXT {
  PROCESS_UICONTEXT_DESKTOP(0),
  PROCESS_UICONTEXT_IMMERSIVE(1),
  PROCESS_UICONTEXT_IMMERSIVE_BROKER(2),
  PROCESS_UICONTEXT_IMMERSIVE_BROWSER(3);

  final int value;
  const PROCESS_UICONTEXT(this.value);

  static PROCESS_UICONTEXT fromValue(int value) => switch (value) {
        0 => PROCESS_UICONTEXT_DESKTOP,
        1 => PROCESS_UICONTEXT_IMMERSIVE,
        2 => PROCESS_UICONTEXT_IMMERSIVE_BROKER,
        3 => PROCESS_UICONTEXT_IMMERSIVE_BROWSER,
        _ => throw ArgumentError('Unknown value for PROCESS_UICONTEXT: $value'),
      };
}

enum PROCESS_UI_FLAGS {
  PROCESS_UIF_NONE(0),
  PROCESS_UIF_AUTHORING_MODE(1),
  PROCESS_UIF_RESTRICTIONS_DISABLED(2);

  final int value;
  const PROCESS_UI_FLAGS(this.value);

  static PROCESS_UI_FLAGS fromValue(int value) => switch (value) {
        0 => PROCESS_UIF_NONE,
        1 => PROCESS_UIF_AUTHORING_MODE,
        2 => PROCESS_UIF_RESTRICTIONS_DISABLED,
        _ => throw ArgumentError('Unknown value for PROCESS_UI_FLAGS: $value'),
      };
}

final class PROCESS_UICONTEXT_INFORMATION extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ProcessUIContextAsInt;

  PROCESS_UICONTEXT get ProcessUIContext =>
      PROCESS_UICONTEXT.fromValue(ProcessUIContextAsInt);

  @ffi.UnsignedInt()
  external int FlagsAsInt;

  PROCESS_UI_FLAGS get Flags => PROCESS_UI_FLAGS.fromValue(FlagsAsInt);
}

typedef PROCESS_UICONTEXT_INFORMATION$1 = PROCESS_UICONTEXT_INFORMATION;
typedef PPROCESS_UICONTEXT_INFORMATION
    = ffi.Pointer<PROCESS_UICONTEXT_INFORMATION>;

enum PH_PROCESS_DPI_AWARENESS {
  PH_PROCESS_DPI_AWARENESS_UNAWARE(0),
  PH_PROCESS_DPI_AWARENESS_SYSTEM_DPI_AWARE(1),
  PH_PROCESS_DPI_AWARENESS_PER_MONITOR_DPI_AWARE(2),
  PH_PROCESS_DPI_AWARENESS_PER_MONITOR_AWARE_V2(3),
  PH_PROCESS_DPI_AWARENESS_UNAWARE_GDISCALED(4);

  final int value;
  const PH_PROCESS_DPI_AWARENESS(this.value);

  static PH_PROCESS_DPI_AWARENESS fromValue(int value) => switch (value) {
        0 => PH_PROCESS_DPI_AWARENESS_UNAWARE,
        1 => PH_PROCESS_DPI_AWARENESS_SYSTEM_DPI_AWARE,
        2 => PH_PROCESS_DPI_AWARENESS_PER_MONITOR_DPI_AWARE,
        3 => PH_PROCESS_DPI_AWARENESS_PER_MONITOR_AWARE_V2,
        4 => PH_PROCESS_DPI_AWARENESS_UNAWARE_GDISCALED,
        _ => throw ArgumentError(
            'Unknown value for PH_PROCESS_DPI_AWARENESS: $value'),
      };
}

typedef PPH_PROCESS_DPI_AWARENESS = ffi.Pointer<ffi.UnsignedInt>;

enum PH_BUFFERFORMAT {
  /// Compatible bitmap
  PHBF_COMPATIBLEBITMAP(0),

  /// Device-independent bitmap
  PHBF_DIB(1),

  /// Top-down device-independent bitmap
  PHBF_TOPDOWNDIB(2),

  /// Top-down monochrome device-independent bitmap
  PHBF_TOPDOWNMONODIB(3);

  final int value;
  const PH_BUFFERFORMAT(this.value);

  static PH_BUFFERFORMAT fromValue(int value) => switch (value) {
        0 => PHBF_COMPATIBLEBITMAP,
        1 => PHBF_DIB,
        2 => PHBF_TOPDOWNDIB,
        3 => PHBF_TOPDOWNMONODIB,
        _ => throw ArgumentError('Unknown value for PH_BUFFERFORMAT: $value'),
      };
}

enum PH_IMAGE_FORMAT_TYPE {
  PH_IMAGE_FORMAT_TYPE_NONE(0),
  PH_IMAGE_FORMAT_TYPE_ICO(1),
  PH_IMAGE_FORMAT_TYPE_BMP(2),
  PH_IMAGE_FORMAT_TYPE_JPG(3),
  PH_IMAGE_FORMAT_TYPE_PNG(4);

  final int value;
  const PH_IMAGE_FORMAT_TYPE(this.value);

  static PH_IMAGE_FORMAT_TYPE fromValue(int value) => switch (value) {
        0 => PH_IMAGE_FORMAT_TYPE_NONE,
        1 => PH_IMAGE_FORMAT_TYPE_ICO,
        2 => PH_IMAGE_FORMAT_TYPE_BMP,
        3 => PH_IMAGE_FORMAT_TYPE_JPG,
        4 => PH_IMAGE_FORMAT_TYPE_PNG,
        _ =>
          throw ArgumentError('Unknown value for PH_IMAGE_FORMAT_TYPE: $value'),
      };
}

typedef PPH_IMAGE_FORMAT_TYPE = ffi.Pointer<ffi.UnsignedInt>;

/// Acrylic support
enum WINDOWCOMPOSITIONATTRIB {
  WCA_UNDEFINED(0),

  /// BOOL
  WCA_NCRENDERING_ENABLED(1),

  /// DWMNCRENDERINGPOLICY
  WCA_NCRENDERING_POLICY(2),

  /// BOOL
  WCA_TRANSITIONS_FORCEDISABLED(3),

  /// BOOL
  WCA_ALLOW_NCPAINT(4),

  /// RECT
  WCA_CAPTION_BUTTON_BOUNDS(5),

  /// BOOL
  WCA_NONCLIENT_RTL_LAYOUT(6),

  /// BOOL
  WCA_FORCE_ICONIC_REPRESENTATION(7),

  /// RECT
  WCA_EXTENDED_FRAME_BOUNDS(8),

  /// BOOL
  WCA_HAS_ICONIC_BITMAP(9),
  WCA_THEME_ATTRIBUTES(10),
  WCA_NCRENDERING_EXILED(11),
  WCA_NCADORNMENTINFO(12),
  WCA_EXCLUDED_FROM_LIVEPREVIEW(13),
  WCA_VIDEO_OVERLAY_ACTIVE(14),
  WCA_FORCE_ACTIVEWINDOW_APPEARANCE(15),
  WCA_DISALLOW_PEEK(16),
  WCA_CLOAK(17),

  /// DWM_CLOAKED_*
  WCA_CLOAKED(18),

  /// ACCENT_POLICY // since WIN11
  WCA_ACCENT_POLICY(19),
  WCA_FREEZE_REPRESENTATION(20),
  WCA_EVER_UNCLOAKED(21),
  WCA_VISUAL_OWNER(22),
  WCA_HOLOGRAPHIC(23),
  WCA_EXCLUDED_FROM_DDA(24),
  WCA_PASSIVEUPDATEMODE(25),

  /// BOOL
  WCA_USEDARKMODECOLORS(26),
  WCA_CORNER_STYLE(27),

  /// ULONG
  WCA_PART_COLOR(28),
  WCA_DISABLE_MOVESIZE_FEEDBACK(29),
  WCA_SYSTEMBACKDROP_TYPE(30),
  WCA_SET_TAGGED_WINDOW_RECT(31),
  WCA_CLEAR_TAGGED_WINDOW_RECT(32),

  /// since 24H2
  WCA_REMOTEAPP_POLICY(33),
  WCA_HAS_ACCENT_POLICY(34),
  WCA_REDIRECTIONBITMAP_FILL_COLOR(35),
  WCA_REDIRECTIONBITMAP_ALPHA(36),
  WCA_BORDER_MARGINS(37),
  WCA_LAST(38);

  final int value;
  const WINDOWCOMPOSITIONATTRIB(this.value);

  static WINDOWCOMPOSITIONATTRIB fromValue(int value) => switch (value) {
        0 => WCA_UNDEFINED,
        1 => WCA_NCRENDERING_ENABLED,
        2 => WCA_NCRENDERING_POLICY,
        3 => WCA_TRANSITIONS_FORCEDISABLED,
        4 => WCA_ALLOW_NCPAINT,
        5 => WCA_CAPTION_BUTTON_BOUNDS,
        6 => WCA_NONCLIENT_RTL_LAYOUT,
        7 => WCA_FORCE_ICONIC_REPRESENTATION,
        8 => WCA_EXTENDED_FRAME_BOUNDS,
        9 => WCA_HAS_ICONIC_BITMAP,
        10 => WCA_THEME_ATTRIBUTES,
        11 => WCA_NCRENDERING_EXILED,
        12 => WCA_NCADORNMENTINFO,
        13 => WCA_EXCLUDED_FROM_LIVEPREVIEW,
        14 => WCA_VIDEO_OVERLAY_ACTIVE,
        15 => WCA_FORCE_ACTIVEWINDOW_APPEARANCE,
        16 => WCA_DISALLOW_PEEK,
        17 => WCA_CLOAK,
        18 => WCA_CLOAKED,
        19 => WCA_ACCENT_POLICY,
        20 => WCA_FREEZE_REPRESENTATION,
        21 => WCA_EVER_UNCLOAKED,
        22 => WCA_VISUAL_OWNER,
        23 => WCA_HOLOGRAPHIC,
        24 => WCA_EXCLUDED_FROM_DDA,
        25 => WCA_PASSIVEUPDATEMODE,
        26 => WCA_USEDARKMODECOLORS,
        27 => WCA_CORNER_STYLE,
        28 => WCA_PART_COLOR,
        29 => WCA_DISABLE_MOVESIZE_FEEDBACK,
        30 => WCA_SYSTEMBACKDROP_TYPE,
        31 => WCA_SET_TAGGED_WINDOW_RECT,
        32 => WCA_CLEAR_TAGGED_WINDOW_RECT,
        33 => WCA_REMOTEAPP_POLICY,
        34 => WCA_HAS_ACCENT_POLICY,
        35 => WCA_REDIRECTIONBITMAP_FILL_COLOR,
        36 => WCA_REDIRECTIONBITMAP_ALPHA,
        37 => WCA_BORDER_MARGINS,
        38 => WCA_LAST,
        _ => throw ArgumentError(
            'Unknown value for WINDOWCOMPOSITIONATTRIB: $value'),
      };
}

final class WINDOWCOMPOSITIONATTRIBUTEDATA extends ffi.Struct {
  @ffi.UnsignedInt()
  external int AttributeAsInt;

  WINDOWCOMPOSITIONATTRIB get Attribute =>
      WINDOWCOMPOSITIONATTRIB.fromValue(AttributeAsInt);

  external PVOID Data;

  @SIZE_T()
  external int Length;
}

typedef WINDOWCOMPOSITIONATTRIBUTEDATA$1 = WINDOWCOMPOSITIONATTRIBUTEDATA;
typedef PWINDOWCOMPOSITIONATTRIBUTEDATA
    = ffi.Pointer<WINDOWCOMPOSITIONATTRIBUTEDATA>;

enum ACCENT_STATE {
  ACCENT_DISABLED(0),
  ACCENT_ENABLE_GRADIENT(1),
  ACCENT_ENABLE_TRANSPARENTGRADIENT(2),
  ACCENT_ENABLE_BLURBEHIND(3),
  ACCENT_ENABLE_ACRYLICBLURBEHIND(4),
  ACCENT_ENABLE_HOSTBACKDROP(5),
  ACCENT_INVALID_STATE(6);

  final int value;
  const ACCENT_STATE(this.value);

  static ACCENT_STATE fromValue(int value) => switch (value) {
        0 => ACCENT_DISABLED,
        1 => ACCENT_ENABLE_GRADIENT,
        2 => ACCENT_ENABLE_TRANSPARENTGRADIENT,
        3 => ACCENT_ENABLE_BLURBEHIND,
        4 => ACCENT_ENABLE_ACRYLICBLURBEHIND,
        5 => ACCENT_ENABLE_HOSTBACKDROP,
        6 => ACCENT_INVALID_STATE,
        _ => throw ArgumentError('Unknown value for ACCENT_STATE: $value'),
      };
}

enum ACCENT_FLAG {
  ACCENT_NONE(0),
  ACCENT_WINDOWS11_LUMINOSITY(2),
  ACCENT_BORDER_LEFT(32),
  ACCENT_BORDER_TOP(64),
  ACCENT_BORDER_RIGHT(128),
  ACCENT_BORDER_BOTTOM(256),
  ACCENT_BORDER_ALL(480);

  final int value;
  const ACCENT_FLAG(this.value);

  static ACCENT_FLAG fromValue(int value) => switch (value) {
        0 => ACCENT_NONE,
        2 => ACCENT_WINDOWS11_LUMINOSITY,
        32 => ACCENT_BORDER_LEFT,
        64 => ACCENT_BORDER_TOP,
        128 => ACCENT_BORDER_RIGHT,
        256 => ACCENT_BORDER_BOTTOM,
        480 => ACCENT_BORDER_ALL,
        _ => throw ArgumentError('Unknown value for ACCENT_FLAG: $value'),
      };
}

final class ACCENT_POLICY extends ffi.Struct {
  @ffi.UnsignedInt()
  external int AccentStateAsInt;

  ACCENT_STATE get AccentState => ACCENT_STATE.fromValue(AccentStateAsInt);

  @ULONG()
  external int AccentFlags;

  @ULONG()
  external int GradientColor;

  @ULONG()
  external int AnimationId;
}

typedef ACCENT_POLICY$1 = ACCENT_POLICY;
typedef PPH_ENUM_MRULIST_CALLBACKFunction = BOOLEAN Function(
    PPH_STRINGREF Command, PVOID Context);
typedef DartPPH_ENUM_MRULIST_CALLBACKFunction = Dartboolean Function(
    PPH_STRINGREF Command, PVOID Context);
typedef PPH_ENUM_MRULIST_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PPH_ENUM_MRULIST_CALLBACKFunction>>;

final class DEV_BROADCAST_HDR extends ffi.Struct {
  @ULONG()
  external int dbch_size;

  @ULONG()
  external int dbch_devicetype;

  @ULONG()
  external int dbch_reserved;
}

typedef DEV_BROADCAST_HDR$1 = DEV_BROADCAST_HDR;
typedef PDEV_BROADCAST_HDR = ffi.Pointer<DEV_BROADCAST_HDR>;

final class HBRUSH__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HBRUSH = ffi.Pointer<HBRUSH__>;

final class PH_TREENEW_CREATEPARAMS extends ffi.Struct {
  @ULONG()
  external int Size;

  @COLORREF()
  external int TextColor;

  @COLORREF()
  external int FocusColor;

  @COLORREF()
  external int SelectionColor;

  @ULONG()
  external int RowHeight;
}

typedef PH_TREENEW_CREATEPARAMS$1 = PH_TREENEW_CREATEPARAMS;
typedef PPH_TREENEW_CREATEPARAMS = ffi.Pointer<PH_TREENEW_CREATEPARAMS>;

final class PH_TREENEW_COLUMN extends ffi.Opaque {}

typedef PH_TREENEW_COLUMN$1 = PH_TREENEW_COLUMN;
typedef PPH_TREENEW_COLUMN = ffi.Pointer<PH_TREENEW_COLUMN>;

final class PH_TREENEW_NODE extends ffi.Opaque {}

typedef PH_TREENEW_NODE$1 = PH_TREENEW_NODE;
typedef PPH_TREENEW_NODE = ffi.Pointer<PH_TREENEW_NODE>;
typedef PH_STRINGREF$1 = PH_STRINGREF;

final class PH_TREENEW_CELL_PARTS extends ffi.Struct {
  @ULONG()
  external int Flags;

  external RECT RowRect;

  /// TN_PART_CELL
  external RECT CellRect;

  /// TN_PART_PLUSMINUS
  external RECT PlusMinusRect;

  /// TN_PART_ICON
  external RECT IconRect;

  /// TN_PART_CONTENT
  external RECT ContentRect;

  /// TN_PART_TEXT
  external RECT TextRect;

  /// TN_PART_TEXT
  external PH_STRINGREF$1 Text;

  /// TN_PART_TEXT
  external HFONT Font;
}

typedef PH_TREENEW_CELL_PARTS$1 = PH_TREENEW_CELL_PARTS;
typedef PPH_TREENEW_CELL_PARTS = ffi.Pointer<PH_TREENEW_CELL_PARTS>;

final class tagPOINT extends ffi.Struct {
  @LONG()
  external int x;

  @LONG()
  external int y;
}

typedef POINT = tagPOINT;

final class PH_TREENEW_HIT_TEST extends ffi.Struct {
  external POINT Point;

  @ULONG()
  external int InFlags;

  @ULONG()
  external int Flags;

  external PPH_TREENEW_NODE Node;

  /// requires TN_TEST_COLUMN
  external PPH_TREENEW_COLUMN Column;
}

typedef PH_TREENEW_HIT_TEST$1 = PH_TREENEW_HIT_TEST;
typedef PPH_TREENEW_HIT_TEST = ffi.Pointer<PH_TREENEW_HIT_TEST>;

enum PH_TREENEW_MESSAGE {
  /// PPH_TREENEW_GET_CHILDREN Parameter1
  TreeNewGetChildren(0),

  /// PPH_TREENEW_IS_LEAF Parameter1
  TreeNewIsLeaf(1),

  /// PPH_TREENEW_GET_CELL_TEXT Parameter1
  TreeNewGetCellText(2),

  /// PPH_TREENEW_GET_NODE_COLOR Parameter1
  TreeNewGetNodeColor(3),

  /// PPH_TREENEW_GET_NODE_FONT Parameter1
  TreeNewGetNodeFont(4),

  /// PPH_TREENEW_GET_NODE_ICON Parameter1
  TreeNewGetNodeIcon(5),

  /// PPH_TREENEW_GET_CELL_TOOLTIP Parameter1
  TreeNewGetCellTooltip(6),

  /// PPH_TREENEW_CUSTOM_DRAW Parameter1
  TreeNewCustomDraw(7),

  /// PPH_TREENEW_NODE Parameter1, PPH_TREENEW_NODE_EVENT Parameter2
  TreeNewNodeExpanding(8),

  /// PPH_TREENEW_NODE Parameter1
  TreeNewNodeSelecting(9),
  TreeNewSortChanged(10),
  TreeNewSelectionChanged(11),

  /// PPH_TREENEW_KEY_EVENT Parameter1
  TreeNewKeyDown(12),

  /// PPH_TREENEW_MOUSE_EVENT Parameter1
  TreeNewLeftClick(13),

  /// PPH_TREENEW_MOUSE_EVENT Parameter1
  TreeNewRightClick(14),

  /// PPH_TREENEW_MOUSE_EVENT Parameter1
  TreeNewMiddleClick(15),

  /// PPH_TREENEW_MOUSE_EVENT Parameter1
  TreeNewLeftDoubleClick(16),

  /// PPH_TREENEW_MOUSE_EVENT Parameter1
  TreeNewRightDoubleClick(17),

  /// PPH_TREENEW_CONTEXT_MENU Parameter1
  TreeNewContextMenu(18),

  /// PPH_TREENEW_HEADER_MOUSE_EVENT Parameter1
  TreeNewHeaderRightClick(19),

  /// PPH_TREENEW_SEARCH_EVENT Parameter1
  TreeNewIncrementalSearch(20),

  /// PPH_TREENEW_COLUMN Parameter1
  TreeNewColumnResized(21),
  TreeNewColumnReordered(22),
  TreeNewDestroying(23),

  /// ULONG Parameter1, PULONG Parameter2
  TreeNewGetDialogCode(24),
  TreeNewGetHeaderText(25),
  MaxTreeNewMessage(26);

  final int value;
  const PH_TREENEW_MESSAGE(this.value);

  static PH_TREENEW_MESSAGE fromValue(int value) => switch (value) {
        0 => TreeNewGetChildren,
        1 => TreeNewIsLeaf,
        2 => TreeNewGetCellText,
        3 => TreeNewGetNodeColor,
        4 => TreeNewGetNodeFont,
        5 => TreeNewGetNodeIcon,
        6 => TreeNewGetCellTooltip,
        7 => TreeNewCustomDraw,
        8 => TreeNewNodeExpanding,
        9 => TreeNewNodeSelecting,
        10 => TreeNewSortChanged,
        11 => TreeNewSelectionChanged,
        12 => TreeNewKeyDown,
        13 => TreeNewLeftClick,
        14 => TreeNewRightClick,
        15 => TreeNewMiddleClick,
        16 => TreeNewLeftDoubleClick,
        17 => TreeNewRightDoubleClick,
        18 => TreeNewContextMenu,
        19 => TreeNewHeaderRightClick,
        20 => TreeNewIncrementalSearch,
        21 => TreeNewColumnResized,
        22 => TreeNewColumnReordered,
        23 => TreeNewDestroying,
        24 => TreeNewGetDialogCode,
        25 => TreeNewGetHeaderText,
        26 => MaxTreeNewMessage,
        _ =>
          throw ArgumentError('Unknown value for PH_TREENEW_MESSAGE: $value'),
      };
}

typedef PH_TREENEW_CALLBACK = ffi.NativeFunction<
    BOOLEAN Function(HWND hwnd, ffi.UnsignedInt Message, PVOID Parameter1,
        PVOID Parameter2, PVOID Context)>;
typedef PPH_TREENEW_CALLBACK = ffi.Pointer<PH_TREENEW_CALLBACK>;

final class PH_TREENEW_GET_CHILDREN extends ffi.Struct {
  @ULONG()
  external int Flags;

  external PPH_TREENEW_NODE Node;

  @ULONG()
  external int NumberOfChildren;

  /// can be NULL if no children
  external ffi.Pointer<PPH_TREENEW_NODE> Children;
}

typedef PH_TREENEW_GET_CHILDREN$1 = PH_TREENEW_GET_CHILDREN;
typedef PPH_TREENEW_GET_CHILDREN = ffi.Pointer<PH_TREENEW_GET_CHILDREN>;

final class PH_TREENEW_IS_LEAF extends ffi.Struct {
  @ULONG()
  external int Flags;

  external PPH_TREENEW_NODE Node;

  @BOOLEAN()
  external int IsLeaf;
}

typedef PH_TREENEW_IS_LEAF$1 = PH_TREENEW_IS_LEAF;
typedef PPH_TREENEW_IS_LEAF = ffi.Pointer<PH_TREENEW_IS_LEAF>;

final class PH_TREENEW_GET_CELL_TEXT extends ffi.Struct {
  @ULONG()
  external int Flags;

  external PPH_TREENEW_NODE Node;

  @ULONG()
  external int Id;

  external PH_STRINGREF$1 Text;
}

typedef PH_TREENEW_GET_CELL_TEXT$1 = PH_TREENEW_GET_CELL_TEXT;
typedef PPH_TREENEW_GET_CELL_TEXT = ffi.Pointer<PH_TREENEW_GET_CELL_TEXT>;

final class PH_TREENEW_GET_NODE_COLOR extends ffi.Struct {
  @ULONG()
  external int Flags;

  external PPH_TREENEW_NODE Node;

  @COLORREF()
  external int BackColor;

  @COLORREF()
  external int ForeColor;
}

typedef PH_TREENEW_GET_NODE_COLOR$1 = PH_TREENEW_GET_NODE_COLOR;
typedef PPH_TREENEW_GET_NODE_COLOR = ffi.Pointer<PH_TREENEW_GET_NODE_COLOR>;

final class PH_TREENEW_GET_NODE_FONT extends ffi.Struct {
  @ULONG()
  external int Flags;

  external PPH_TREENEW_NODE Node;

  external HFONT Font;
}

typedef PH_TREENEW_GET_NODE_FONT$1 = PH_TREENEW_GET_NODE_FONT;
typedef PPH_TREENEW_GET_NODE_FONT = ffi.Pointer<PH_TREENEW_GET_NODE_FONT>;

final class HICON__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HICON = ffi.Pointer<HICON__>;

final class PH_TREENEW_GET_NODE_ICON extends ffi.Struct {
  @ULONG()
  external int Flags;

  external PPH_TREENEW_NODE Node;

  external HICON Icon;
}

typedef PH_TREENEW_GET_NODE_ICON$1 = PH_TREENEW_GET_NODE_ICON;
typedef PPH_TREENEW_GET_NODE_ICON = ffi.Pointer<PH_TREENEW_GET_NODE_ICON>;

final class PH_TREENEW_GET_CELL_TOOLTIP extends ffi.Struct {
  @ULONG()
  external int Flags;

  external PPH_TREENEW_NODE Node;

  external PPH_TREENEW_COLUMN Column;

  @BOOLEAN()
  external int Unfolding;

  external PH_STRINGREF$1 Text;

  external HFONT Font;

  @ULONG()
  external int MaximumWidth;
}

typedef PH_TREENEW_GET_CELL_TOOLTIP$1 = PH_TREENEW_GET_CELL_TOOLTIP;
typedef PPH_TREENEW_GET_CELL_TOOLTIP = ffi.Pointer<PH_TREENEW_GET_CELL_TOOLTIP>;

final class HDC__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HDC = ffi.Pointer<HDC__>;

final class PH_TREENEW_CUSTOM_DRAW extends ffi.Struct {
  external PPH_TREENEW_NODE Node;

  external PPH_TREENEW_COLUMN Column;

  external HDC Dc;

  external RECT CellRect;

  external RECT TextRect;

  @ULONG()
  external int Flags;
}

typedef PH_TREENEW_CUSTOM_DRAW$1 = PH_TREENEW_CUSTOM_DRAW;
typedef PPH_TREENEW_CUSTOM_DRAW = ffi.Pointer<PH_TREENEW_CUSTOM_DRAW>;

final class PH_TREENEW_MOUSE_EVENT extends ffi.Struct {
  external POINT Location;

  external PPH_TREENEW_NODE Node;

  external PPH_TREENEW_COLUMN Column;

  @ULONG()
  external int KeyFlags;
}

typedef PH_TREENEW_MOUSE_EVENT$1 = PH_TREENEW_MOUSE_EVENT;
typedef PPH_TREENEW_MOUSE_EVENT = ffi.Pointer<PH_TREENEW_MOUSE_EVENT>;

final class PH_TREENEW_KEY_EVENT extends ffi.Struct {
  @BOOLEAN()
  external int Handled;

  @ULONG()
  external int VirtualKey;

  @ULONG()
  external int Data;
}

typedef PH_TREENEW_KEY_EVENT$1 = PH_TREENEW_KEY_EVENT;
typedef PPH_TREENEW_KEY_EVENT = ffi.Pointer<PH_TREENEW_KEY_EVENT>;

enum PH_SORT_ORDER {
  NoSortOrder(0),
  AscendingSortOrder(1),
  DescendingSortOrder(2);

  final int value;
  const PH_SORT_ORDER(this.value);

  static PH_SORT_ORDER fromValue(int value) => switch (value) {
        0 => NoSortOrder,
        1 => AscendingSortOrder,
        2 => DescendingSortOrder,
        _ => throw ArgumentError('Unknown value for PH_SORT_ORDER: $value'),
      };
}

final class PH_TREENEW_SORT_CHANGED_EVENT extends ffi.Struct {
  @ULONG()
  external int SortColumn;

  @ffi.UnsignedInt()
  external int SortOrderAsInt;

  PH_SORT_ORDER get SortOrder => PH_SORT_ORDER.fromValue(SortOrderAsInt);
}

typedef PH_TREENEW_SORT_CHANGED_EVENT$1 = PH_TREENEW_SORT_CHANGED_EVENT;
typedef PPH_TREENEW_SORT_CHANGED_EVENT
    = ffi.Pointer<PH_TREENEW_SORT_CHANGED_EVENT>;

final class PH_TREENEW_NODE_EVENT extends ffi.Struct {
  @BOOLEAN()
  external int Handled;

  @ULONG()
  external int Flags;

  external PVOID Reserved1;

  external PVOID Reserved2;
}

typedef PH_TREENEW_NODE_EVENT$1 = PH_TREENEW_NODE_EVENT;
typedef PPH_TREENEW_NODE_EVENT = ffi.Pointer<PH_TREENEW_NODE_EVENT>;

final class PH_TREENEW_CONTEXT_MENU extends ffi.Struct {
  external POINT Location;

  external POINT ClientLocation;

  external PPH_TREENEW_NODE Node;

  external PPH_TREENEW_COLUMN Column;

  @BOOLEAN()
  external int KeyboardInvoked;
}

typedef PH_TREENEW_CONTEXT_MENU$1 = PH_TREENEW_CONTEXT_MENU;
typedef PPH_TREENEW_CONTEXT_MENU = ffi.Pointer<PH_TREENEW_CONTEXT_MENU>;

final class PH_TREENEW_HEADER_MOUSE_EVENT extends ffi.Struct {
  external POINT ScreenLocation;

  external POINT Location;

  external POINT HeaderLocation;

  external PPH_TREENEW_COLUMN Column;
}

typedef PH_TREENEW_HEADER_MOUSE_EVENT$1 = PH_TREENEW_HEADER_MOUSE_EVENT;
typedef PPH_TREENEW_HEADER_MOUSE_EVENT
    = ffi.Pointer<PH_TREENEW_HEADER_MOUSE_EVENT>;

final class PH_TREENEW_SEARCH_EVENT extends ffi.Struct {
  @LONG()
  external int FoundIndex;

  @LONG()
  external int StartIndex;

  external PH_STRINGREF$1 String;
}

typedef PH_TREENEW_SEARCH_EVENT$1 = PH_TREENEW_SEARCH_EVENT;
typedef PPH_TREENEW_SEARCH_EVENT = ffi.Pointer<PH_TREENEW_SEARCH_EVENT>;

final class PH_TREENEW_GET_HEADER_TEXT extends ffi.Struct {
  external PPH_TREENEW_COLUMN Column;

  external PH_STRINGREF$1 Text;

  external PWSTR TextCache;

  @ULONG()
  external int TextCacheSize;
}

typedef PH_TREENEW_GET_HEADER_TEXT$1 = PH_TREENEW_GET_HEADER_TEXT;
typedef PPH_TREENEW_GET_HEADER_TEXT = ffi.Pointer<PH_TREENEW_GET_HEADER_TEXT>;

final class PH_TREENEW_SET_HEADER_CACHE extends ffi.Struct {
  @ULONG()
  external int HeaderTreeColumnMax;

  external PVOID HeaderTreeColumnStringCache;

  external PVOID HeaderTreeColumnTextCache;
}

typedef PH_TREENEW_SET_HEADER_CACHE$1 = PH_TREENEW_SET_HEADER_CACHE;
typedef PPH_TREENEW_SET_HEADER_CACHE = ffi.Pointer<PH_TREENEW_SET_HEADER_CACHE>;

final class PH_TREENEW_VIEW_PARTS extends ffi.Struct {
  external RECT ClientRect;

  @LONG()
  external int HeaderHeight;

  @LONG()
  external int RowHeight;

  @ULONG()
  external int VScrollWidth;

  @ULONG()
  external int HScrollHeight;

  @LONG()
  external int VScrollPosition;

  @LONG()
  external int HScrollPosition;

  @LONG()
  external int FixedWidth;

  @LONG()
  external int NormalLeft;

  @LONG()
  external int NormalWidth;

  @ULONG64()
  external int ScrollTickCount;
}

typedef PH_TREENEW_VIEW_PARTS$1 = PH_TREENEW_VIEW_PARTS;
typedef PPH_TREENEW_VIEW_PARTS = ffi.Pointer<PH_TREENEW_VIEW_PARTS>;
typedef PFLOAT = ffi.Pointer<FLOAT>;

final class UnnamedStruct3 extends ffi.Struct {
  @SIZE_T()
  external int Length;

  external PWCH Buffer;
}

final class UnnamedUnion4 extends ffi.Union {
  external PH_STRINGREF$1 sr;

  external UnnamedStruct3 unnamed;
}

final class UnnamedStruct4 extends ffi.Struct {
  @ULONG()
  external int AllocationFlags;

  external PVOID Allocation;
}

final class UnnamedUnion5 extends ffi.Union {
  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> Data;

  external UnnamedStruct4 unnamed;
}

final class PH_STRING extends ffi.Struct {
  external UnnamedUnion4 unnamed;

  external UnnamedUnion5 unnamed$1;
}

typedef PPH_STRING = ffi.Pointer<PH_STRING>;
typedef PPH_GRAPH_DRAW_INFO = ffi.Pointer<PH_GRAPH_DRAW_INFO>;
typedef PPH_GRAPH_LABEL_Y_FUNCTIONFunction = PPH_STRING Function(
    PPH_GRAPH_DRAW_INFO DrawInfo,
    ULONG DataIndex,
    FLOAT Value,
    FLOAT Parameter);
typedef DartPPH_GRAPH_LABEL_Y_FUNCTIONFunction = PPH_STRING Function(
    PPH_GRAPH_DRAW_INFO DrawInfo,
    DartDWORD DataIndex,
    DartFLOAT Value,
    DartFLOAT Parameter);
typedef PPH_GRAPH_LABEL_Y_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<PPH_GRAPH_LABEL_Y_FUNCTIONFunction>>;

final class PH_GRAPH_DRAW_INFO extends ffi.Struct {
  /// Basic
  @LONG()
  external int Width;

  @LONG()
  external int Height;

  @ULONG()
  external int Flags;

  @ULONG()
  external int Step;

  @COLORREF()
  external int BackColor;

  /// Data/lines
  @ULONG()
  external int LineDataCount;

  external PFLOAT LineData1;

  external PFLOAT LineData2;

  @COLORREF()
  external int LineColor1;

  @COLORREF()
  external int LineColor2;

  @COLORREF()
  external int LineBackColor1;

  @COLORREF()
  external int LineBackColor2;

  /// Grid
  @COLORREF()
  external int GridColor;

  @ULONG()
  external int GridWidth;

  @FLOAT()
  external double GridHeight;

  @LONG()
  external int GridXOffset;

  @LONG()
  external int GridYThreshold;

  /// Base for logarithmic grid
  @FLOAT()
  external double GridBase;

  /// y-axis label
  external PPH_GRAPH_LABEL_Y_FUNCTION LabelYFunction;

  @FLOAT()
  external double LabelYFunctionParameter;

  external HFONT LabelYFont;

  @COLORREF()
  external int LabelYColor;

  @ULONG()
  external int LabelMaxYIndexLimit;

  /// Text
  external PH_STRINGREF$1 Text;

  external RECT TextRect;

  external RECT TextBoxRect;

  external HFONT TextFont;

  @COLORREF()
  external int TextColor;

  @COLORREF()
  external int TextBoxColor;
}

typedef PH_GRAPH_DRAW_INFO$1 = PH_GRAPH_DRAW_INFO;
typedef HCURSOR = HICON;

/// Configuration
final class PH_GRAPH_OPTIONS extends ffi.Struct {
  @COLORREF()
  external int FadeOutBackColor;

  @LONG()
  external int FadeOutWidth;

  external HCURSOR DefaultCursor;
}

/// Configuration
typedef PH_GRAPH_OPTIONS$1 = PH_GRAPH_OPTIONS;
typedef PPH_GRAPH_OPTIONS = ffi.Pointer<PH_GRAPH_OPTIONS>;
typedef PPH_GRAPH_MESSAGE_CALLBACKFunction = BOOLEAN Function(HWND WindowHandle,
    ULONG Message, PVOID Parameter1, PVOID Parameter2, PVOID Context);
typedef DartPPH_GRAPH_MESSAGE_CALLBACKFunction = Dartboolean Function(
    HWND WindowHandle,
    DartDWORD Message,
    PVOID Parameter1,
    PVOID Parameter2,
    PVOID Context);
typedef PPH_GRAPH_MESSAGE_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PPH_GRAPH_MESSAGE_CALLBACKFunction>>;

final class PH_GRAPH_CREATEPARAMS extends ffi.Struct {
  @ULONG()
  external int Size;

  @ULONG()
  external int Flags;

  external PH_GRAPH_OPTIONS$1 Options;

  external PPH_GRAPH_MESSAGE_CALLBACK Callback;

  external PVOID Context;
}

typedef PH_GRAPH_CREATEPARAMS$1 = PH_GRAPH_CREATEPARAMS;
typedef PPH_GRAPH_CREATEPARAMS = ffi.Pointer<PH_GRAPH_CREATEPARAMS>;

final class PH_GRAPH_GETDRAWINFO extends ffi.Struct {
  external NMHDR Header;

  external PPH_GRAPH_DRAW_INFO DrawInfo;
}

typedef PH_GRAPH_GETDRAWINFO$1 = PH_GRAPH_GETDRAWINFO;
typedef PPH_GRAPH_GETDRAWINFO = ffi.Pointer<PH_GRAPH_GETDRAWINFO>;

final class PH_GRAPH_GETTOOLTIPTEXT extends ffi.Struct {
  external NMHDR Header;

  @ULONG()
  external int Index;

  @ULONG()
  external int TotalCount;

  /// must be null-terminated
  external PH_STRINGREF$1 Text;
}

typedef PH_GRAPH_GETTOOLTIPTEXT$1 = PH_GRAPH_GETTOOLTIPTEXT;
typedef PPH_GRAPH_GETTOOLTIPTEXT = ffi.Pointer<PH_GRAPH_GETTOOLTIPTEXT>;

final class PH_GRAPH_MOUSEEVENT extends ffi.Struct {
  external NMHDR Header;

  @ULONG()
  external int Index;

  @ULONG()
  external int TotalCount;

  @ULONG()
  external int Message;

  @ULONG()
  external int Keys;

  external POINT Point;
}

typedef PH_GRAPH_MOUSEEVENT$1 = PH_GRAPH_MOUSEEVENT;
typedef PPH_GRAPH_MOUSEEVENT = ffi.Pointer<PH_GRAPH_MOUSEEVENT>;

final class PH_GRAPH_DRAWPANEL extends ffi.Struct {
  external NMHDR Header;

  external HDC hdc;

  external RECT Rect;
}

typedef PH_GRAPH_DRAWPANEL$1 = PH_GRAPH_DRAWPANEL;
typedef PPH_GRAPH_DRAWPANEL = ffi.Pointer<PH_GRAPH_DRAWPANEL>;

final class PH_GRAPH_BUFFERS extends ffi.Struct {
  /// invalidate by setting Valid to FALSE
  external PFLOAT Data1;

  /// invalidate by setting Valid to FALSE
  external PFLOAT Data2;

  @ULONG()
  external int AllocatedCount;

  /// indicates the data is valid
  @BOOLEAN()
  external int Valid;
}

typedef PH_GRAPH_BUFFERS$1 = PH_GRAPH_BUFFERS;
typedef PPH_GRAPH_BUFFERS = ffi.Pointer<PH_GRAPH_BUFFERS>;

final class UnnamedStruct15 extends ffi.Struct {
  /// invalidate by setting Valid to FALSE
  external PFLOAT Data1;

  /// invalidate by setting Valid to FALSE
  external PFLOAT Data2;

  @ULONG()
  external int AllocatedCount;

  /// indicates the data is valid
  @BOOLEAN()
  external int Valid;
}

/// Union for compatibility
final class UnnamedUnion19 extends ffi.Union {
  external UnnamedStruct15 unnamed;

  external PH_GRAPH_BUFFERS$1 Buffers;
}

/// The basic buffer management structure was moved out of this section because
/// the text management is not needed for most cases.
final class PH_GRAPH_STATE extends ffi.Struct {
  /// Union for compatibility
  external UnnamedUnion19 unnamed;

  external PPH_STRING Text;

  /// invalidate by setting TooltipIndex to -1
  external PPH_STRING TooltipText;

  /// indicates the tooltip text is valid for this index
  @ULONG()
  external int TooltipIndex;
}

/// The basic buffer management structure was moved out of this section because
/// the text management is not needed for most cases.
typedef PH_GRAPH_STATE$1 = PH_GRAPH_STATE;
typedef PPH_GRAPH_STATE = ffi.Pointer<PH_GRAPH_STATE>;

final class HBITMAP__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HBITMAP = ffi.Pointer<HBITMAP__>;
typedef PPH_EMENU_ITEM = ffi.Pointer<PH_EMENU_ITEM>;
typedef PPH_EMENU_ITEM_DELETE_FUNCTIONFunction = ffi.Void Function(
    PPH_EMENU_ITEM Item);
typedef DartPPH_EMENU_ITEM_DELETE_FUNCTIONFunction = void Function(
    PPH_EMENU_ITEM Item);
typedef PPH_EMENU_ITEM_DELETE_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<PPH_EMENU_ITEM_DELETE_FUNCTIONFunction>>;

final class HMENU__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HMENU = ffi.Pointer<HMENU__>;
typedef PPH_EMENU_ITEM_DELAY_FUNCTIONFunction = ffi.Void Function(
    HMENU Menu, PPH_EMENU_ITEM Item);
typedef DartPPH_EMENU_ITEM_DELAY_FUNCTIONFunction = void Function(
    HMENU Menu, PPH_EMENU_ITEM Item);
typedef PPH_EMENU_ITEM_DELAY_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<PPH_EMENU_ITEM_DELAY_FUNCTIONFunction>>;

final class PH_EMENU_ITEM extends ffi.Struct {
  @ULONG()
  external int Flags;

  @ULONG()
  external int Id;

  external PWSTR Text;

  external HBITMAP Bitmap;

  external PVOID Parameter;

  external PVOID Context;

  external PPH_EMENU_ITEM_DELETE_FUNCTION DeleteFunction;

  external PPH_EMENU_ITEM_DELAY_FUNCTION DelayFunction;

  external PPH_EMENU_ITEM Parent;

  external PPH_LIST Items;
}

typedef PH_EMENU_ITEM$1 = PH_EMENU_ITEM;
typedef PH_EMENU = PH_EMENU_ITEM;
typedef PPH_EMENU = ffi.Pointer<PH_EMENU_ITEM>;

final class PH_EMENU_DATA extends ffi.Struct {
  external PPH_LIST IdToItem;
}

typedef PH_EMENU_DATA$1 = PH_EMENU_DATA;
typedef PPH_EMENU_DATA = ffi.Pointer<PH_EMENU_DATA>;

final class PH_SYMBOL_PROVIDER extends ffi.Opaque {}

/// phlib
typedef PPH_SYMBOL_PROVIDER = ffi.Pointer<PH_SYMBOL_PROVIDER>;

final class PH_HASH_ENTRY extends ffi.Struct {
  external ffi.Pointer<PH_HASH_ENTRY> Next;

  @ULONG()
  external int Hash;
}

typedef PH_HASH_ENTRY$1 = PH_HASH_ENTRY;
typedef ULONGLONG = ffi.UnsignedLongLong;
typedef DartULONGLONG = int;

final class PH_PROCESS_RECORD extends ffi.Struct {
  external LIST_ENTRY$1 ListEntry;

  @LONG()
  external int RefCount;

  @ULONG()
  external int Flags;

  external HANDLE ProcessId;

  external HANDLE ParentProcessId;

  @ULONG()
  external int SessionId;

  @ULONGLONG()
  external int ProcessSequenceNumber;

  external LARGE_INTEGER$1 CreateTime;

  external LARGE_INTEGER$1 ExitTime;

  external PPH_STRING ProcessName;

  external PPH_STRING FileName;

  external PPH_STRING CommandLine;
}

typedef PPH_PROCESS_RECORD = ffi.Pointer<PH_PROCESS_RECORD>;

final class PH_IMAGE_VERSION_INFO extends ffi.Struct {
  external PPH_STRING CompanyName;

  external PPH_STRING FileDescription;

  external PPH_STRING FileVersion;

  external PPH_STRING ProductName;
}

typedef PH_IMAGE_VERSION_INFO$1 = PH_IMAGE_VERSION_INFO;
typedef PSID = PVOID;

enum TOKEN_ELEVATION_TYPE {
  TokenElevationTypeDefault(1),
  TokenElevationTypeFull(2),
  TokenElevationTypeLimited(3);

  final int value;
  const TOKEN_ELEVATION_TYPE(this.value);

  static TOKEN_ELEVATION_TYPE fromValue(int value) => switch (value) {
        1 => TokenElevationTypeDefault,
        2 => TokenElevationTypeFull,
        3 => TokenElevationTypeLimited,
        _ =>
          throw ArgumentError('Unknown value for TOKEN_ELEVATION_TYPE: $value'),
      };
}

final class PH_INTEGRITY_LEVEL extends ffi.Union {
  @USHORT()
  external int Bits;

  @USHORT()
  external int Level;
}

typedef PH_INTEGRITY_LEVEL$1 = PH_INTEGRITY_LEVEL;

final class UnnamedUnion20 extends ffi.Union {
  @UCHAR()
  external int Level;
}

final class PS_PROTECTION extends ffi.Struct {
  external UnnamedUnion20 unnamed;
}

typedef PS_PROTECTION$1 = PS_PROTECTION;

/// Flags
final class UnnamedUnion21 extends ffi.Union {
  @ULONG()
  external int Flags;
}

final class UnnamedStruct16 extends ffi.Struct {
  @USHORT()
  external int Set_RefCount;

  @UCHAR()
  external int Reserved;

  @UCHAR()
  external int AvailableForUse;

  @ULONG()
  external int Spare;
}

final class UnnamedUnion22 extends ffi.Union {
  @ULONG_PTR()
  external int Value;

  external UnnamedStruct16 unnamed;
}

final class PH_EVENT extends ffi.Struct {
  external UnnamedUnion22 unnamed;

  external HANDLE EventHandle;
}

typedef PH_EVENT$1 = PH_EVENT;

final class PH_POINTER_LIST extends ffi.Struct {
  @ULONG()
  external int Count;

  @ULONG()
  external int AllocatedCount;

  @ULONG()
  external int FreeEntry;

  @ULONG()
  external int NextEntry;

  external ffi.Pointer<PVOID> Items;
}

typedef PPH_POINTER_LIST = ffi.Pointer<PH_POINTER_LIST>;
typedef KPRIORITY = LONG;

final class VM_COUNTERS_EX extends ffi.Struct {
  @SIZE_T()
  external int PeakVirtualSize;

  @SIZE_T()
  external int VirtualSize;

  @ULONG()
  external int PageFaultCount;

  @SIZE_T()
  external int PeakWorkingSetSize;

  @SIZE_T()
  external int WorkingSetSize;

  @SIZE_T()
  external int QuotaPeakPagedPoolUsage;

  @SIZE_T()
  external int QuotaPagedPoolUsage;

  @SIZE_T()
  external int QuotaPeakNonPagedPoolUsage;

  @SIZE_T()
  external int QuotaNonPagedPoolUsage;

  @SIZE_T()
  external int PagefileUsage;

  @SIZE_T()
  external int PeakPagefileUsage;

  @SIZE_T()
  external int PrivateUsage;
}

typedef VM_COUNTERS_EX$1 = VM_COUNTERS_EX;

final class IO_COUNTERS extends ffi.Struct {
  @ULONGLONG()
  external int ReadOperationCount;

  @ULONGLONG()
  external int WriteOperationCount;

  @ULONGLONG()
  external int OtherOperationCount;

  @ULONGLONG()
  external int ReadTransferCount;

  @ULONGLONG()
  external int WriteTransferCount;

  @ULONGLONG()
  external int OtherTransferCount;
}

typedef IO_COUNTERS$1 = IO_COUNTERS;

final class PROCESS_DISK_COUNTERS extends ffi.Struct {
  @ULONGLONG()
  external int BytesRead;

  @ULONGLONG()
  external int BytesWritten;

  @ULONGLONG()
  external int ReadOperationCount;

  @ULONGLONG()
  external int WriteOperationCount;

  @ULONGLONG()
  external int FlushOperationCount;
}

typedef PROCESS_DISK_COUNTERS$1 = PROCESS_DISK_COUNTERS;
typedef DWORD64 = ffi.UnsignedLongLong;
typedef DartDWORD64 = int;

final class PROCESS_NETWORK_COUNTERS extends ffi.Struct {
  @DWORD64()
  external int BytesIn;

  @DWORD64()
  external int BytesOut;
}

typedef PROCESS_NETWORK_COUNTERS$1 = PROCESS_NETWORK_COUNTERS;

enum PH_KNOWN_PROCESS_TYPE {
  UnknownProcessType(0),

  /// ntoskrnl/ntkrnlpa/...
  SystemProcessType(1),

  /// smss
  SessionManagerProcessType(2),

  /// csrss
  WindowsSubsystemProcessType(3),

  /// wininit
  WindowsStartupProcessType(4),

  /// services
  ServiceControlManagerProcessType(5),

  /// lsass
  LocalSecurityAuthorityProcessType(6),

  /// lsm
  LocalSessionManagerProcessType(7),

  /// winlogon
  WindowsLogonProcessType(8),

  /// svchost
  ServiceHostProcessType(9),

  /// rundll32
  RunDllAsAppProcessType(10),

  /// dllhost
  ComSurrogateProcessType(11),

  /// taskeng, taskhost, taskhostex
  TaskHostProcessType(12),

  /// explorer
  ExplorerProcessType(13),

  /// wudfhost
  UmdfHostProcessType(14),

  /// ntvdm
  NtVdmHostProcessType(15),

  /// EdgeProcessType, // Microsoft Edge
  WmiProviderHostType(16),
  MaximumProcessType(17),
  KnownProcessTypeMask(65535),
  KnownProcessWow64(131072);

  final int value;
  const PH_KNOWN_PROCESS_TYPE(this.value);

  static PH_KNOWN_PROCESS_TYPE fromValue(int value) => switch (value) {
        0 => UnknownProcessType,
        1 => SystemProcessType,
        2 => SessionManagerProcessType,
        3 => WindowsSubsystemProcessType,
        4 => WindowsStartupProcessType,
        5 => ServiceControlManagerProcessType,
        6 => LocalSecurityAuthorityProcessType,
        7 => LocalSessionManagerProcessType,
        8 => WindowsLogonProcessType,
        9 => ServiceHostProcessType,
        10 => RunDllAsAppProcessType,
        11 => ComSurrogateProcessType,
        12 => TaskHostProcessType,
        13 => ExplorerProcessType,
        14 => UmdfHostProcessType,
        15 => NtVdmHostProcessType,
        16 => WmiProviderHostType,
        17 => MaximumProcessType,
        65535 => KnownProcessTypeMask,
        131072 => KnownProcessWow64,
        _ => throw ArgumentError(
            'Unknown value for PH_KNOWN_PROCESS_TYPE: $value'),
      };
}

final class PH_IMAGELIST_ITEM extends ffi.Struct {
  external PPH_STRING FileName;

  @ULONG()
  external int LargeIconIndex;

  @ULONG()
  external int SmallIconIndex;
}

typedef PPH_IMAGELIST_ITEM = ffi.Pointer<PH_IMAGELIST_ITEM>;

final class PH_PROCESS_ITEM extends ffi.Struct {
  external PH_HASH_ENTRY$1 HashEntry;

  @ULONG()
  external int State;

  external PPH_PROCESS_RECORD Record;

  /// Basic
  external HANDLE ProcessId;

  external HANDLE ParentProcessId;

  external PPH_STRING ProcessName;

  @ULONG()
  external int SessionId;

  external LARGE_INTEGER$1 CreateTime;

  /// Handles
  external HANDLE QueryHandle;

  /// Parameters
  external PPH_STRING FileName;

  external PPH_STRING CommandLine;

  /// File
  @ULONG_PTR()
  external int SmallIconIndex;

  @ULONG_PTR()
  external int LargeIconIndex;

  external PH_IMAGE_VERSION_INFO$1 VersionInfo;

  /// Security
  external PSID Sid;

  @ffi.UnsignedInt()
  external int ElevationTypeAsInt;

  TOKEN_ELEVATION_TYPE get ElevationType =>
      TOKEN_ELEVATION_TYPE.fromValue(ElevationTypeAsInt);

  external PH_INTEGRITY_LEVEL$1 IntegrityLevel;

  external PPH_STRINGREF IntegrityString;

  external PS_PROTECTION$1 Protection;

  external PPH_STRING ProtectionString;

  /// Other
  external HANDLE ConsoleHostProcessId;

  @ULONGLONG()
  external int ProcessStartKey;

  @ULONGLONG()
  external int CreateInterruptTime;

  @ULONGLONG()
  external int SessionCreateTime;

  @ULONG()
  external int ImageChecksum;

  @ULONG()
  external int ImageTimeStamp;

  /// Signature, Packed
  @ULONG()
  external int VerifyResult;

  external PPH_STRING VerifySignerName;

  @ULONG()
  external int ImportFunctions;

  @ULONG()
  external int ImportModules;

  /// Flags
  external UnnamedUnion21 unnamed;

  /// Misc.
  @LONG()
  external int JustProcessed;

  external PH_EVENT$1 Stage1Event;

  external PPH_POINTER_LIST ServiceList;

  external PH_QUEUED_LOCK$1 ServiceListLock;

  @ffi.Array.multi([13])
  external ffi.Array<WCHAR> ProcessIdString;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> ProcessIdHexString;

  /// Dynamic
  @KPRIORITY()
  external int BasePriority;

  /// PhSystemProcessorInformation.NumberOfProcessorGroups
  external PKAFFINITY AffinityMasks;

  @ULONG()
  external int AffinityPopulationCount;

  @ULONG()
  external int PriorityClass;

  external LARGE_INTEGER$1 KernelTime;

  external LARGE_INTEGER$1 UserTime;

  @ULONG()
  external int NumberOfHandles;

  @ULONG()
  external int NumberOfThreads;

  /// Below Windows 7, sum of kernel and user CPU usage; above Windows 7, cycle-based CPU usage.
  @FLOAT()
  external double CpuUsage;

  @FLOAT()
  external double CpuKernelUsage;

  @FLOAT()
  external double CpuUserUsage;

  @FLOAT()
  external double CpuAverageUsage;

  external PH_UINT64_DELTA$1 CpuKernelDelta;

  external PH_UINT64_DELTA$1 CpuUserDelta;

  external PH_UINT64_DELTA$1 IoReadDelta;

  external PH_UINT64_DELTA$1 IoWriteDelta;

  external PH_UINT64_DELTA$1 IoOtherDelta;

  external PH_UINT64_DELTA$1 IoReadCountDelta;

  external PH_UINT64_DELTA$1 IoWriteCountDelta;

  external PH_UINT64_DELTA$1 IoOtherCountDelta;

  external PH_UINT64_DELTA$1 ContextSwitchesDelta;

  external PH_UINT32_DELTA$1 PageFaultsDelta;

  external PH_UINT32_DELTA$1 HardFaultsDelta;

  /// since WIN7
  external PH_UINT64_DELTA$1 CycleTimeDelta;

  external VM_COUNTERS_EX$1 VmCounters;

  external IO_COUNTERS$1 IoCounters;

  /// since VISTA
  @ULONGLONG()
  external int WorkingSetPrivateSize;

  /// since WIN7
  @ULONG()
  external int PeakNumberOfThreads;

  /// since WIN7
  @ULONG()
  external int HardFaultCount;

  @ULONG()
  external int TimeSequenceNumber;

  external PH_CIRCULAR_BUFFER_FLOAT$1 CpuKernelHistory;

  external PH_CIRCULAR_BUFFER_FLOAT$1 CpuUserHistory;

  external PH_CIRCULAR_BUFFER_ULONG64$1 IoReadHistory;

  external PH_CIRCULAR_BUFFER_ULONG64$1 IoWriteHistory;

  external PH_CIRCULAR_BUFFER_ULONG64$1 IoOtherHistory;

  external PH_CIRCULAR_BUFFER_SIZE_T$1 PrivateBytesHistory;

  /// New fields
  external PH_UINTPTR_DELTA$1 PrivateBytesDelta;

  external PPH_STRING PackageFullName;

  external PPH_STRING UserName;

  external PROCESS_DISK_COUNTERS$1 DiskCounters;

  external PROCESS_NETWORK_COUNTERS$1 NetworkCounters;

  @ULONGLONG()
  external int ContextSwitches;

  @ULONGLONG()
  external int ProcessSequenceNumber;

  @ffi.UnsignedInt()
  external int KnownProcessTypeAsInt;

  PH_KNOWN_PROCESS_TYPE get KnownProcessType =>
      PH_KNOWN_PROCESS_TYPE.fromValue(KnownProcessTypeAsInt);

  @ULONG()
  external int JobObjectId;

  @SIZE_T()
  external int SharedCommitCharge;

  external PPH_IMAGELIST_ITEM IconEntry;

  @NTSTATUS()
  external int ImageCoherencyStatus;

  @FLOAT()
  external double ImageCoherency;

  @ULONG()
  external int LxssProcessId;

  external HANDLE FreezeHandle;
}

/// Providers
typedef PPH_PROCESS_ITEM = ffi.Pointer<PH_PROCESS_ITEM>;

final class PH_SERVICE_ITEM extends ffi.Struct {
  /// points to Name
  external PH_STRINGREF$1 Key;

  external PPH_STRING Name;

  external PPH_STRING DisplayName;

  external PPH_STRING FileName;

  external PPH_IMAGELIST_ITEM IconEntry;

  @LONG()
  external int JustProcessed;

  /// State
  @ULONG()
  external int Type;

  @ULONG()
  external int State;

  @ULONG()
  external int ControlsAccepted;

  /// e.g. SERVICE_RUNS_IN_SYSTEM_PROCESS
  @ULONG()
  external int Flags;

  external HANDLE ProcessId;

  /// Config
  @ULONG()
  external int StartType;

  @ULONG()
  external int ErrorControl;

  /// ExitCode
  @ULONG()
  external int Win32ExitCode;

  @ULONG()
  external int ServiceSpecificExitCode;

  /// Signature
  external data_type.VERIFY_RESULT VerifyResult;

  external PPH_STRING VerifySignerName;

  @ffi.Array.multi([13])
  external ffi.Array<WCHAR> ProcessIdString;
}

typedef PPH_SERVICE_ITEM = ffi.Pointer<PH_SERVICE_ITEM>;

enum MIB_TCP_STATE {
  MIB_TCP_STATE_CLOSED(1),
  MIB_TCP_STATE_LISTEN(2),
  MIB_TCP_STATE_SYN_SENT(3),
  MIB_TCP_STATE_SYN_RCVD(4),
  MIB_TCP_STATE_ESTAB(5),
  MIB_TCP_STATE_FIN_WAIT1(6),
  MIB_TCP_STATE_FIN_WAIT2(7),
  MIB_TCP_STATE_CLOSE_WAIT(8),
  MIB_TCP_STATE_CLOSING(9),
  MIB_TCP_STATE_LAST_ACK(10),
  MIB_TCP_STATE_TIME_WAIT(11),
  MIB_TCP_STATE_DELETE_TCB(12),
  MIB_TCP_STATE_RESERVED(100);

  final int value;
  const MIB_TCP_STATE(this.value);

  static MIB_TCP_STATE fromValue(int value) => switch (value) {
        1 => MIB_TCP_STATE_CLOSED,
        2 => MIB_TCP_STATE_LISTEN,
        3 => MIB_TCP_STATE_SYN_SENT,
        4 => MIB_TCP_STATE_SYN_RCVD,
        5 => MIB_TCP_STATE_ESTAB,
        6 => MIB_TCP_STATE_FIN_WAIT1,
        7 => MIB_TCP_STATE_FIN_WAIT2,
        8 => MIB_TCP_STATE_CLOSE_WAIT,
        9 => MIB_TCP_STATE_CLOSING,
        10 => MIB_TCP_STATE_LAST_ACK,
        11 => MIB_TCP_STATE_TIME_WAIT,
        12 => MIB_TCP_STATE_DELETE_TCB,
        100 => MIB_TCP_STATE_RESERVED,
        _ => throw ArgumentError('Unknown value for MIB_TCP_STATE: $value'),
      };
}

final class UnnamedUnion23 extends ffi.Union {
  @ULONG()
  external int Flags;
}

final class PH_NETWORK_ITEM extends ffi.Struct {
  @ULONG()
  external int ProtocolType;

  external PH_IP_ENDPOINT$1 LocalEndpoint;

  external PH_IP_ENDPOINT$1 RemoteEndpoint;

  @ffi.UnsignedInt()
  external int StateAsInt;

  MIB_TCP_STATE get State => MIB_TCP_STATE.fromValue(StateAsInt);

  external HANDLE ProcessId;

  external PPH_STRING ProcessName;

  @ULONG_PTR()
  external int ProcessIconIndex;

  @BOOLEAN()
  external int ProcessIconValid;

  external PPH_STRING OwnerName;

  @LONG()
  external int JustResolved;

  external PPH_STRING LocalAddressString;

  @ffi.Array.multi([13])
  external ffi.Array<WCHAR> LocalPortString;

  external PPH_STRING RemoteAddressString;

  @ffi.Array.multi([13])
  external ffi.Array<WCHAR> RemotePortString;

  external PPH_STRING LocalHostString;

  external PPH_STRING RemoteHostString;

  external PPH_STRING HvService;

  external LARGE_INTEGER$1 CreateTime;

  @ULONG()
  external int LocalScopeId;

  @ULONG()
  external int RemoteScopeId;

  external UnnamedUnion23 unnamed;

  external PPH_PROCESS_ITEM ProcessItem;
}

typedef PPH_NETWORK_ITEM = ffi.Pointer<PH_NETWORK_ITEM>;

final class UnnamedUnion24 extends ffi.Union {
  @BOOLEAN()
  external int StateFlags;
}

typedef VERIFYRESULT = data_type.VERIFYRESULT;

/// modprv
final class PH_MODULE_ITEM extends ffi.Struct {
  external PVOID BaseAddress;

  external PVOID ParentBaseAddress;

  external PVOID EntryPoint;

  @ULONG()
  external int Size;

  @ULONG()
  external int Flags;

  @ULONG()
  external int Type;

  @USHORT()
  external int LoadReason;

  @USHORT()
  external int LoadCount;

  external PPH_STRING Name;

  external PPH_STRING FileName;

  external PH_IMAGE_VERSION_INFO$1 VersionInfo;

  @ULONG()
  external int EnclaveType;

  external PVOID EnclaveBaseAddress;

  @SIZE_T()
  external int EnclaveSize;

  external UnnamedUnion24 unnamed;

  @ffi.UnsignedInt()
  external int VerifyResultAsInt;

  VERIFYRESULT get VerifyResult => VERIFYRESULT.fromValue(VerifyResultAsInt);

  external PPH_STRING VerifySignerName;

  @USHORT()
  external int ImageMachine;

  @ULONG()
  external int ImageCHPEVersion;

  @ULONG()
  external int ImageTimeDateStamp;

  @USHORT()
  external int ImageCharacteristics;

  @USHORT()
  external int ImageDllCharacteristics;

  @ULONG()
  external int ImageDllCharacteristicsEx;

  @ULONG()
  external int GuardFlags;

  external LARGE_INTEGER$1 LoadTime;

  external LARGE_INTEGER$1 FileLastWriteTime;

  external LARGE_INTEGER$1 FileEndOfFile;

  @NTSTATUS()
  external int ImageCoherencyStatus;

  @FLOAT()
  external double ImageCoherency;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> BaseAddressString;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> ParentBaseAddressString;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> EntryPointAddressString;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> EnclaveBaseAddressString;
}

/// modprv
typedef PPH_MODULE_ITEM = ffi.Pointer<PH_MODULE_ITEM>;
typedef PH_HASHTABLE_EQUAL_FUNCTION
    = ffi.NativeFunction<BOOLEAN Function(PVOID Entry1, PVOID Entry2)>;
typedef PPH_HASHTABLE_EQUAL_FUNCTION = ffi.Pointer<PH_HASHTABLE_EQUAL_FUNCTION>;
typedef PH_HASHTABLE_HASH_FUNCTION
    = ffi.NativeFunction<ULONG Function(PVOID Entry)>;
typedef PPH_HASHTABLE_HASH_FUNCTION = ffi.Pointer<PH_HASHTABLE_HASH_FUNCTION>;
typedef PULONG = ffi.Pointer<ULONG>;

final class PH_HASHTABLE extends ffi.Struct {
  @ULONG()
  external int EntrySize;

  external PPH_HASHTABLE_EQUAL_FUNCTION EqualFunction;

  external PPH_HASHTABLE_HASH_FUNCTION HashFunction;

  @ULONG()
  external int AllocatedBuckets;

  external PULONG Buckets;

  @ULONG()
  external int AllocatedEntries;

  external PVOID Entries;

  @ULONG()
  external int Count;

  @ULONG()
  external int FreeEntry;

  @ULONG()
  external int NextEntry;
}

typedef PPH_HASHTABLE = ffi.Pointer<PH_HASHTABLE>;
typedef PH_CONDITION = PH_QUEUED_LOCK;

final class PH_CALLBACK extends ffi.Struct {
  external LIST_ENTRY$1 ListHead;

  external PH_QUEUED_LOCK$1 ListLock;

  external PH_CONDITION BusyCondition;
}

typedef PH_CALLBACK$1 = PH_CALLBACK;

final class UnnamedStruct17 extends ffi.Struct {
  @ULONGLONG()
  external int Alignment;

  @ULONGLONG()
  external int Region;
}

final class UnnamedUnion25 extends ffi.Union {
  external UnnamedStruct17 unnamed;

  @ffi.Array.multi([2])
  external ffi.Array<ULONGLONG> HeaderX64;
}

final class UnnamedUnion26 extends ffi.Union {
  @BOOLEAN()
  external int Flags;
}

final class PH_MODULE_PROVIDER extends ffi.Struct {
  external PPH_HASHTABLE ModuleHashtable;

  external PH_FAST_LOCK$1 ModuleHashtableLock;

  external PH_CALLBACK$1 ModuleAddedEvent;

  external PH_CALLBACK$1 ModuleModifiedEvent;

  external PH_CALLBACK$1 ModuleRemovedEvent;

  external PH_CALLBACK$1 UpdatedEvent;

  external HANDLE ProcessId;

  external HANDLE ProcessHandle;

  external PPH_STRING ProcessFileName;

  external PPH_STRING PackageFullName;

  external UnnamedUnion25 NTSTATUS;

  external UnnamedUnion26 unnamed;

  @UCHAR()
  external int ImageCoherencyScanLevel;
}

typedef PPH_MODULE_PROVIDER = ffi.Pointer<PH_MODULE_PROVIDER>;

final class CLIENT_ID extends ffi.Struct {
  external HANDLE UniqueProcess;

  external HANDLE UniqueThread;
}

typedef CLIENT_ID$1 = CLIENT_ID;

final class UnnamedStruct18 extends ffi.Struct {
  external HANDLE ProcessId;

  external HANDLE ThreadId;
}

final class UnnamedUnion27 extends ffi.Union {
  external CLIENT_ID$1 ClientId;

  external UnnamedStruct18 unnamed;
}

enum KTHREAD_STATE {
  Initialized(0),
  Ready(1),
  Running(2),
  Standby(3),
  Terminated(4),
  Waiting(5),
  Transition(6),
  DeferredReady(7),
  GateWaitObsolete(8),
  WaitingForProcessInSwap(9),
  MaximumThreadState(10);

  final int value;
  const KTHREAD_STATE(this.value);

  static KTHREAD_STATE fromValue(int value) => switch (value) {
        0 => Initialized,
        1 => Ready,
        2 => Running,
        3 => Standby,
        4 => Terminated,
        5 => Waiting,
        6 => Transition,
        7 => DeferredReady,
        8 => GateWaitObsolete,
        9 => WaitingForProcessInSwap,
        10 => MaximumThreadState,
        _ => throw ArgumentError('Unknown value for KTHREAD_STATE: $value'),
      };
}

enum KWAIT_REASON {
  Executive(0),
  FreePage(1),
  PageIn(2),
  PoolAllocation(3),
  DelayExecution(4),
  Suspended(5),
  UserRequest(6),
  WrExecutive(7),
  WrFreePage(8),
  WrPageIn(9),
  WrPoolAllocation(10),
  WrDelayExecution(11),
  WrSuspended(12),
  WrUserRequest(13),
  WrEventPair(14),
  WrQueue(15),
  WrLpcReceive(16),
  WrLpcReply(17),
  WrVirtualMemory(18),
  WrPageOut(19),
  WrRendezvous(20),
  WrKeyedEvent(21),
  WrTerminated(22),
  WrProcessInSwap(23),
  WrCpuRateControl(24),
  WrCalloutStack(25),
  WrKernel(26),
  WrResource(27),
  WrPushLock(28),
  WrMutex(29),
  WrQuantumEnd(30),
  WrDispatchInt(31),
  WrPreempted(32),
  WrYieldExecution(33),
  WrFastMutex(34),
  WrGuardedMutex(35),
  WrRundown(36),
  WrAlertByThreadId(37),
  WrDeferredPreempt(38),
  WrPhysicalFault(39),
  WrIoRing(40),
  WrMdlCache(41),
  WrRcu(42),
  MaximumWaitReason(43);

  final int value;
  const KWAIT_REASON(this.value);

  static KWAIT_REASON fromValue(int value) => switch (value) {
        0 => Executive,
        1 => FreePage,
        2 => PageIn,
        3 => PoolAllocation,
        4 => DelayExecution,
        5 => Suspended,
        6 => UserRequest,
        7 => WrExecutive,
        8 => WrFreePage,
        9 => WrPageIn,
        10 => WrPoolAllocation,
        11 => WrDelayExecution,
        12 => WrSuspended,
        13 => WrUserRequest,
        14 => WrEventPair,
        15 => WrQueue,
        16 => WrLpcReceive,
        17 => WrLpcReply,
        18 => WrVirtualMemory,
        19 => WrPageOut,
        20 => WrRendezvous,
        21 => WrKeyedEvent,
        22 => WrTerminated,
        23 => WrProcessInSwap,
        24 => WrCpuRateControl,
        25 => WrCalloutStack,
        26 => WrKernel,
        27 => WrResource,
        28 => WrPushLock,
        29 => WrMutex,
        30 => WrQuantumEnd,
        31 => WrDispatchInt,
        32 => WrPreempted,
        33 => WrYieldExecution,
        34 => WrFastMutex,
        35 => WrGuardedMutex,
        36 => WrRundown,
        37 => WrAlertByThreadId,
        38 => WrDeferredPreempt,
        39 => WrPhysicalFault,
        40 => WrIoRing,
        41 => WrMdlCache,
        42 => WrRcu,
        43 => MaximumWaitReason,
        _ => throw ArgumentError('Unknown value for KWAIT_REASON: $value'),
      };
}

typedef PH_SYMBOL_RESOLVE_LEVEL = data_type.PH_SYMBOL_RESOLVE_LEVEL;

/// thrdprv
final class PH_THREAD_ITEM extends ffi.Struct {
  external UnnamedUnion27 unnamed;

  external LARGE_INTEGER$1 CreateTime;

  external LARGE_INTEGER$1 KernelTime;

  external LARGE_INTEGER$1 UserTime;

  external PH_UINT64_DELTA$1 CpuKernelDelta;

  external PH_UINT64_DELTA$1 CpuUserDelta;

  external PH_UINT32_DELTA$1 ContextSwitchesDelta;

  external PH_UINT64_DELTA$1 CyclesDelta;

  @FLOAT()
  external double CpuUsage;

  @FLOAT()
  external double CpuKernelUsage;

  @FLOAT()
  external double CpuUserUsage;

  @KPRIORITY()
  external int Priority;

  @KPRIORITY()
  external int BasePriority;

  /// PhSystemProcessorInformation.NumberOfProcessorGroups
  external PKAFFINITY AffinityMasks;

  @ULONG()
  external int AffinityPopulationCount;

  @ULONG()
  external int WaitTime;

  @ffi.UnsignedInt()
  external int StateAsInt;

  KTHREAD_STATE get State => KTHREAD_STATE.fromValue(StateAsInt);

  @ffi.UnsignedInt()
  external int WaitReasonAsInt;

  KWAIT_REASON get WaitReason => KWAIT_REASON.fromValue(WaitReasonAsInt);

  @KPRIORITY()
  external int BasePriorityIncrement;

  external HANDLE ThreadHandle;

  external PPH_STRING ServiceName;

  external PVOID StartAddressWin32;

  external PVOID StartAddress;

  @NTSTATUS()
  external int ThreadHandleStatus;

  @NTSTATUS()
  external int StartAddressStatus;

  external PPH_STRING StartAddressWin32String;

  external PPH_STRING StartAddressWin32FileName;

  @ffi.UnsignedInt()
  external int StartAddressWin32ResolveLevelAsInt;

  PH_SYMBOL_RESOLVE_LEVEL get StartAddressWin32ResolveLevel =>
      PH_SYMBOL_RESOLVE_LEVEL.fromValue(StartAddressWin32ResolveLevelAsInt);

  external PPH_STRING StartAddressString;

  external PPH_STRING StartAddressFileName;

  @ffi.UnsignedInt()
  external int StartAddressResolveLevelAsInt;

  PH_SYMBOL_RESOLVE_LEVEL get StartAddressResolveLevel =>
      PH_SYMBOL_RESOLVE_LEVEL.fromValue(StartAddressResolveLevelAsInt);

  @BOOLEAN()
  external int IsGuiThread;

  @BOOLEAN()
  external int JustResolved;

  @ffi.Array.multi([13])
  external ffi.Array<WCHAR> ThreadIdString;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> ThreadIdHexString;

  @ffi.Array.multi([13])
  external ffi.Array<WCHAR> LxssThreadIdString;

  external IO_COUNTERS$1 IoCounters;

  @ULONG()
  external int LxssThreadId;

  @BOOLEAN()
  external int PowerThrottling;
}

/// thrdprv
typedef PPH_THREAD_ITEM = ffi.Pointer<PH_THREAD_ITEM>;

final class UnnamedUnion28 extends ffi.Union {
  @BOOLEAN()
  external int Flags;
}

final class UnnamedStruct19 extends ffi.Struct {
  @ULONGLONG()
  external int Alignment;

  @ULONGLONG()
  external int Region;
}

final class UnnamedUnion29 extends ffi.Union {
  external UnnamedStruct19 unnamed;

  @ffi.Array.multi([2])
  external ffi.Array<ULONGLONG> HeaderX64;
}

final class PH_THREAD_PROVIDER extends ffi.Struct {
  external PPH_HASHTABLE ThreadHashtable;

  external PH_FAST_LOCK$1 ThreadHashtableLock;

  external PH_CALLBACK$1 ThreadAddedEvent;

  external PH_CALLBACK$1 ThreadModifiedEvent;

  external PH_CALLBACK$1 ThreadRemovedEvent;

  external PH_CALLBACK$1 UpdatedEvent;

  external PH_CALLBACK$1 LoadingStateChangedEvent;

  external HANDLE ProcessId;

  external HANDLE ProcessHandle;

  external UnnamedUnion28 unnamed;

  external ffi.Pointer<PH_SYMBOL_PROVIDER> SymbolProvider;

  external UnnamedUnion29 PH_QUEUED_LOCK;

  @LONG()
  external int SymbolsLoading;

  @ULONG64()
  external int RunId;

  @ULONG64()
  external int SymbolsLoadedRunId;
}

typedef PPH_THREAD_PROVIDER = ffi.Pointer<PH_THREAD_PROVIDER>;
typedef ACCESS_MASK = DWORD;

final class PH_HANDLE_ITEM extends ffi.Struct {
  external PH_HASH_ENTRY$1 HashEntry;

  external PVOID Object;

  external HANDLE Handle;

  external HANDLE ProcessId;

  @ULONG()
  external int Attributes;

  @ACCESS_MASK()
  external int GrantedAccess;

  @ULONG()
  external int TypeIndex;

  @ULONG()
  external int FileFlags;

  external PPH_STRING TypeName;

  external PPH_STRING ObjectName;

  external PPH_STRING BestObjectName;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> HandleString;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> GrantedAccessString;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> ObjectString;
}

typedef PPH_HANDLE_ITEM = ffi.Pointer<PH_HANDLE_ITEM>;
typedef PPH_HASH_ENTRY = ffi.Pointer<PH_HASH_ENTRY>;

final class PH_HANDLE_PROVIDER extends ffi.Struct {
  external ffi.Pointer<PPH_HASH_ENTRY> HandleHashSet;

  @ULONG()
  external int HandleHashSetSize;

  @ULONG()
  external int HandleHashSetCount;

  external PH_QUEUED_LOCK$1 HandleHashSetLock;

  external PH_CALLBACK$1 HandleAddedEvent;

  external PH_CALLBACK$1 HandleModifiedEvent;

  external PH_CALLBACK$1 HandleRemovedEvent;

  external PH_CALLBACK$1 HandleUpdatedEvent;

  external HANDLE ProcessId;

  external HANDLE ProcessHandle;

  external PPH_HASHTABLE TempListHashtable;

  @NTSTATUS()
  external int RunStatus;
}

typedef PPH_HANDLE_PROVIDER = ffi.Pointer<PH_HANDLE_PROVIDER>;

final class PH_AVL_LINKS extends ffi.Struct {
  external ffi.Pointer<PH_AVL_LINKS> Parent;

  external ffi.Pointer<PH_AVL_LINKS> Left;

  external ffi.Pointer<PH_AVL_LINKS> Right;

  @LONG()
  external int Balance;
}

typedef PH_AVL_LINKS$1 = PH_AVL_LINKS;

final class MEMORY_BASIC_INFORMATION extends ffi.Struct {
  external PVOID BaseAddress;

  external PVOID AllocationBase;

  @DWORD()
  external int AllocationProtect;

  @WORD()
  external int PartitionId;

  @SIZE_T()
  external int RegionSize;

  @DWORD()
  external int State;

  @DWORD()
  external int Protect;

  @DWORD()
  external int Type;
}

typedef MEMORY_BASIC_INFORMATION$1 = MEMORY_BASIC_INFORMATION;

final class UnnamedStruct20 extends ffi.Struct {
  external PVOID BaseAddress;

  external PVOID AllocationBase;

  @ULONG()
  external int AllocationProtect;

  @SIZE_T()
  external int RegionSize;

  @ULONG()
  external int State;

  @ULONG()
  external int Protect;

  @ULONG()
  external int Type;
}

final class UnnamedUnion30 extends ffi.Union {
  external MEMORY_BASIC_INFORMATION$1 BasicInfo;

  external UnnamedStruct20 unnamed;
}

final class UnnamedUnion31 extends ffi.Union {
  @BOOLEAN()
  external int Attributes;
}

final class UnnamedUnion32 extends ffi.Union {
  @ULONG()
  external int RegionTypeEx;
}

/// memprv
enum PH_MEMORY_REGION_TYPE {
  UnknownRegion(0),
  CustomRegion(1),
  UnusableRegion(2),
  MappedFileRegion(3),
  UserSharedDataRegion(4),
  PebRegion(5),
  Peb32Region(6),
  TebRegion(7),

  /// Not used
  Teb32Region(8),
  StackRegion(9),
  Stack32Region(10),
  HeapRegion(11),
  Heap32Region(12),
  HeapSegmentRegion(13),
  HeapSegment32Region(14),
  CfgBitmapRegion(15),
  CfgBitmap32Region(16),
  ApiSetMapRegion(17),
  HypervisorSharedDataRegion(18),
  ReadOnlySharedMemoryRegion(19),
  CodePageDataRegion(20),
  GdiSharedHandleTableRegion(21),
  ShimDataRegion(22),
  ActivationContextDataRegion(23),
  WerRegistrationDataRegion(24),
  SiloSharedDataRegion(25),
  TelemetryCoverageRegion(26);

  final int value;
  const PH_MEMORY_REGION_TYPE(this.value);

  static PH_MEMORY_REGION_TYPE fromValue(int value) => switch (value) {
        0 => UnknownRegion,
        1 => CustomRegion,
        2 => UnusableRegion,
        3 => MappedFileRegion,
        4 => UserSharedDataRegion,
        5 => PebRegion,
        6 => Peb32Region,
        7 => TebRegion,
        8 => Teb32Region,
        9 => StackRegion,
        10 => Stack32Region,
        11 => HeapRegion,
        12 => Heap32Region,
        13 => HeapSegmentRegion,
        14 => HeapSegment32Region,
        15 => CfgBitmapRegion,
        16 => CfgBitmap32Region,
        17 => ApiSetMapRegion,
        18 => HypervisorSharedDataRegion,
        19 => ReadOnlySharedMemoryRegion,
        20 => CodePageDataRegion,
        21 => GdiSharedHandleTableRegion,
        22 => ShimDataRegion,
        23 => ActivationContextDataRegion,
        24 => WerRegistrationDataRegion,
        25 => SiloSharedDataRegion,
        26 => TelemetryCoverageRegion,
        _ => throw ArgumentError(
            'Unknown value for PH_MEMORY_REGION_TYPE: $value'),
      };
}

final class UnnamedStruct21 extends ffi.Struct {
  external PPH_STRING Text;

  @BOOLEAN()
  external int PropertyOfAllocationBase;
}

typedef SE_SIGNING_LEVEL = BYTE;

final class UnnamedStruct22 extends ffi.Struct {
  external PPH_STRING FileName;

  @BOOLEAN()
  external int SigningLevelValid;

  @SE_SIGNING_LEVEL()
  external int SigningLevel;
}

final class UnnamedStruct23 extends ffi.Struct {
  external HANDLE ThreadId;
}

final class UnnamedStruct24 extends ffi.Struct {
  external HANDLE ThreadId;
}

final class UnnamedStruct25 extends ffi.Struct {
  @ULONG()
  external int Index;

  @BOOLEAN()
  external int ClassValid;

  @ULONG()
  external int Class;
}

final class UnnamedStruct26 extends ffi.Struct {
  external ffi.Pointer<PH_MEMORY_ITEM> HeapItem;
}

enum PH_ACTIVATION_CONTEXT_DATA_TYPE {
  CustomActivationContext(0),
  ProcessActivationContext(1),
  SystemActivationContext(2);

  final int value;
  const PH_ACTIVATION_CONTEXT_DATA_TYPE(this.value);

  static PH_ACTIVATION_CONTEXT_DATA_TYPE fromValue(int value) =>
      switch (value) {
        0 => CustomActivationContext,
        1 => ProcessActivationContext,
        2 => SystemActivationContext,
        _ => throw ArgumentError(
            'Unknown value for PH_ACTIVATION_CONTEXT_DATA_TYPE: $value'),
      };
}

final class UnnamedStruct27 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int TypeAsInt;

  PH_ACTIVATION_CONTEXT_DATA_TYPE get Type =>
      PH_ACTIVATION_CONTEXT_DATA_TYPE.fromValue(TypeAsInt);
}

final class UnnamedUnion33 extends ffi.Union {
  external UnnamedStruct21 Custom;

  external UnnamedStruct22 MappedFile;

  external UnnamedStruct23 Teb;

  external UnnamedStruct24 Stack;

  external UnnamedStruct25 Heap;

  external UnnamedStruct26 HeapSegment;

  external UnnamedStruct27 ActivationContextData;
}

final class PH_MEMORY_ITEM extends ffi.Struct {
  external LIST_ENTRY$1 ListEntry;

  external PH_AVL_LINKS$1 Links;

  external UnnamedUnion30 unnamed;

  external UnnamedUnion31 unnamed$1;

  external UnnamedUnion32 unnamed$2;

  @ffi.Array.multi([25])
  external ffi.Array<WCHAR> BaseAddressString;

  external ffi.Pointer<PH_MEMORY_ITEM> AllocationBaseItem;

  @SIZE_T()
  external int CommittedSize;

  @SIZE_T()
  external int PrivateSize;

  @SIZE_T()
  external int TotalWorkingSetPages;

  @SIZE_T()
  external int PrivateWorkingSetPages;

  @SIZE_T()
  external int SharedWorkingSetPages;

  @SIZE_T()
  external int ShareableWorkingSetPages;

  @SIZE_T()
  external int LockedWorkingSetPages;

  @SIZE_T()
  external int SharedOriginalPages;

  @ULONG_PTR()
  external int Priority;

  @ffi.UnsignedInt()
  external int RegionTypeAsInt;

  PH_MEMORY_REGION_TYPE get RegionType =>
      PH_MEMORY_REGION_TYPE.fromValue(RegionTypeAsInt);

  external UnnamedUnion33 u;
}

typedef PPH_MEMORY_ITEM = ffi.Pointer<PH_MEMORY_ITEM>;
typedef PPH_AVL_LINKS = ffi.Pointer<PH_AVL_LINKS>;
typedef PH_AVL_TREE_COMPARE_FUNCTION = ffi
    .NativeFunction<LONG Function(PPH_AVL_LINKS Links1, PPH_AVL_LINKS Links2)>;
typedef PPH_AVL_TREE_COMPARE_FUNCTION
    = ffi.Pointer<PH_AVL_TREE_COMPARE_FUNCTION>;

final class PH_AVL_TREE extends ffi.Struct {
  external PH_AVL_LINKS$1 Root;

  @ULONG()
  external int Count;

  external PPH_AVL_TREE_COMPARE_FUNCTION CompareFunction;
}

typedef PH_AVL_TREE$1 = PH_AVL_TREE;

final class PH_MEMORY_ITEM_LIST extends ffi.Struct {
  external HANDLE ProcessId;

  external PH_AVL_TREE$1 Set;

  external LIST_ENTRY$1 ListHead;
}

typedef PPH_MEMORY_ITEM_LIST = ffi.Pointer<PH_MEMORY_ITEM_LIST>;

/// proctree
final class PH_PROCESS_NODE extends ffi.Opaque {}

/// uimodels
typedef PPH_PROCESS_NODE = ffi.Pointer<PH_PROCESS_NODE>;

/// srvlist
final class PH_SERVICE_NODE extends ffi.Opaque {}

/// srvlist
typedef PPH_SERVICE_NODE = ffi.Pointer<PH_SERVICE_NODE>;

/// netlist
final class PH_NETWORK_NODE extends ffi.Opaque {}

/// netlist
typedef PPH_NETWORK_NODE = ffi.Pointer<PH_NETWORK_NODE>;

/// modlist
final class PH_MODULE_NODE extends ffi.Opaque {}

/// modlist
typedef PPH_MODULE_NODE = ffi.Pointer<PH_MODULE_NODE>;

/// thrdlist
final class PH_THREAD_NODE extends ffi.Opaque {}

/// thrdlist
typedef PPH_THREAD_NODE = ffi.Pointer<PH_THREAD_NODE>;

final class PH_HANDLE_NODE extends ffi.Opaque {}

typedef PPH_HANDLE_NODE = ffi.Pointer<PH_HANDLE_NODE>;

/// memlist
final class PH_MEMORY_NODE extends ffi.Opaque {}

/// memlist
typedef PPH_MEMORY_NODE = ffi.Pointer<PH_MEMORY_NODE>;

final class PH_PROCESS_PROPCONTEXT extends ffi.Opaque {}

/// procprv
typedef PPH_PROCESS_PROPCONTEXT = ffi.Pointer<PH_PROCESS_PROPCONTEXT>;

final class UnnamedStruct28 extends ffi.Struct {
  external PPH_STRING GroupName;
}

final class UnnamedStruct29 extends ffi.Struct {
  external PPH_STRING FileName;

  external PPH_STRING ProcedureName;
}

final class UnnamedStruct30 extends ffi.Struct {
  external GUID$1 Guid;

  /// optional
  external PPH_STRING Name;

  /// optional
  external PPH_STRING FileName;
}

final class PH_KNOWN_PROCESS_COMMAND_LINE extends ffi.Union {
  external UnnamedStruct28 ServiceHost;

  external UnnamedStruct29 RunDllAsApp;

  external UnnamedStruct30 ComSurrogate;
}

typedef PH_KNOWN_PROCESS_COMMAND_LINE$1 = PH_KNOWN_PROCESS_COMMAND_LINE;
typedef PPH_KNOWN_PROCESS_COMMAND_LINE
    = ffi.Pointer<PH_KNOWN_PROCESS_COMMAND_LINE>;

enum PH_RELEASE_CHANNEL {
  PhReleaseChannel(0),

  /// unused, reserved
  PhPreviewChannel(1),
  PhCanaryChannel(2),
  PhDeveloperChannel(3);

  final int value;
  const PH_RELEASE_CHANNEL(this.value);

  static PH_RELEASE_CHANNEL fromValue(int value) => switch (value) {
        0 => PhReleaseChannel,
        1 => PhPreviewChannel,
        2 => PhCanaryChannel,
        3 => PhDeveloperChannel,
        _ =>
          throw ArgumentError('Unknown value for PH_RELEASE_CHANNEL: $value'),
      };
}

typedef PPH_RELEASE_CHANNEL = ffi.Pointer<ffi.UnsignedInt>;

final class PH_TN_COLUMN_MENU_DATA extends ffi.Struct {
  external HWND TreeNewHandle;

  external PPH_TREENEW_HEADER_MOUSE_EVENT MouseEvent;

  @ULONG()
  external int DefaultSortColumn;

  @ffi.UnsignedInt()
  external int DefaultSortOrderAsInt;

  PH_SORT_ORDER get DefaultSortOrder =>
      PH_SORT_ORDER.fromValue(DefaultSortOrderAsInt);

  external PPH_EMENU_ITEM Menu;

  external PPH_EMENU_ITEM Selection;

  @ULONG()
  external int ProcessedId;
}

typedef PH_TN_COLUMN_MENU_DATA$1 = PH_TN_COLUMN_MENU_DATA;
typedef PPH_TN_COLUMN_MENU_DATA = ffi.Pointer<PH_TN_COLUMN_MENU_DATA>;

final class PH_TN_FILTER_SUPPORT extends ffi.Struct {
  external PPH_LIST FilterList;

  external HWND TreeNewHandle;

  external PPH_LIST NodeList;
}

typedef PH_TN_FILTER_SUPPORT$1 = PH_TN_FILTER_SUPPORT;
typedef PPH_TN_FILTER_SUPPORT = ffi.Pointer<PH_TN_FILTER_SUPPORT>;
typedef PPH_TN_FILTER_FUNCTIONFunction = BOOLEAN Function(
    PPH_TREENEW_NODE Node, PVOID Context);
typedef DartPPH_TN_FILTER_FUNCTIONFunction = Dartboolean Function(
    PPH_TREENEW_NODE Node, PVOID Context);
typedef PPH_TN_FILTER_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<PPH_TN_FILTER_FUNCTIONFunction>>;

final class PH_TN_FILTER_ENTRY extends ffi.Struct {
  external PPH_TN_FILTER_FUNCTION Filter;

  external PVOID Context;
}

typedef PH_TN_FILTER_ENTRY$1 = PH_TN_FILTER_ENTRY;
typedef PPH_TN_FILTER_ENTRY = ffi.Pointer<PH_TN_FILTER_ENTRY>;

final class PH_COPY_CELL_CONTEXT extends ffi.Struct {
  external HWND TreeNewHandle;

  /// column ID
  @ULONG()
  external int Id;

  external PPH_STRING MenuItemText;
}

typedef PH_COPY_CELL_CONTEXT$1 = PH_COPY_CELL_CONTEXT;
typedef PPH_COPY_CELL_CONTEXT = ffi.Pointer<PH_COPY_CELL_CONTEXT>;
typedef HRESULT = ffi.Long;
typedef DartHRESULT = int;
typedef IID = GUID$1;

final class IOleWindowVtbl extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IOleWindow> This, ffi.Pointer<IID> riid,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppvObject)>> QueryInterface;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<IOleWindow> This)>>
      AddRef;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<IOleWindow> This)>>
      Release;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IOleWindow> This, ffi.Pointer<HWND> phwnd)>>
      GetWindow;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IOleWindow> This, BOOL fEnterMode)>>
      ContextSensitiveHelp;
}

final class IOleWindow extends ffi.Struct {
  external ffi.Pointer<IOleWindowVtbl> lpVtbl;
}

final class IMAGELIST extends ffi.Opaque {}

typedef HIMAGELIST = ffi.Pointer<IMAGELIST>;
typedef PLONG = ffi.Pointer<LONG>;
typedef LPWSTR = ffi.Pointer<WCHAR>;
typedef LONG_PTR = ffi.LongLong;
typedef DartLONG_PTR = int;
typedef LPARAM = LONG_PTR;
typedef PUINT = ffi.Pointer<ffi.UnsignedInt>;

final class tagLVITEMW extends ffi.Struct {
  @UINT()
  external int mask;

  @ffi.Int()
  external int iItem;

  @ffi.Int()
  external int iSubItem;

  @UINT()
  external int state;

  @UINT()
  external int stateMask;

  external LPWSTR pszText;

  @ffi.Int()
  external int cchTextMax;

  @ffi.Int()
  external int iImage;

  @LPARAM()
  external int lParam;

  @ffi.Int()
  external int iIndent;

  @ffi.Int()
  external int iGroupId;

  @UINT()
  external int cColumns;

  external PUINT puColumns;

  external ffi.Pointer<ffi.Int> piColFmt;

  @ffi.Int()
  external int iGroup;
}

typedef LVITEMW = tagLVITEMW;
typedef LPCWSTR = ffi.Pointer<WCHAR>;

final class tagLVBKIMAGEW extends ffi.Struct {
  @ULONG()
  external int ulFlags;

  external HBITMAP hbm;

  external LPWSTR pszImage;

  @UINT()
  external int cchImageMax;

  @ffi.Int()
  external int xOffsetPercent;

  @ffi.Int()
  external int yOffsetPercent;
}

typedef LVBKIMAGEW = tagLVBKIMAGEW;

final class tagLVITEMINDEX extends ffi.Struct {
  @ffi.Int()
  external int iItem;

  @ffi.Int()
  external int iGroup;
}

typedef LVITEMINDEX = tagLVITEMINDEX;
typedef LPRECT = ffi.Pointer<tagRECT>;

final class tagLVHITTESTINFO extends ffi.Struct {
  external POINT pt;

  @UINT()
  external int flags;

  @ffi.Int()
  external int iItem;

  @ffi.Int()
  external int iSubItem;

  @ffi.Int()
  external int iGroup;
}

typedef LVHITTESTINFO = tagLVHITTESTINFO;

final class tagLVFINDINFOW extends ffi.Struct {
  @UINT()
  external int flags;

  external LPCWSTR psz;

  @LPARAM()
  external int lParam;

  external POINT pt;

  @UINT()
  external int vkDirection;
}

typedef LVFINDINFOW = tagLVFINDINFOW;

final class tagLVCOLUMNW extends ffi.Struct {
  @UINT()
  external int mask;

  @ffi.Int()
  external int fmt;

  @ffi.Int()
  external int cx;

  external LPWSTR pszText;

  @ffi.Int()
  external int cchTextMax;

  @ffi.Int()
  external int iSubItem;

  @ffi.Int()
  external int iImage;

  @ffi.Int()
  external int iOrder;

  @ffi.Int()
  external int cxMin;

  @ffi.Int()
  external int cxDefault;

  @ffi.Int()
  external int cxIdeal;
}

typedef LVCOLUMNW = tagLVCOLUMNW;
typedef PFNLVCOMPAREFunction = ffi.Int Function(LPARAM, LPARAM, LPARAM);
typedef DartPFNLVCOMPAREFunction = int Function(
    DartLONG_PTR, DartLONG_PTR, DartLONG_PTR);
typedef PFNLVCOMPARE = ffi.Pointer<ffi.NativeFunction<PFNLVCOMPAREFunction>>;
typedef PBOOL = ffi.Pointer<BOOL>;
typedef PFNLVGROUPCOMPAREFunction = ffi.Int Function(
    ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>);
typedef DartPFNLVGROUPCOMPAREFunction = int Function(
    int, int, ffi.Pointer<ffi.Void>);
typedef PFNLVGROUPCOMPARE
    = ffi.Pointer<ffi.NativeFunction<PFNLVGROUPCOMPAREFunction>>;

final class tagLVGROUP extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int mask;

  external LPWSTR pszHeader;

  @ffi.Int()
  external int cchHeader;

  external LPWSTR pszFooter;

  @ffi.Int()
  external int cchFooter;

  @ffi.Int()
  external int iGroupId;

  @UINT()
  external int stateMask;

  @UINT()
  external int state;

  @UINT()
  external int uAlign;

  external LPWSTR pszSubtitle;

  @UINT()
  external int cchSubtitle;

  external LPWSTR pszTask;

  @UINT()
  external int cchTask;

  external LPWSTR pszDescriptionTop;

  @UINT()
  external int cchDescriptionTop;

  external LPWSTR pszDescriptionBottom;

  @UINT()
  external int cchDescriptionBottom;

  @ffi.Int()
  external int iTitleImage;

  @ffi.Int()
  external int iExtendedImage;

  @ffi.Int()
  external int iFirstItem;

  @UINT()
  external int cItems;

  external LPWSTR pszSubsetTitle;

  @UINT()
  external int cchSubsetTitle;
}

typedef LVGROUP = tagLVGROUP;

final class tagLVINSERTGROUPSORTED extends ffi.Struct {
  external PFNLVGROUPCOMPARE pfnGroupCompare;

  external ffi.Pointer<ffi.Void> pvData;

  external LVGROUP lvGroup;
}

typedef LVINSERTGROUPSORTED = tagLVINSERTGROUPSORTED;

final class tagLVGROUPMETRICS extends ffi.Struct {
  @UINT()
  external int cbSize;

  @UINT()
  external int mask;

  @UINT()
  external int Left;

  @UINT()
  external int Top;

  @UINT()
  external int Right;

  @UINT()
  external int Bottom;

  @COLORREF()
  external int crLeft;

  @COLORREF()
  external int crTop;

  @COLORREF()
  external int crRight;

  @COLORREF()
  external int crBottom;

  @COLORREF()
  external int crHeader;

  @COLORREF()
  external int crFooter;
}

typedef LVGROUPMETRICS = tagLVGROUPMETRICS;
typedef LPPOINT = ffi.Pointer<tagPOINT>;

final class IOwnerDataCallbackVtbl extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IOwnerDataCallback> This,
              ffi.Pointer<IID> riid,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppvObject)>> QueryInterface;

  external ffi.Pointer<
          ffi
          .NativeFunction<ULONG Function(ffi.Pointer<IOwnerDataCallback> This)>>
      AddRef;

  external ffi.Pointer<
          ffi
          .NativeFunction<ULONG Function(ffi.Pointer<IOwnerDataCallback> This)>>
      Release;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IOwnerDataCallback> This, LONG itemIndex,
              LPPOINT pPosition)>> GetItemPosition;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IOwnerDataCallback> This, LONG itemIndex,
              POINT position)>> SetItemPosition;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IOwnerDataCallback> This,
              LONG groupIndex,
              LONG groupWideItemIndex,
              PLONG pTotalItemIndex)>> GetItemInGroup;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IOwnerDataCallback> This, LONG itemIndex,
              LONG occurenceIndex, PLONG pGroupIndex)>> GetItemGroup;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IOwnerDataCallback> This, LONG itemIndex,
              PLONG pOccurenceCount)>> GetItemGroupCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IOwnerDataCallback> This,
              LVITEMINDEX firstItem, LVITEMINDEX lastItem)>> OnCacheHint;
}

final class IOwnerDataCallback extends ffi.Struct {
  external ffi.Pointer<IOwnerDataCallbackVtbl> lpVtbl;
}

final class tagSIZE extends ffi.Struct {
  @LONG()
  external int cx;

  @LONG()
  external int cy;
}

typedef SIZE = tagSIZE;

final class tagLVTILEVIEWINFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwMask;

  @DWORD()
  external int dwFlags;

  external SIZE sizeTile;

  @ffi.Int()
  external int cLines;

  external RECT rcLabelMargin;
}

typedef LVTILEVIEWINFO = tagLVTILEVIEWINFO;

final class tagLVTILEINFO extends ffi.Struct {
  @UINT()
  external int cbSize;

  @ffi.Int()
  external int iItem;

  @UINT()
  external int cColumns;

  external PUINT puColumns;

  external ffi.Pointer<ffi.Int> piColFmt;
}

typedef LVTILEINFO = tagLVTILEINFO;

final class LVINSERTMARK extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  @ffi.Int()
  external int iItem;

  @DWORD()
  external int dwReserved;
}

final class tagLVSETINFOTIP extends ffi.Struct {
  @UINT()
  external int cbSize;

  @DWORD()
  external int dwFlags;

  external LPWSTR pszText;

  @ffi.Int()
  external int iItem;

  @ffi.Int()
  external int iSubItem;
}

typedef LVSETINFOTIP = tagLVSETINFOTIP;

final class tagLVWORKAREAWITHDPI extends ffi.Opaque {}

final class IListViewVtbl extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, ffi.Pointer<IID> riid,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppvObject)>> QueryInterface;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<IListView> This)>>
      AddRef;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<IListView> This)>>
      Release;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              ffi.Pointer<IOleWindow> window,
              ffi.Pointer<HWND> WindowHandle)>> GetWindow;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              ffi.Pointer<IOleWindow> window,
              BOOL fEnterMode)>> ContextSensitiveHelp;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG imageList,
              ffi.Pointer<HIMAGELIST> pHImageList)>> GetImageList;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              LONG imageList,
              HIMAGELIST hNewImageList,
              ffi.Pointer<HIMAGELIST> pHOldImageList)>> SetImageList;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<COLORREF> pColor)>>
      GetBackgroundColor;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, COLORREF color)>>
      SetBackgroundColor;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<COLORREF> pColor)>>
      GetTextColor;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, COLORREF color)>>
      SetTextColor;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<COLORREF> pColor)>>
      GetTextBackgroundColor;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, COLORREF color)>>
      SetTextBackgroundColor;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<COLORREF> pColor)>>
      GetHotLightColor;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, COLORREF color)>>
      SetHotLightColor;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, PLONG pItemCount)>>
      GetItemCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, LONG itemCount, ULONG flags)>>
      SetItemCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<LVITEMW> pItem)>>
      GetItem;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<LVITEMW> pItem)>>
      SetItem;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              LONG itemIndex,
              LONG subItemIndex,
              ULONG mask,
              ffi.Pointer<ULONG> pState)>> GetItemState;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG itemIndex,
              LONG subItemIndex, ULONG mask, ULONG state)>> SetItemState;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG itemIndex,
              LONG subItemIndex, LPWSTR pBuffer, LONG bufferSize)>> GetItemText;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG itemIndex,
              LONG subItemIndex, LPCWSTR pText)>> SetItemText;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVBKIMAGEW> pBkImage)>> GetBackgroundImage;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVBKIMAGEW> pBkImage)>> SetBackgroundImage;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, PLONG pColumnIndex)>>
      GetFocusedColumn;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ULONG mask, ULONG flags)>>
      SetSelectionFlags;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, PULONG pColumnIndex)>>
      GetSelectedColumn;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, ULONG columnIndex)>>
      SetSelectedColumn;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This, ffi.Pointer<ULONG> pView)>> GetView;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, ULONG view)>> SetView;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVITEMW> pItem, PLONG pItemIndex)>> InsertItem;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, LONG itemIndex)>>
      DeleteItem;

  external ffi.Pointer<
          ffi.NativeFunction<HRESULT Function(ffi.Pointer<IListView> This)>>
      DeleteAllItems;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, LONG itemIndex)>>
      UpdateItem;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LVITEMINDEX itemIndex,
              LONG rectangleType, LPRECT pRectangle)>> GetItemRect;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              LVITEMINDEX itemIndex,
              LONG subItemIndex,
              LONG rectangleType,
              LPRECT pRectangle)>> GetSubItemRect;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVHITTESTINFO> pHitTestData)>> HitTestSubItem;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, PWSTR pBuffer,
              LONG bufferSize, PLONG pCopiedChars)>> GetIncrSearchString;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              BOOL smallIconView,
              PLONG pHorizontalSpacing,
              PLONG pVerticalSpacing)>> GetItemSpacing;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              LONG horizontalSpacing,
              LONG verticalSpacing,
              PLONG pHorizontalSpacing,
              PLONG pVerticalSpacing)>> SetIconSpacing;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              LVITEMINDEX itemIndex,
              ULONG flags,
              ffi.Pointer<LVITEMINDEX> pNextItemIndex)>> GetNextItem;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              LVITEMINDEX startItemIndex,
              ffi.Pointer<LVFINDINFOW> pFindInfo,
              ffi.Pointer<LVITEMINDEX> pFoundItemIndex)>> FindItem;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVITEMINDEX> pSelectionMark)>> GetSelectionMark;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              LVITEMINDEX newSelectionMark,
              ffi.Pointer<LVITEMINDEX> pOldSelectionMark)>> SetSelectionMark;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LVITEMINDEX itemIndex,
              ffi.Pointer<POINT> pPosition)>> GetItemPosition;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG itemIndex,
              ffi.Pointer<POINT> pPosition)>> SetItemPosition;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              ULONG horizontalScrollDistance,
              ULONG verticalScrollDistance)>> ScrollView;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LVITEMINDEX itemIndex,
              BOOL partialOk)>> EnsureItemVisible;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LVITEMINDEX itemIndex,
              LONG subItemIndex)>> EnsureSubItemVisible;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LVITEMINDEX itemIndex,
              LONG subItemIndex)>> EditSubItem;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG firstItemIndex,
              LONG lastItemIndex)>> RedrawItems;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, ULONG mode)>>
      ArrangeItems;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, LONG unknown)>>
      RecomputeItems;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<HWND> EditWindowHandle)>> GetEditControl;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              LVITEMINDEX itemIndex,
              LPCWSTR initialEditText,
              ffi.Pointer<HWND> EditWindowHandle)>> EditLabel;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, ULONG groupIndex)>>
      EditGroupLabel;

  external ffi.Pointer<
          ffi.NativeFunction<HRESULT Function(ffi.Pointer<IListView> This)>>
      CancelEditLabel;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              ffi.Pointer<LVITEMINDEX> itemIndex,
              PLONG subItemIndex)>> GetEditItem;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVHITTESTINFO> pHitTestData)>> HitTest;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, PCWSTR pString, PLONG pWidth)>>
      GetStringWidth;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, ULONG columnIndex,
              ffi.Pointer<LVCOLUMNW> pColumn)>> GetColumn;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, ULONG columnIndex,
              ffi.Pointer<LVCOLUMNW> pColumn)>> SetColumn;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, ULONG numberOfColumns,
              ffi.Pointer<PVOID> pColumns)>> GetColumnOrderArray;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, ULONG numberOfColumns,
              PVOID pColumns)>> SetColumnOrderArray;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<HWND> HeaderWindowHandle)>> GetHeaderControl;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              ULONG insertAt,
              ffi.Pointer<LVCOLUMNW> pColumn,
              PLONG pColumnIndex)>> InsertColumn;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, ULONG columnIndex)>>
      DeleteColumn;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              LONG itemIndex,
              ffi.Pointer<POINT> pUpperLeft,
              ffi.Pointer<HIMAGELIST> pHImageList)>> CreateDragImage;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<RECT> pRectangle)>>
      GetViewRect;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, BOOL StyleAndClientRect,
              ffi.Pointer<RECT> pClientRectangle)>> GetClientRect;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, ULONG columnIndex,
              PLONG pWidth)>> GetColumnWidth;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ULONG columnIndex, ULONG width)>>
      SetColumnWidth;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<ULONG> pMask)>>
      GetCallbackMask;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, ULONG mask)>>
      SetCallbackMask;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, PULONG pTopIndex)>>
      GetTopIndex;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, PULONG pCountPerPage)>>
      GetCountPerPage;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<POINT> pOrigin)>>
      GetOrigin;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, PULONG pSelectedCount)>>
      GetSelectedCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, BOOL SortingByIndex,
              LPARAM lParam, PFNLVCOMPARE pComparisonFunction)>> SortItems;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<ULONG> pStyle)>>
      GetExtendedStyle;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, ULONG mask, ULONG style,
              ffi.Pointer<ULONG> pOldStyle)>> SetExtendedStyle;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, PULONG pTime)>>
      GetHoverTime;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ULONG time, PULONG pOldSetting)>>
      SetHoverTime;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<HWND> ToolTipWindowHandle)>> GetToolTip;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              HWND ToolTipWindowHandle,
              ffi.Pointer<HWND> OldToolTipWindowHandle)>> SetToolTip;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVITEMINDEX> pHotItem)>> GetHotItem;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LVITEMINDEX newHotItem,
              ffi.Pointer<LVITEMINDEX> pOldHotItem)>> SetHotItem;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<HCURSOR> pHCursor)>>
      GetHotCursor;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, HCURSOR hCursor,
              ffi.Pointer<HCURSOR> pHOldCursor)>> SetHotCursor;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG itemCount,
              PLONG pWidth, PLONG pHeight)>> ApproximateViewRect;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, LONG unknown, LPVOID pObject)>>
      SetRangeObject;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG numberOfWorkAreas,
              ffi.Pointer<RECT> pWorkAreas)>> GetWorkAreas;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG numberOfWorkAreas,
              ffi.Pointer<RECT> pWorkAreas)>> SetWorkAreas;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, PLONG pNumberOfWorkAreas)>>
      GetWorkAreaCount;

  external ffi.Pointer<
          ffi.NativeFunction<HRESULT Function(ffi.Pointer<IListView> This)>>
      ResetEmptyText;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, BOOL Enable)>>
      EnableGroupView;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, PBOOL IsEnabled)>>
      IsGroupViewEnabled;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              PFNLVGROUPCOMPARE pComparisonFunction, PVOID lParam)>> SortGroups;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              BOOL GetGroupInfoByIndex,
              LONG GroupIDOrIndex,
              ffi.Pointer<LVGROUP> pGroup)>> GetGroupInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              BOOL SetGroupInfoByIndex,
              LONG GroupIDOrIndex,
              ffi.Pointer<LVGROUP> pGroup)>> SetGroupInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              BOOL GetGroupRectByIndex,
              LONG GroupIDOrIndex,
              ULONG rectangleType,
              ffi.Pointer<RECT> pRectangle)>> GetGroupRect;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG groupID,
              ULONG mask, ffi.Pointer<ULONG> pState)>> GetGroupState;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG groupID,
              ffi.Pointer<BOOL> pHasGroup)>> HasGroup;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG insertAt,
              ffi.Pointer<LVGROUP> pGroup, PLONG pGroupID)>> InsertGroup;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, LONG groupID)>>
      RemoveGroup;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              ffi.Pointer<LVINSERTGROUPSORTED> pGroup,
              PLONG pGroupID)>> InsertGroupSorted;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVGROUPMETRICS> pMetrics)>> GetGroupMetrics;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVGROUPMETRICS> pMetrics)>> SetGroupMetrics;

  external ffi.Pointer<
          ffi.NativeFunction<HRESULT Function(ffi.Pointer<IListView> This)>>
      RemoveAllGroups;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, PLONG pGroupID)>>
      GetFocusedGroup;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, PLONG pCount)>>
      GetGroupCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<IOwnerDataCallback> pCallback)>> SetOwnerDataCallback;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVTILEVIEWINFO> pInfo)>> GetTileViewInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVTILEVIEWINFO> pInfo)>> SetTileViewInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVTILEINFO> pTileInfo)>> GetTileInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVTILEINFO> pTileInfo)>> SetTileInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVINSERTMARK> pInsertMarkDetails)>> GetInsertMark;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVINSERTMARK> pInsertMarkDetails)>> SetInsertMark;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, LPRECT pInsertMarkRectangle)>>
      GetInsertMarkRect;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<COLORREF> pColor)>>
      GetInsertMarkColor;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, COLORREF color,
              ffi.Pointer<COLORREF> pOldColor)>> SetInsertMarkColor;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              ffi.Pointer<POINT> pPoint,
              ffi.Pointer<LVINSERTMARK> pInsertMarkDetails)>> HitTestInsertMark;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This,
              ffi.Pointer<LVSETINFOTIP> pInfoTip)>> SetInfoTip;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<COLORREF> pColor)>>
      GetOutlineColor;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, COLORREF color,
              ffi.Pointer<COLORREF> pOldColor)>> SetOutlineColor;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, PLONG pItemIndex)>>
      GetFrozenItem;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, LONG unknown1, LONG unknown2)>>
      SetFrozenItem;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<RECT> pUnknown)>>
      GetFrozenSlot;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LONG unknown1,
              ffi.Pointer<POINT> pUnknown2)>> SetFrozenSlot;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<RECT> pMargin)>>
      GetViewMargin;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<RECT> pMargin)>>
      SetViewMargin;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, LVITEMINDEX itemIndex)>>
      SetKeyboardSelected;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, LONG itemIndex, PLONG pItemID)>>
      MapIndexToId;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, LONG itemID, PLONG pItemIndex)>>
      MapIdToIndex;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView> This, LVITEMINDEX itemIndex,
              ffi.Pointer<BOOL> pVisible)>> IsItemVisible;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, BOOL enable)>>
      EnableAlphaShadow;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, PLONG pNumberOfRowsDisplayed)>>
      GetGroupSubsetCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, LONG numberOfRowsToDisplay)>>
      SetGroupSubsetCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, PLONG pCount)>>
      GetVisibleSlotCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ffi.Pointer<RECT> pMargin)>>
      GetColumnMargin;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, LPVOID pCallback)>>
      SetSubItemCallback;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IListView> This,
              ffi.Pointer<LVITEMINDEX> pFirstItem,
              ffi.Pointer<LVITEMINDEX> pLastItem)>> GetVisibleItemRange;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView> This, ULONG mask, ULONG flags)>>
      SetTypeAheadFlags;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView>, LONG,
              ffi.Pointer<tagLVWORKAREAWITHDPI>)>> SetWorkAreasWithDpi;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView>, LONG,
              ffi.Pointer<tagLVWORKAREAWITHDPI>)>> GetWorkAreasWithDpi;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IListView>, LONG, LONG, HIMAGELIST,
              ffi.Pointer<HIMAGELIST>)>> SetWorkAreaImageList;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IListView>, LONG, LONG, ffi.Pointer<HIMAGELIST>)>>
      GetWorkAreaImageList;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, LONG Mode)>>
      EnableIconBullying;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IListView> This, ULONG Flags)>>
      EnableQuirks;
}

final class IListView extends ffi.Struct {
  external ffi.Pointer<IListViewVtbl> lpVtbl;
}

final class PH_COPY_ITEM_CONTEXT extends ffi.Struct {
  external HWND ListViewHandle;

  external ffi.Pointer<IListView> ListViewClass;

  @ULONG()
  external int Id;

  @ULONG()
  external int SubId;

  external PPH_STRING MenuItemText;
}

typedef PH_COPY_ITEM_CONTEXT$1 = PH_COPY_ITEM_CONTEXT;
typedef PPH_COPY_ITEM_CONTEXT = ffi.Pointer<PH_COPY_ITEM_CONTEXT>;
typedef WPARAM = UINT_PTR;

final class tagMSG extends ffi.Struct {
  external HWND hwnd;

  @UINT()
  external int message;

  @WPARAM()
  external int wParam;

  @LPARAM()
  external int lParam;

  @DWORD()
  external int time;

  external POINT pt;
}

typedef PMSG = ffi.Pointer<tagMSG>;
typedef PPH_MESSAGE_LOOP_FILTERFunction = BOOLEAN Function(
    PMSG Message, PVOID Context);
typedef DartPPH_MESSAGE_LOOP_FILTERFunction = Dartboolean Function(
    PMSG Message, PVOID Context);
typedef PPH_MESSAGE_LOOP_FILTER
    = ffi.Pointer<ffi.NativeFunction<PPH_MESSAGE_LOOP_FILTERFunction>>;

final class PH_MESSAGE_LOOP_FILTER_ENTRY extends ffi.Struct {
  external PPH_MESSAGE_LOOP_FILTER Filter;

  external PVOID Context;
}

typedef PH_MESSAGE_LOOP_FILTER_ENTRY$1 = PH_MESSAGE_LOOP_FILTER_ENTRY;
typedef PPH_MESSAGE_LOOP_FILTER_ENTRY
    = ffi.Pointer<PH_MESSAGE_LOOP_FILTER_ENTRY>;

final class PH_LOG_ENTRY extends ffi.Opaque {}

typedef PPH_LOG_ENTRY = ffi.Pointer<PH_LOG_ENTRY>;
typedef PH_SEARCHCONTROL_CALLBACK = ffi
    .NativeFunction<ffi.Void Function(ULONG_PTR MatchHandle, PVOID Context)>;
typedef PPH_SEARCHCONTROL_CALLBACK = ffi.Pointer<PH_SEARCHCONTROL_CALLBACK>;
typedef PH_IMAGELIST_ITEM$1 = PH_IMAGELIST_ITEM;
typedef PH_PROCESS_ITEM$1 = PH_PROCESS_ITEM;
typedef PH_PROCESS_RECORD$1 = PH_PROCESS_RECORD;
typedef PH_SERVICE_ITEM$1 = PH_SERVICE_ITEM;

final class PH_SERVICE_MODIFIED_DATA extends ffi.Struct {
  external PPH_SERVICE_ITEM ServiceItem;

  external PH_SERVICE_ITEM$1 OldService;
}

typedef PH_SERVICE_MODIFIED_DATA$1 = PH_SERVICE_MODIFIED_DATA;
typedef PPH_SERVICE_MODIFIED_DATA = ffi.Pointer<PH_SERVICE_MODIFIED_DATA>;

enum PH_SERVICE_CHANGE {
  ServiceNone(0),
  ServiceStarted(1),
  ServiceContinued(2),
  ServicePaused(3),
  ServiceStopped(4),
  ServiceModified(5);

  final int value;
  const PH_SERVICE_CHANGE(this.value);

  static PH_SERVICE_CHANGE fromValue(int value) => switch (value) {
        0 => ServiceNone,
        1 => ServiceStarted,
        2 => ServiceContinued,
        3 => ServicePaused,
        4 => ServiceStopped,
        5 => ServiceModified,
        _ => throw ArgumentError('Unknown value for PH_SERVICE_CHANGE: $value'),
      };
}

typedef PPH_SERVICE_CHANGE = ffi.Pointer<ffi.UnsignedInt>;
typedef PH_NETWORK_ITEM$1 = PH_NETWORK_ITEM;

/// modprv
typedef PH_MODULE_ITEM$1 = PH_MODULE_ITEM;
typedef PH_MODULE_PROVIDER$1 = PH_MODULE_PROVIDER;

/// thrdprv
typedef PH_THREAD_ITEM$1 = PH_THREAD_ITEM;
typedef PH_THREAD_PROVIDER$1 = PH_THREAD_PROVIDER;
typedef PH_HANDLE_ITEM$1 = PH_HANDLE_ITEM;
typedef PH_HANDLE_PROVIDER$1 = PH_HANDLE_PROVIDER;
typedef PH_MEMORY_ITEM$1 = PH_MEMORY_ITEM;
typedef PH_MEMORY_ITEM_LIST$1 = PH_MEMORY_ITEM_LIST;

enum PH_DEVICE_PROPERTY_CLASS {
  PhDevicePropertyName(0),
  PhDevicePropertyManufacturer(1),
  PhDevicePropertyService(2),
  PhDevicePropertyClass(3),
  PhDevicePropertyEnumeratorName(4),
  PhDevicePropertyInstallDate(5),
  PhDevicePropertyFirstInstallDate(6),
  PhDevicePropertyLastArrivalDate(7),
  PhDevicePropertyLastRemovalDate(8),
  PhDevicePropertyDeviceDesc(9),
  PhDevicePropertyFriendlyName(10),
  PhDevicePropertyInstanceId(11),
  PhDevicePropertyParentInstanceId(12),
  PhDevicePropertyPDOName(13),
  PhDevicePropertyLocationInfo(14),
  PhDevicePropertyClassGuid(15),
  PhDevicePropertyDriver(16),
  PhDevicePropertyDriverVersion(17),
  PhDevicePropertyDriverDate(18),
  PhDevicePropertyFirmwareDate(19),
  PhDevicePropertyFirmwareVersion(20),
  PhDevicePropertyFirmwareRevision(21),
  PhDevicePropertyHasProblem(22),
  PhDevicePropertyProblemCode(23),
  PhDevicePropertyProblemStatus(24),
  PhDevicePropertyDevNodeStatus(25),
  PhDevicePropertyDevCapabilities(26),
  PhDevicePropertyUpperFilters(27),
  PhDevicePropertyLowerFilters(28),
  PhDevicePropertyHardwareIds(29),
  PhDevicePropertyCompatibleIds(30),
  PhDevicePropertyConfigFlags(31),
  PhDevicePropertyUINumber(32),
  PhDevicePropertyBusTypeGuid(33),
  PhDevicePropertyLegacyBusType(34),
  PhDevicePropertyBusNumber(35),
  PhDevicePropertySecurity(36),
  PhDevicePropertySecuritySDS(37),
  PhDevicePropertyDevType(38),
  PhDevicePropertyExclusive(39),
  PhDevicePropertyCharacteristics(40),
  PhDevicePropertyAddress(41),
  PhDevicePropertyPowerData(42),
  PhDevicePropertyRemovalPolicy(43),
  PhDevicePropertyRemovalPolicyDefault(44),
  PhDevicePropertyRemovalPolicyOverride(45),
  PhDevicePropertyInstallState(46),
  PhDevicePropertyLocationPaths(47),
  PhDevicePropertyBaseContainerId(48),
  PhDevicePropertyEjectionRelations(49),
  PhDevicePropertyRemovalRelations(50),
  PhDevicePropertyPowerRelations(51),
  PhDevicePropertyBusRelations(52),
  PhDevicePropertyChildren(53),
  PhDevicePropertySiblings(54),
  PhDevicePropertyTransportRelations(55),
  PhDevicePropertyReported(56),
  PhDevicePropertyLegacy(57),
  PhDevicePropertyContainerId(58),
  PhDevicePropertyInLocalMachineContainer(59),
  PhDevicePropertyModel(60),
  PhDevicePropertyModelId(61),
  PhDevicePropertyFriendlyNameAttributes(62),
  PhDevicePropertyManufacturerAttributes(63),
  PhDevicePropertyPresenceNotForDevice(64),
  PhDevicePropertySignalStrength(65),
  PhDevicePropertyIsAssociateableByUserAction(66),
  PhDevicePropertyShowInUninstallUI(67),
  PhDevicePropertyNumaProximityDomain(68),
  PhDevicePropertyDHPRebalancePolicy(69),
  PhDevicePropertyNumaNode(70),
  PhDevicePropertyBusReportedDeviceDesc(71),
  PhDevicePropertyIsPresent(72),
  PhDevicePropertyConfigurationId(73),
  PhDevicePropertyReportedDeviceIdsHash(74),
  PhDevicePropertyPhysicalDeviceLocation(75),
  PhDevicePropertyBiosDeviceName(76),
  PhDevicePropertyDriverProblemDesc(77),
  PhDevicePropertyDebuggerSafe(78),
  PhDevicePropertyPostInstallInProgress(79),
  PhDevicePropertyStack(80),
  PhDevicePropertyExtendedConfigurationIds(81),
  PhDevicePropertyIsRebootRequired(82),
  PhDevicePropertyDependencyProviders(83),
  PhDevicePropertyDependencyDependents(84),
  PhDevicePropertySoftRestartSupported(85),
  PhDevicePropertyExtendedAddress(86),
  PhDevicePropertyAssignedToGuest(87),
  PhDevicePropertyCreatorProcessId(88),
  PhDevicePropertyFirmwareVendor(89),
  PhDevicePropertySessionId(90),
  PhDevicePropertyDriverDesc(91),
  PhDevicePropertyDriverInfPath(92),
  PhDevicePropertyDriverInfSection(93),
  PhDevicePropertyDriverInfSectionExt(94),
  PhDevicePropertyMatchingDeviceId(95),
  PhDevicePropertyDriverProvider(96),
  PhDevicePropertyDriverPropPageProvider(97),
  PhDevicePropertyDriverCoInstallers(98),
  PhDevicePropertyResourcePickerTags(99),
  PhDevicePropertyResourcePickerExceptions(100),
  PhDevicePropertyDriverRank(101),
  PhDevicePropertyDriverLogoLevel(102),
  PhDevicePropertyNoConnectSound(103),
  PhDevicePropertyGenericDriverInstalled(104),
  PhDevicePropertyAdditionalSoftwareRequested(105),
  PhDevicePropertySafeRemovalRequired(106),
  PhDevicePropertySafeRemovalRequiredOverride(107),
  PhDevicePropertyPkgModel(108),
  PhDevicePropertyPkgVendorWebSite(109),
  PhDevicePropertyPkgDetailedDescription(110),
  PhDevicePropertyPkgDocumentationLink(111),
  PhDevicePropertyPkgIcon(112),
  PhDevicePropertyPkgBrandingIcon(113),
  PhDevicePropertyClassUpperFilters(114),
  PhDevicePropertyClassLowerFilters(115),
  PhDevicePropertyClassSecurity(116),
  PhDevicePropertyClassSecuritySDS(117),
  PhDevicePropertyClassDevType(118),
  PhDevicePropertyClassExclusive(119),
  PhDevicePropertyClassCharacteristics(120),
  PhDevicePropertyClassName(121),
  PhDevicePropertyClassClassName(122),
  PhDevicePropertyClassIcon(123),
  PhDevicePropertyClassClassInstaller(124),
  PhDevicePropertyClassPropPageProvider(125),
  PhDevicePropertyClassNoInstallClass(126),
  PhDevicePropertyClassNoDisplayClass(127),
  PhDevicePropertyClassSilentInstall(128),
  PhDevicePropertyClassNoUseClass(129),
  PhDevicePropertyClassDefaultService(130),
  PhDevicePropertyClassIconPath(131),
  PhDevicePropertyClassDHPRebalanceOptOut(132),
  PhDevicePropertyClassClassCoInstallers(133),
  PhDevicePropertyInterfaceFriendlyName(134),
  PhDevicePropertyInterfaceEnabled(135),
  PhDevicePropertyInterfaceClassGuid(136),
  PhDevicePropertyInterfaceReferenceString(137),
  PhDevicePropertyInterfaceRestricted(138),
  PhDevicePropertyInterfaceUnrestrictedAppCapabilities(139),
  PhDevicePropertyInterfaceSchematicName(140),
  PhDevicePropertyInterfaceClassDefaultInterface(141),
  PhDevicePropertyInterfaceClassName(142),
  PhDevicePropertyContainerAddress(143),
  PhDevicePropertyContainerDiscoveryMethod(144),
  PhDevicePropertyContainerIsEncrypted(145),
  PhDevicePropertyContainerIsAuthenticated(146),
  PhDevicePropertyContainerIsConnected(147),
  PhDevicePropertyContainerIsPaired(148),
  PhDevicePropertyContainerIcon(149),
  PhDevicePropertyContainerVersion(150),
  PhDevicePropertyContainerLastSeen(151),
  PhDevicePropertyContainerLastConnected(152),
  PhDevicePropertyContainerIsShowInDisconnectedState(153),
  PhDevicePropertyContainerIsLocalMachine(154),
  PhDevicePropertyContainerMetadataPath(155),
  PhDevicePropertyContainerIsMetadataSearchInProgress(156),
  PhDevicePropertyContainerIsMetadataChecksum(157),
  PhDevicePropertyContainerIsNotInterestingForDisplay(158),
  PhDevicePropertyContainerLaunchDeviceStageOnDeviceConnect(159),
  PhDevicePropertyContainerLaunchDeviceStageFromExplorer(160),
  PhDevicePropertyContainerBaselineExperienceId(161),
  PhDevicePropertyContainerIsDeviceUniquelyIdentifiable(162),
  PhDevicePropertyContainerAssociationArray(163),
  PhDevicePropertyContainerDeviceDescription1(164),
  PhDevicePropertyContainerDeviceDescription2(165),
  PhDevicePropertyContainerHasProblem(166),
  PhDevicePropertyContainerIsSharedDevice(167),
  PhDevicePropertyContainerIsNetworkDevice(168),
  PhDevicePropertyContainerIsDefaultDevice(169),
  PhDevicePropertyContainerMetadataCabinet(170),
  PhDevicePropertyContainerRequiresPairingElevation(171),
  PhDevicePropertyContainerExperienceId(172),
  PhDevicePropertyContainerCategory(173),
  PhDevicePropertyContainerCategoryDescSingular(174),
  PhDevicePropertyContainerCategoryDescPlural(175),
  PhDevicePropertyContainerCategoryIcon(176),
  PhDevicePropertyContainerCategoryGroupDesc(177),
  PhDevicePropertyContainerCategoryGroupIcon(178),
  PhDevicePropertyContainerPrimaryCategory(179),
  PhDevicePropertyContainerUnpairUninstall(180),
  PhDevicePropertyContainerRequiresUninstallElevation(181),
  PhDevicePropertyContainerDeviceFunctionSubRank(182),
  PhDevicePropertyContainerAlwaysShowDeviceAsConnected(183),
  PhDevicePropertyContainerConfigFlags(184),
  PhDevicePropertyContainerPrivilegedPackageFamilyNames(185),
  PhDevicePropertyContainerCustomPrivilegedPackageFamilyNames(186),
  PhDevicePropertyContainerIsRebootRequired(187),
  PhDevicePropertyContainerFriendlyName(188),
  PhDevicePropertyContainerManufacturer(189),
  PhDevicePropertyContainerModelName(190),
  PhDevicePropertyContainerModelNumber(191),
  PhDevicePropertyContainerInstallInProgress(192),
  PhDevicePropertyObjectType(193),
  PhDevicePropertyPciDeviceType(194),
  PhDevicePropertyPciCurrentSpeedAndMode(195),
  PhDevicePropertyPciBaseClass(196),
  PhDevicePropertyPciSubClass(197),
  PhDevicePropertyPciProgIf(198),
  PhDevicePropertyPciCurrentPayloadSize(199),
  PhDevicePropertyPciMaxPayloadSize(200),
  PhDevicePropertyPciMaxReadRequestSize(201),
  PhDevicePropertyPciCurrentLinkSpeed(202),
  PhDevicePropertyPciCurrentLinkWidth(203),
  PhDevicePropertyPciMaxLinkSpeed(204),
  PhDevicePropertyPciMaxLinkWidth(205),
  PhDevicePropertyPciExpressSpecVersion(206),
  PhDevicePropertyPciInterruptSupport(207),
  PhDevicePropertyPciInterruptMessageMaximum(208),
  PhDevicePropertyPciBarTypes(209),
  PhDevicePropertyPciSriovSupport(210),
  PhDevicePropertyPciLabel_Id(211),
  PhDevicePropertyPciLabel_String(212),
  PhDevicePropertyPciSerialNumber(213),
  PhDevicePropertyPciExpressCapabilityControl(214),
  PhDevicePropertyPciNativeExpressControl(215),
  PhDevicePropertyPciSystemMsiSupport(216),
  PhDevicePropertyStoragePortable(217),
  PhDevicePropertyStorageRemovableMedia(218),
  PhDevicePropertyStorageSystemCritical(219),
  PhDevicePropertyStorageDiskNumber(220),
  PhDevicePropertyStoragePartitionNumber(221),
  PhDevicePropertyGpuLuid(222),
  PhDevicePropertyGpuPhysicalAdapterIndex(223),
  PhMaxDeviceProperty(224);

  final int value;
  const PH_DEVICE_PROPERTY_CLASS(this.value);

  static PH_DEVICE_PROPERTY_CLASS fromValue(int value) => switch (value) {
        0 => PhDevicePropertyName,
        1 => PhDevicePropertyManufacturer,
        2 => PhDevicePropertyService,
        3 => PhDevicePropertyClass,
        4 => PhDevicePropertyEnumeratorName,
        5 => PhDevicePropertyInstallDate,
        6 => PhDevicePropertyFirstInstallDate,
        7 => PhDevicePropertyLastArrivalDate,
        8 => PhDevicePropertyLastRemovalDate,
        9 => PhDevicePropertyDeviceDesc,
        10 => PhDevicePropertyFriendlyName,
        11 => PhDevicePropertyInstanceId,
        12 => PhDevicePropertyParentInstanceId,
        13 => PhDevicePropertyPDOName,
        14 => PhDevicePropertyLocationInfo,
        15 => PhDevicePropertyClassGuid,
        16 => PhDevicePropertyDriver,
        17 => PhDevicePropertyDriverVersion,
        18 => PhDevicePropertyDriverDate,
        19 => PhDevicePropertyFirmwareDate,
        20 => PhDevicePropertyFirmwareVersion,
        21 => PhDevicePropertyFirmwareRevision,
        22 => PhDevicePropertyHasProblem,
        23 => PhDevicePropertyProblemCode,
        24 => PhDevicePropertyProblemStatus,
        25 => PhDevicePropertyDevNodeStatus,
        26 => PhDevicePropertyDevCapabilities,
        27 => PhDevicePropertyUpperFilters,
        28 => PhDevicePropertyLowerFilters,
        29 => PhDevicePropertyHardwareIds,
        30 => PhDevicePropertyCompatibleIds,
        31 => PhDevicePropertyConfigFlags,
        32 => PhDevicePropertyUINumber,
        33 => PhDevicePropertyBusTypeGuid,
        34 => PhDevicePropertyLegacyBusType,
        35 => PhDevicePropertyBusNumber,
        36 => PhDevicePropertySecurity,
        37 => PhDevicePropertySecuritySDS,
        38 => PhDevicePropertyDevType,
        39 => PhDevicePropertyExclusive,
        40 => PhDevicePropertyCharacteristics,
        41 => PhDevicePropertyAddress,
        42 => PhDevicePropertyPowerData,
        43 => PhDevicePropertyRemovalPolicy,
        44 => PhDevicePropertyRemovalPolicyDefault,
        45 => PhDevicePropertyRemovalPolicyOverride,
        46 => PhDevicePropertyInstallState,
        47 => PhDevicePropertyLocationPaths,
        48 => PhDevicePropertyBaseContainerId,
        49 => PhDevicePropertyEjectionRelations,
        50 => PhDevicePropertyRemovalRelations,
        51 => PhDevicePropertyPowerRelations,
        52 => PhDevicePropertyBusRelations,
        53 => PhDevicePropertyChildren,
        54 => PhDevicePropertySiblings,
        55 => PhDevicePropertyTransportRelations,
        56 => PhDevicePropertyReported,
        57 => PhDevicePropertyLegacy,
        58 => PhDevicePropertyContainerId,
        59 => PhDevicePropertyInLocalMachineContainer,
        60 => PhDevicePropertyModel,
        61 => PhDevicePropertyModelId,
        62 => PhDevicePropertyFriendlyNameAttributes,
        63 => PhDevicePropertyManufacturerAttributes,
        64 => PhDevicePropertyPresenceNotForDevice,
        65 => PhDevicePropertySignalStrength,
        66 => PhDevicePropertyIsAssociateableByUserAction,
        67 => PhDevicePropertyShowInUninstallUI,
        68 => PhDevicePropertyNumaProximityDomain,
        69 => PhDevicePropertyDHPRebalancePolicy,
        70 => PhDevicePropertyNumaNode,
        71 => PhDevicePropertyBusReportedDeviceDesc,
        72 => PhDevicePropertyIsPresent,
        73 => PhDevicePropertyConfigurationId,
        74 => PhDevicePropertyReportedDeviceIdsHash,
        75 => PhDevicePropertyPhysicalDeviceLocation,
        76 => PhDevicePropertyBiosDeviceName,
        77 => PhDevicePropertyDriverProblemDesc,
        78 => PhDevicePropertyDebuggerSafe,
        79 => PhDevicePropertyPostInstallInProgress,
        80 => PhDevicePropertyStack,
        81 => PhDevicePropertyExtendedConfigurationIds,
        82 => PhDevicePropertyIsRebootRequired,
        83 => PhDevicePropertyDependencyProviders,
        84 => PhDevicePropertyDependencyDependents,
        85 => PhDevicePropertySoftRestartSupported,
        86 => PhDevicePropertyExtendedAddress,
        87 => PhDevicePropertyAssignedToGuest,
        88 => PhDevicePropertyCreatorProcessId,
        89 => PhDevicePropertyFirmwareVendor,
        90 => PhDevicePropertySessionId,
        91 => PhDevicePropertyDriverDesc,
        92 => PhDevicePropertyDriverInfPath,
        93 => PhDevicePropertyDriverInfSection,
        94 => PhDevicePropertyDriverInfSectionExt,
        95 => PhDevicePropertyMatchingDeviceId,
        96 => PhDevicePropertyDriverProvider,
        97 => PhDevicePropertyDriverPropPageProvider,
        98 => PhDevicePropertyDriverCoInstallers,
        99 => PhDevicePropertyResourcePickerTags,
        100 => PhDevicePropertyResourcePickerExceptions,
        101 => PhDevicePropertyDriverRank,
        102 => PhDevicePropertyDriverLogoLevel,
        103 => PhDevicePropertyNoConnectSound,
        104 => PhDevicePropertyGenericDriverInstalled,
        105 => PhDevicePropertyAdditionalSoftwareRequested,
        106 => PhDevicePropertySafeRemovalRequired,
        107 => PhDevicePropertySafeRemovalRequiredOverride,
        108 => PhDevicePropertyPkgModel,
        109 => PhDevicePropertyPkgVendorWebSite,
        110 => PhDevicePropertyPkgDetailedDescription,
        111 => PhDevicePropertyPkgDocumentationLink,
        112 => PhDevicePropertyPkgIcon,
        113 => PhDevicePropertyPkgBrandingIcon,
        114 => PhDevicePropertyClassUpperFilters,
        115 => PhDevicePropertyClassLowerFilters,
        116 => PhDevicePropertyClassSecurity,
        117 => PhDevicePropertyClassSecuritySDS,
        118 => PhDevicePropertyClassDevType,
        119 => PhDevicePropertyClassExclusive,
        120 => PhDevicePropertyClassCharacteristics,
        121 => PhDevicePropertyClassName,
        122 => PhDevicePropertyClassClassName,
        123 => PhDevicePropertyClassIcon,
        124 => PhDevicePropertyClassClassInstaller,
        125 => PhDevicePropertyClassPropPageProvider,
        126 => PhDevicePropertyClassNoInstallClass,
        127 => PhDevicePropertyClassNoDisplayClass,
        128 => PhDevicePropertyClassSilentInstall,
        129 => PhDevicePropertyClassNoUseClass,
        130 => PhDevicePropertyClassDefaultService,
        131 => PhDevicePropertyClassIconPath,
        132 => PhDevicePropertyClassDHPRebalanceOptOut,
        133 => PhDevicePropertyClassClassCoInstallers,
        134 => PhDevicePropertyInterfaceFriendlyName,
        135 => PhDevicePropertyInterfaceEnabled,
        136 => PhDevicePropertyInterfaceClassGuid,
        137 => PhDevicePropertyInterfaceReferenceString,
        138 => PhDevicePropertyInterfaceRestricted,
        139 => PhDevicePropertyInterfaceUnrestrictedAppCapabilities,
        140 => PhDevicePropertyInterfaceSchematicName,
        141 => PhDevicePropertyInterfaceClassDefaultInterface,
        142 => PhDevicePropertyInterfaceClassName,
        143 => PhDevicePropertyContainerAddress,
        144 => PhDevicePropertyContainerDiscoveryMethod,
        145 => PhDevicePropertyContainerIsEncrypted,
        146 => PhDevicePropertyContainerIsAuthenticated,
        147 => PhDevicePropertyContainerIsConnected,
        148 => PhDevicePropertyContainerIsPaired,
        149 => PhDevicePropertyContainerIcon,
        150 => PhDevicePropertyContainerVersion,
        151 => PhDevicePropertyContainerLastSeen,
        152 => PhDevicePropertyContainerLastConnected,
        153 => PhDevicePropertyContainerIsShowInDisconnectedState,
        154 => PhDevicePropertyContainerIsLocalMachine,
        155 => PhDevicePropertyContainerMetadataPath,
        156 => PhDevicePropertyContainerIsMetadataSearchInProgress,
        157 => PhDevicePropertyContainerIsMetadataChecksum,
        158 => PhDevicePropertyContainerIsNotInterestingForDisplay,
        159 => PhDevicePropertyContainerLaunchDeviceStageOnDeviceConnect,
        160 => PhDevicePropertyContainerLaunchDeviceStageFromExplorer,
        161 => PhDevicePropertyContainerBaselineExperienceId,
        162 => PhDevicePropertyContainerIsDeviceUniquelyIdentifiable,
        163 => PhDevicePropertyContainerAssociationArray,
        164 => PhDevicePropertyContainerDeviceDescription1,
        165 => PhDevicePropertyContainerDeviceDescription2,
        166 => PhDevicePropertyContainerHasProblem,
        167 => PhDevicePropertyContainerIsSharedDevice,
        168 => PhDevicePropertyContainerIsNetworkDevice,
        169 => PhDevicePropertyContainerIsDefaultDevice,
        170 => PhDevicePropertyContainerMetadataCabinet,
        171 => PhDevicePropertyContainerRequiresPairingElevation,
        172 => PhDevicePropertyContainerExperienceId,
        173 => PhDevicePropertyContainerCategory,
        174 => PhDevicePropertyContainerCategoryDescSingular,
        175 => PhDevicePropertyContainerCategoryDescPlural,
        176 => PhDevicePropertyContainerCategoryIcon,
        177 => PhDevicePropertyContainerCategoryGroupDesc,
        178 => PhDevicePropertyContainerCategoryGroupIcon,
        179 => PhDevicePropertyContainerPrimaryCategory,
        180 => PhDevicePropertyContainerUnpairUninstall,
        181 => PhDevicePropertyContainerRequiresUninstallElevation,
        182 => PhDevicePropertyContainerDeviceFunctionSubRank,
        183 => PhDevicePropertyContainerAlwaysShowDeviceAsConnected,
        184 => PhDevicePropertyContainerConfigFlags,
        185 => PhDevicePropertyContainerPrivilegedPackageFamilyNames,
        186 => PhDevicePropertyContainerCustomPrivilegedPackageFamilyNames,
        187 => PhDevicePropertyContainerIsRebootRequired,
        188 => PhDevicePropertyContainerFriendlyName,
        189 => PhDevicePropertyContainerManufacturer,
        190 => PhDevicePropertyContainerModelName,
        191 => PhDevicePropertyContainerModelNumber,
        192 => PhDevicePropertyContainerInstallInProgress,
        193 => PhDevicePropertyObjectType,
        194 => PhDevicePropertyPciDeviceType,
        195 => PhDevicePropertyPciCurrentSpeedAndMode,
        196 => PhDevicePropertyPciBaseClass,
        197 => PhDevicePropertyPciSubClass,
        198 => PhDevicePropertyPciProgIf,
        199 => PhDevicePropertyPciCurrentPayloadSize,
        200 => PhDevicePropertyPciMaxPayloadSize,
        201 => PhDevicePropertyPciMaxReadRequestSize,
        202 => PhDevicePropertyPciCurrentLinkSpeed,
        203 => PhDevicePropertyPciCurrentLinkWidth,
        204 => PhDevicePropertyPciMaxLinkSpeed,
        205 => PhDevicePropertyPciMaxLinkWidth,
        206 => PhDevicePropertyPciExpressSpecVersion,
        207 => PhDevicePropertyPciInterruptSupport,
        208 => PhDevicePropertyPciInterruptMessageMaximum,
        209 => PhDevicePropertyPciBarTypes,
        210 => PhDevicePropertyPciSriovSupport,
        211 => PhDevicePropertyPciLabel_Id,
        212 => PhDevicePropertyPciLabel_String,
        213 => PhDevicePropertyPciSerialNumber,
        214 => PhDevicePropertyPciExpressCapabilityControl,
        215 => PhDevicePropertyPciNativeExpressControl,
        216 => PhDevicePropertyPciSystemMsiSupport,
        217 => PhDevicePropertyStoragePortable,
        218 => PhDevicePropertyStorageRemovableMedia,
        219 => PhDevicePropertyStorageSystemCritical,
        220 => PhDevicePropertyStorageDiskNumber,
        221 => PhDevicePropertyStoragePartitionNumber,
        222 => PhDevicePropertyGpuLuid,
        223 => PhDevicePropertyGpuPhysicalAdapterIndex,
        224 => PhMaxDeviceProperty,
        _ => throw ArgumentError(
            'Unknown value for PH_DEVICE_PROPERTY_CLASS: $value'),
      };
}

typedef PPH_DEVICE_PROPERTY_CLASS = ffi.Pointer<ffi.UnsignedInt>;

enum PH_DEVICE_PROPERTY_TYPE {
  PhDevicePropertyTypeString(0),
  PhDevicePropertyTypeUInt64(1),
  PhDevicePropertyTypeInt64(2),
  PhDevicePropertyTypeUInt32(3),
  PhDevicePropertyTypeInt32(4),
  PhDevicePropertyTypeNTSTATUS(5),
  PhDevicePropertyTypeGUID(6),
  PhDevicePropertyTypeBoolean(7),
  PhDevicePropertyTypeTimeStamp(8),
  PhDevicePropertyTypeStringList(9),
  PhDevicePropertyTypeBinary(10),
  PhMaxDevicePropertyType(11);

  final int value;
  const PH_DEVICE_PROPERTY_TYPE(this.value);

  static PH_DEVICE_PROPERTY_TYPE fromValue(int value) => switch (value) {
        0 => PhDevicePropertyTypeString,
        1 => PhDevicePropertyTypeUInt64,
        2 => PhDevicePropertyTypeInt64,
        3 => PhDevicePropertyTypeUInt32,
        4 => PhDevicePropertyTypeInt32,
        5 => PhDevicePropertyTypeNTSTATUS,
        6 => PhDevicePropertyTypeGUID,
        7 => PhDevicePropertyTypeBoolean,
        8 => PhDevicePropertyTypeTimeStamp,
        9 => PhDevicePropertyTypeStringList,
        10 => PhDevicePropertyTypeBinary,
        11 => PhMaxDevicePropertyType,
        _ => throw ArgumentError(
            'Unknown value for PH_DEVICE_PROPERTY_TYPE: $value'),
      };
}

final class UnnamedUnion34 extends ffi.Union {
  @ULONG()
  external int State;
}

typedef LONG64 = ffi.LongLong;
typedef DartLONG64 = int;
typedef PBYTE = ffi.Pointer<BYTE>;

final class UnnamedStruct31 extends ffi.Struct {
  @ULONG()
  external int Size;

  external PBYTE Buffer;
}

final class UnnamedUnion35 extends ffi.Union {
  external PPH_STRING String;

  @ULONG64()
  external int UInt64;

  @LONG64()
  external int Int64;

  @ULONG()
  external int UInt32;

  @LONG()
  external int Int32;

  @NTSTATUS()
  external int Status;

  external GUID$1 Guid;

  @BOOLEAN()
  external int Boolean;

  external LARGE_INTEGER$1 TimeStamp;

  external PPH_LIST StringList;

  external UnnamedStruct31 Binary;
}

final class PH_DEVICE_PROPERTY extends ffi.Struct {
  external UnnamedUnion34 unnamed;

  external UnnamedUnion35 unnamed$1;

  external PPH_STRING AsString;
}

typedef PH_DEVICE_PROPERTY$1 = PH_DEVICE_PROPERTY;
typedef PPH_DEVICE_PROPERTY = ffi.Pointer<PH_DEVICE_PROPERTY>;
typedef PPH_DEVICE_ITEM = ffi.Pointer<PH_DEVICE_ITEM>;

final class PH_DEVICE_TREE extends ffi.Struct {
  external PPH_DEVICE_ITEM Root;

  external PPH_LIST DeviceList;

  external PPH_LIST DeviceInterfaceList;
}

final class UnnamedUnion36 extends ffi.Union {
  @ULONG()
  external int Flags;
}

final class PH_DEVICE_ITEM extends ffi.Struct {
  external ffi.Pointer<PH_DEVICE_TREE> Tree;

  external ffi.Pointer<PH_DEVICE_ITEM> Parent;

  external ffi.Pointer<PH_DEVICE_ITEM> Sibling;

  external ffi.Pointer<PH_DEVICE_ITEM> Child;

  external GUID$1 ClassGuid;

  @ULONG()
  external int InstanceIdHash;

  external PPH_STRING InstanceId;

  external PPH_STRING ParentInstanceId;

  @ULONG()
  external int ProblemCode;

  @ULONG()
  external int DevNodeStatus;

  @ULONG()
  external int Capabilities;

  @ULONG()
  external int ChildrenCount;

  @ULONG()
  external int InterfaceCount;

  external UnnamedUnion36 unnamed;

  @ffi.Array.multi([224])
  external ffi.Array<PH_DEVICE_PROPERTY$1> Properties;
}

typedef PH_DEVICE_ITEM$1 = PH_DEVICE_ITEM;
typedef PH_DEVICE_TREE$1 = PH_DEVICE_TREE;
typedef PPH_DEVICE_TREE = ffi.Pointer<PH_DEVICE_TREE>;
typedef PH_DEVICE_ENUM_RESOURCES_CALLBACK = ffi.NativeFunction<
    BOOLEAN Function(ULONG LogicalConfig, ULONG ResourceId, PVOID Buffer,
        ULONG Length, PVOID Context)>;
typedef PPH_DEVICE_ENUM_RESOURCES_CALLBACK
    = ffi.Pointer<PH_DEVICE_ENUM_RESOURCES_CALLBACK>;

enum PH_DEVICE_NOTIFY_ACTION {
  PhDeviceNotifyInterfaceArrival(0),
  PhDeviceNotifyInterfaceRemoval(1),
  PhDeviceNotifyInstanceEnumerated(2),
  PhDeviceNotifyInstanceStarted(3),
  PhDeviceNotifyInstanceRemoved(4);

  final int value;
  const PH_DEVICE_NOTIFY_ACTION(this.value);

  static PH_DEVICE_NOTIFY_ACTION fromValue(int value) => switch (value) {
        0 => PhDeviceNotifyInterfaceArrival,
        1 => PhDeviceNotifyInterfaceRemoval,
        2 => PhDeviceNotifyInstanceEnumerated,
        3 => PhDeviceNotifyInstanceStarted,
        4 => PhDeviceNotifyInstanceRemoved,
        _ => throw ArgumentError(
            'Unknown value for PH_DEVICE_NOTIFY_ACTION: $value'),
      };
}

typedef PPH_DEVICE_NOTIFY_ACTION = ffi.Pointer<ffi.UnsignedInt>;

final class UnnamedStruct32 extends ffi.Struct {
  external GUID$1 ClassGuid;
}

final class UnnamedStruct33 extends ffi.Struct {
  external PPH_STRING InstanceId;
}

final class UnnamedUnion37 extends ffi.Union {
  /// PhDeviceNotifyInterface...
  external UnnamedStruct32 DeviceInterface;

  /// PhDeviceNotifyInstance...
  external UnnamedStruct33 DeviceInstance;
}

final class PH_DEVICE_NOTIFY extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ActionAsInt;

  PH_DEVICE_NOTIFY_ACTION get Action =>
      PH_DEVICE_NOTIFY_ACTION.fromValue(ActionAsInt);

  external UnnamedUnion37 unnamed;
}

typedef PH_DEVICE_NOTIFY$1 = PH_DEVICE_NOTIFY;
typedef PPH_DEVICE_NOTIFY = ffi.Pointer<PH_DEVICE_NOTIFY>;

/// Common state highlighting support
final class PH_SH_STATE extends ffi.Struct {
  @ffi.UnsignedInt()
  external int StateAsInt;

  PH_ITEM_STATE get State => PH_ITEM_STATE.fromValue(StateAsInt);

  external HANDLE StateListHandle;

  @ULONG64()
  external int TickCount;
}

/// Common state highlighting support
typedef PH_SH_STATE$1 = PH_SH_STATE;

/// Common state highlighting support
typedef PPH_SH_STATE = ffi.Pointer<PH_SH_STATE>;

/// Provider event queues
enum PH_PROVIDER_EVENT_TYPE {
  ProviderAddedEvent(1),
  ProviderModifiedEvent(2),
  ProviderRemovedEvent(3);

  final int value;
  const PH_PROVIDER_EVENT_TYPE(this.value);

  static PH_PROVIDER_EVENT_TYPE fromValue(int value) => switch (value) {
        1 => ProviderAddedEvent,
        2 => ProviderModifiedEvent,
        3 => ProviderRemovedEvent,
        _ => throw ArgumentError(
            'Unknown value for PH_PROVIDER_EVENT_TYPE: $value'),
      };
}

final class PH_PROVIDER_EVENT extends ffi.Struct {
  @ULONG_PTR()
  external int TypeAndObject;

  @ULONG()
  external int RunId;
}

typedef PH_PROVIDER_EVENT$1 = PH_PROVIDER_EVENT;
typedef PPH_PROVIDER_EVENT = ffi.Pointer<PH_PROVIDER_EVENT>;

final class PH_ARRAY extends ffi.Struct {
  @SIZE_T()
  external int Count;

  @SIZE_T()
  external int AllocatedCount;

  @SIZE_T()
  external int ItemSize;

  external PVOID Items;
}

typedef PH_ARRAY$1 = PH_ARRAY;

final class PH_PROVIDER_EVENT_QUEUE extends ffi.Struct {
  external PH_ARRAY$1 Array;

  external PH_QUEUED_LOCK$1 Lock;
}

typedef PH_PROVIDER_EVENT_QUEUE$1 = PH_PROVIDER_EVENT_QUEUE;
typedef PPH_PROVIDER_EVENT_QUEUE = ffi.Pointer<PH_PROVIDER_EVENT_QUEUE>;
typedef PPH_CM_POST_SORT_FUNCTIONFunction = LONG Function(
    LONG Result, PVOID Node1, PVOID Node2, ffi.UnsignedInt SortOrder);
typedef DartPPH_CM_POST_SORT_FUNCTIONFunction = DartLONG Function(
    DartLONG Result, PVOID Node1, PVOID Node2, PH_SORT_ORDER SortOrder);

/// colmgr
typedef PPH_CM_POST_SORT_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<PPH_CM_POST_SORT_FUNCTIONFunction>>;

/// proctree
typedef PH_PROCESS_NODE$1 = PH_PROCESS_NODE;

/// srvlist
typedef PH_SERVICE_NODE$1 = PH_SERVICE_NODE;

/// netlist
typedef PH_NETWORK_NODE$1 = PH_NETWORK_NODE;

/// thrdlist
typedef PH_THREAD_NODE$1 = PH_THREAD_NODE;

/// modlist
typedef PH_MODULE_NODE$1 = PH_MODULE_NODE;

/// hndllist
enum PH_HANDLE_TREE_MENUITEM {
  PH_HANDLE_TREE_MENUITEM_NONE(0),
  PH_HANDLE_TREE_MENUITEM_HIDE_PROTECTED_HANDLES(1),
  PH_HANDLE_TREE_MENUITEM_HIDE_INHERIT_HANDLES(2),
  PH_HANDLE_TREE_MENUITEM_HIDE_UNNAMED_HANDLES(3),
  PH_HANDLE_TREE_MENUITEM_HIDE_ETW_HANDLES(4),
  PH_HANDLE_TREE_MENUITEM_HIGHLIGHT_PROTECTED_HANDLES(5),
  PH_HANDLE_TREE_MENUITEM_HIGHLIGHT_INHERIT_HANDLES(6),
  PH_HANDLE_TREE_MENUITEM_HANDLESTATS(7),
  PH_HANDLE_TREE_MENUITEM_MAXIMUM(8);

  final int value;
  const PH_HANDLE_TREE_MENUITEM(this.value);

  static PH_HANDLE_TREE_MENUITEM fromValue(int value) => switch (value) {
        0 => PH_HANDLE_TREE_MENUITEM_NONE,
        1 => PH_HANDLE_TREE_MENUITEM_HIDE_PROTECTED_HANDLES,
        2 => PH_HANDLE_TREE_MENUITEM_HIDE_INHERIT_HANDLES,
        3 => PH_HANDLE_TREE_MENUITEM_HIDE_UNNAMED_HANDLES,
        4 => PH_HANDLE_TREE_MENUITEM_HIDE_ETW_HANDLES,
        5 => PH_HANDLE_TREE_MENUITEM_HIGHLIGHT_PROTECTED_HANDLES,
        6 => PH_HANDLE_TREE_MENUITEM_HIGHLIGHT_INHERIT_HANDLES,
        7 => PH_HANDLE_TREE_MENUITEM_HANDLESTATS,
        8 => PH_HANDLE_TREE_MENUITEM_MAXIMUM,
        _ => throw ArgumentError(
            'Unknown value for PH_HANDLE_TREE_MENUITEM: $value'),
      };
}

typedef PH_HANDLE_NODE$1 = PH_HANDLE_NODE;

/// memlist
typedef PH_MEMORY_NODE$1 = PH_MEMORY_NODE;

/// extmgr
enum PH_EM_OBJECT_TYPE {
  EmProcessItemType(0),
  EmProcessNodeType(1),
  EmServiceItemType(2),
  EmServiceNodeType(3),
  EmNetworkItemType(4),
  EmNetworkNodeType(5),
  EmThreadItemType(6),
  EmThreadNodeType(7),
  EmModuleItemType(8),
  EmModuleNodeType(9),
  EmHandleItemType(10),
  EmHandleNodeType(11),
  EmThreadsContextType(12),
  EmModulesContextType(13),
  EmHandlesContextType(14),
  EmThreadProviderType(15),
  EmModuleProviderType(16),
  EmHandleProviderType(17),
  EmMemoryNodeType(18),
  EmMemoryContextType(19),
  EmMaximumObjectType(20);

  final int value;
  const PH_EM_OBJECT_TYPE(this.value);

  static PH_EM_OBJECT_TYPE fromValue(int value) => switch (value) {
        0 => EmProcessItemType,
        1 => EmProcessNodeType,
        2 => EmServiceItemType,
        3 => EmServiceNodeType,
        4 => EmNetworkItemType,
        5 => EmNetworkNodeType,
        6 => EmThreadItemType,
        7 => EmThreadNodeType,
        8 => EmModuleItemType,
        9 => EmModuleNodeType,
        10 => EmHandleItemType,
        11 => EmHandleNodeType,
        12 => EmThreadsContextType,
        13 => EmModulesContextType,
        14 => EmHandlesContextType,
        15 => EmThreadProviderType,
        16 => EmModuleProviderType,
        17 => EmHandleProviderType,
        18 => EmMemoryNodeType,
        19 => EmMemoryContextType,
        20 => EmMaximumObjectType,
        _ => throw ArgumentError('Unknown value for PH_EM_OBJECT_TYPE: $value'),
      };
}

enum PH_EM_OBJECT_OPERATION {
  EmObjectCreate(0),
  EmObjectDelete(1),
  EmMaximumObjectOperation(2);

  final int value;
  const PH_EM_OBJECT_OPERATION(this.value);

  static PH_EM_OBJECT_OPERATION fromValue(int value) => switch (value) {
        0 => EmObjectCreate,
        1 => EmObjectDelete,
        2 => EmMaximumObjectOperation,
        _ => throw ArgumentError(
            'Unknown value for PH_EM_OBJECT_OPERATION: $value'),
      };
}

typedef PPH_EM_OBJECT_CALLBACKFunction = ffi.Void Function(
    PVOID Object, ffi.UnsignedInt ObjectType, PVOID Extension);
typedef DartPPH_EM_OBJECT_CALLBACKFunction = void Function(
    PVOID Object, PH_EM_OBJECT_TYPE ObjectType, PVOID Extension);
typedef PPH_EM_OBJECT_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PPH_EM_OBJECT_CALLBACKFunction>>;

enum PH_MAINWINDOW_CALLBACK_TYPE {
  PH_MAINWINDOW_CALLBACK_TYPE_DESTROY(0),
  PH_MAINWINDOW_CALLBACK_TYPE_SHOW_PROPERTIES(1),
  PH_MAINWINDOW_CALLBACK_TYPE_SAVE_ALL_SETTINGS(2),
  PH_MAINWINDOW_CALLBACK_TYPE_PREPARE_FOR_EARLY_SHUTDOWN(3),
  PH_MAINWINDOW_CALLBACK_TYPE_CANCEL_EARLY_SHUTDOWN(4),
  PH_MAINWINDOW_CALLBACK_TYPE_TOGGLE_VISIBLE(5),
  PH_MAINWINDOW_CALLBACK_TYPE_SHOW_MEMORY_EDITOR(6),
  PH_MAINWINDOW_CALLBACK_TYPE_SHOW_MEMORY_RESULTS(7),
  PH_MAINWINDOW_CALLBACK_TYPE_SELECT_TAB_PAGE(8),
  PH_MAINWINDOW_CALLBACK_TYPE_GET_CALLBACK_LAYOUT_PADDING(9),
  PH_MAINWINDOW_CALLBACK_TYPE_INVALIDATE_LAYOUT_PADDING(10),
  PH_MAINWINDOW_CALLBACK_TYPE_SELECT_PROCESS_NODE(11),
  PH_MAINWINDOW_CALLBACK_TYPE_SELECT_SERVICE_ITEM(12),
  PH_MAINWINDOW_CALLBACK_TYPE_SELECT_NETWORK_ITEM(13),
  PH_MAINWINDOW_CALLBACK_TYPE_UPDATE_FONT(14),
  PH_MAINWINDOW_CALLBACK_TYPE_GET_FONT(15),
  PH_MAINWINDOW_CALLBACK_TYPE_INVOKE(16),
  PH_MAINWINDOW_CALLBACK_TYPE_POST(17),
  PH_MAINWINDOW_CALLBACK_TYPE_REFRESH(18),
  PH_MAINWINDOW_CALLBACK_TYPE_CREATE_TAB_PAGE(19),
  PH_MAINWINDOW_CALLBACK_TYPE_GET_UPDATE_AUTOMATICALLY(20),
  PH_MAINWINDOW_CALLBACK_TYPE_SET_UPDATE_AUTOMATICALLY(21),
  PH_MAINWINDOW_CALLBACK_TYPE_ICON_CLICK(22),
  PH_MAINWINDOW_CALLBACK_TYPE_WINDOW_BASE(23),
  PH_MAINWINDOW_CALLBACK_TYPE_GETWINDOW_PROCEDURE(24),
  PH_MAINWINDOW_CALLBACK_TYPE_SETWINDOW_PROCEDURE(25),
  PH_MAINWINDOW_CALLBACK_TYPE_WINDOW_HANDLE(26),
  PH_MAINWINDOW_CALLBACK_TYPE_VERSION(27),
  PH_MAINWINDOW_CALLBACK_TYPE_PORTABLE(28),
  PH_MAINWINDOW_CALLBACK_TYPE_PAGEINDEX(29),
  PH_MAINWINDOW_CALLBACK_TYPE_WINDOWDPI(30),
  PH_MAINWINDOW_CALLBACK_TYPE_WINDOWNAME(31),
  PH_MAINWINDOW_CALLBACK_TYPE_MAXIMUM(32);

  final int value;
  const PH_MAINWINDOW_CALLBACK_TYPE(this.value);

  static PH_MAINWINDOW_CALLBACK_TYPE fromValue(int value) => switch (value) {
        0 => PH_MAINWINDOW_CALLBACK_TYPE_DESTROY,
        1 => PH_MAINWINDOW_CALLBACK_TYPE_SHOW_PROPERTIES,
        2 => PH_MAINWINDOW_CALLBACK_TYPE_SAVE_ALL_SETTINGS,
        3 => PH_MAINWINDOW_CALLBACK_TYPE_PREPARE_FOR_EARLY_SHUTDOWN,
        4 => PH_MAINWINDOW_CALLBACK_TYPE_CANCEL_EARLY_SHUTDOWN,
        5 => PH_MAINWINDOW_CALLBACK_TYPE_TOGGLE_VISIBLE,
        6 => PH_MAINWINDOW_CALLBACK_TYPE_SHOW_MEMORY_EDITOR,
        7 => PH_MAINWINDOW_CALLBACK_TYPE_SHOW_MEMORY_RESULTS,
        8 => PH_MAINWINDOW_CALLBACK_TYPE_SELECT_TAB_PAGE,
        9 => PH_MAINWINDOW_CALLBACK_TYPE_GET_CALLBACK_LAYOUT_PADDING,
        10 => PH_MAINWINDOW_CALLBACK_TYPE_INVALIDATE_LAYOUT_PADDING,
        11 => PH_MAINWINDOW_CALLBACK_TYPE_SELECT_PROCESS_NODE,
        12 => PH_MAINWINDOW_CALLBACK_TYPE_SELECT_SERVICE_ITEM,
        13 => PH_MAINWINDOW_CALLBACK_TYPE_SELECT_NETWORK_ITEM,
        14 => PH_MAINWINDOW_CALLBACK_TYPE_UPDATE_FONT,
        15 => PH_MAINWINDOW_CALLBACK_TYPE_GET_FONT,
        16 => PH_MAINWINDOW_CALLBACK_TYPE_INVOKE,
        17 => PH_MAINWINDOW_CALLBACK_TYPE_POST,
        18 => PH_MAINWINDOW_CALLBACK_TYPE_REFRESH,
        19 => PH_MAINWINDOW_CALLBACK_TYPE_CREATE_TAB_PAGE,
        20 => PH_MAINWINDOW_CALLBACK_TYPE_GET_UPDATE_AUTOMATICALLY,
        21 => PH_MAINWINDOW_CALLBACK_TYPE_SET_UPDATE_AUTOMATICALLY,
        22 => PH_MAINWINDOW_CALLBACK_TYPE_ICON_CLICK,
        23 => PH_MAINWINDOW_CALLBACK_TYPE_WINDOW_BASE,
        24 => PH_MAINWINDOW_CALLBACK_TYPE_GETWINDOW_PROCEDURE,
        25 => PH_MAINWINDOW_CALLBACK_TYPE_SETWINDOW_PROCEDURE,
        26 => PH_MAINWINDOW_CALLBACK_TYPE_WINDOW_HANDLE,
        27 => PH_MAINWINDOW_CALLBACK_TYPE_VERSION,
        28 => PH_MAINWINDOW_CALLBACK_TYPE_PORTABLE,
        29 => PH_MAINWINDOW_CALLBACK_TYPE_PAGEINDEX,
        30 => PH_MAINWINDOW_CALLBACK_TYPE_WINDOWDPI,
        31 => PH_MAINWINDOW_CALLBACK_TYPE_WINDOWNAME,
        32 => PH_MAINWINDOW_CALLBACK_TYPE_MAXIMUM,
        _ => throw ArgumentError(
            'Unknown value for PH_MAINWINDOW_CALLBACK_TYPE: $value'),
      };
}

final class PH_LAYOUT_PADDING_DATA extends ffi.Struct {
  external RECT Padding;
}

typedef PH_LAYOUT_PADDING_DATA$1 = PH_LAYOUT_PADDING_DATA;
typedef PPH_LAYOUT_PADDING_DATA = ffi.Pointer<PH_LAYOUT_PADDING_DATA>;

enum PH_MAIN_TAB_PAGE_MESSAGE {
  MainTabPageCreate(0),
  MainTabPageDestroy(1),

  /// HWND *Parameter1 (WindowHandle), HWND Parameter2 (ParentWindow)
  MainTabPageCreateWindow(2),

  /// BOOLEAN Parameter1 (Selected)
  MainTabPageSelected(3),

  /// PPH_MAIN_TAB_PAGE_MENU_INFORMATION Parameter1
  MainTabPageInitializeSectionMenuItems(4),
  MainTabPageLoadSettings(5),
  MainTabPageSaveSettings(6),

  /// PPH_MAIN_TAB_PAGE_EXPORT_CONTENT Parameter1
  MainTabPageExportContent(7),

  /// HFONT Parameter1 (Font)
  MainTabPageFontChanged(8),

  /// BOOLEAN Parameter1 (UpdateAutomatically)
  MainTabPageUpdateAutomaticallyChanged(9),
  MainTabPageDpiChanged(10),
  MaxMainTabPageMessage(11);

  final int value;
  const PH_MAIN_TAB_PAGE_MESSAGE(this.value);

  static PH_MAIN_TAB_PAGE_MESSAGE fromValue(int value) => switch (value) {
        0 => MainTabPageCreate,
        1 => MainTabPageDestroy,
        2 => MainTabPageCreateWindow,
        3 => MainTabPageSelected,
        4 => MainTabPageInitializeSectionMenuItems,
        5 => MainTabPageLoadSettings,
        6 => MainTabPageSaveSettings,
        7 => MainTabPageExportContent,
        8 => MainTabPageFontChanged,
        9 => MainTabPageUpdateAutomaticallyChanged,
        10 => MainTabPageDpiChanged,
        11 => MaxMainTabPageMessage,
        _ => throw ArgumentError(
            'Unknown value for PH_MAIN_TAB_PAGE_MESSAGE: $value'),
      };
}

typedef PPH_MAIN_TAB_PAGE = ffi.Pointer<PH_MAIN_TAB_PAGE>;
typedef PPH_MAIN_TAB_PAGE_CALLBACKFunction = BOOLEAN Function(
    PPH_MAIN_TAB_PAGE Page,
    ffi.UnsignedInt Message,
    PVOID Parameter1,
    PVOID Parameter2);
typedef DartPPH_MAIN_TAB_PAGE_CALLBACKFunction = Dartboolean Function(
    PPH_MAIN_TAB_PAGE Page,
    PH_MAIN_TAB_PAGE_MESSAGE Message,
    PVOID Parameter1,
    PVOID Parameter2);
typedef PPH_MAIN_TAB_PAGE_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PPH_MAIN_TAB_PAGE_CALLBACKFunction>>;

final class UnnamedUnion38 extends ffi.Union {
  @ULONG()
  external int StateFlags;
}

final class PH_MAIN_TAB_PAGE extends ffi.Struct {
  /// Public
  external PH_STRINGREF$1 Name;

  @ULONG()
  external int Flags;

  external PPH_MAIN_TAB_PAGE_CALLBACK Callback;

  external PVOID Context;

  @LONG()
  external int Index;

  external UnnamedUnion38 unnamed;

  @ffi.Array.multi([2])
  external ffi.Array<PVOID> Reserved;
}

final class PH_MAIN_TAB_PAGE_EXPORT_CONTENT extends ffi.Struct {
  external PPH_FILE_STREAM FileStream;

  @ULONG()
  external int Mode;
}

typedef PH_MAIN_TAB_PAGE_EXPORT_CONTENT$1 = PH_MAIN_TAB_PAGE_EXPORT_CONTENT;
typedef PPH_MAIN_TAB_PAGE_EXPORT_CONTENT
    = ffi.Pointer<PH_MAIN_TAB_PAGE_EXPORT_CONTENT>;

final class PH_MAIN_TAB_PAGE_MENU_INFORMATION extends ffi.Struct {
  external PPH_EMENU_ITEM Menu;

  @ULONG()
  external int StartIndex;
}

typedef PH_MAIN_TAB_PAGE_MENU_INFORMATION$1 = PH_MAIN_TAB_PAGE_MENU_INFORMATION;
typedef PPH_MAIN_TAB_PAGE_MENU_INFORMATION
    = ffi.Pointer<PH_MAIN_TAB_PAGE_MENU_INFORMATION>;
typedef PH_MAIN_TAB_PAGE$1 = PH_MAIN_TAB_PAGE;

final class PH_PLUGIN extends ffi.Struct {
  /// Public
  external PH_AVL_LINKS$1 Links;

  external PVOID DllBase;
}

typedef PPH_PLUGIN = ffi.Pointer<PH_PLUGIN>;
typedef PPH_NF_BEGIN_BITMAPFunction = ffi.Void Function(
    PULONG Width,
    PULONG Height,
    ffi.Pointer<HBITMAP> Bitmap,
    ffi.Pointer<PVOID> Bits,
    ffi.Pointer<HDC> Hdc,
    ffi.Pointer<HBITMAP> OldBitmap);
typedef DartPPH_NF_BEGIN_BITMAPFunction = void Function(
    PULONG Width,
    PULONG Height,
    ffi.Pointer<HBITMAP> Bitmap,
    ffi.Pointer<PVOID> Bits,
    ffi.Pointer<HDC> Hdc,
    ffi.Pointer<HBITMAP> OldBitmap);
typedef PPH_NF_BEGIN_BITMAP
    = ffi.Pointer<ffi.NativeFunction<PPH_NF_BEGIN_BITMAPFunction>>;

final class PH_NF_POINTERS extends ffi.Struct {
  external PPH_NF_BEGIN_BITMAP BeginBitmap;
}

typedef PPH_NF_POINTERS = ffi.Pointer<PH_NF_POINTERS>;

final class PH_NF_ICON extends ffi.Struct {
  /// Public
  external PPH_PLUGIN Plugin;

  @ULONG()
  external int SubId;

  external PVOID Context;

  external PPH_NF_POINTERS Pointers;
}

/// notifico
typedef PH_NF_ICON$1 = PH_NF_ICON;
typedef PPH_NF_ICON = ffi.Pointer<PH_NF_ICON>;
typedef PPH_NF_UPDATE_REGISTERED_ICONFunction = ffi.Void Function(
    PPH_NF_ICON Icon);
typedef DartPPH_NF_UPDATE_REGISTERED_ICONFunction = void Function(
    PPH_NF_ICON Icon);
typedef PPH_NF_UPDATE_REGISTERED_ICON
    = ffi.Pointer<ffi.NativeFunction<PPH_NF_UPDATE_REGISTERED_ICONFunction>>;
typedef PH_NF_POINTERS$1 = PH_NF_POINTERS;
typedef PPH_NF_ICON_UPDATE_CALLBACKFunction = ffi.Void Function(
    PPH_NF_ICON Icon,
    ffi.Pointer<PVOID> NewIconOrBitmap,
    PULONG Flags,
    ffi.Pointer<PPH_STRING> NewText,
    PVOID Context);
typedef DartPPH_NF_ICON_UPDATE_CALLBACKFunction = void Function(
    PPH_NF_ICON Icon,
    ffi.Pointer<PVOID> NewIconOrBitmap,
    PULONG Flags,
    ffi.Pointer<PPH_STRING> NewText,
    PVOID Context);
typedef PPH_NF_ICON_UPDATE_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PPH_NF_ICON_UPDATE_CALLBACKFunction>>;
typedef PPH_NF_ICON_MESSAGE_CALLBACKFunction = BOOLEAN Function(
    PPH_NF_ICON Icon, ULONG_PTR WParam, ULONG_PTR LParam, PVOID Context);
typedef DartPPH_NF_ICON_MESSAGE_CALLBACKFunction = Dartboolean Function(
    PPH_NF_ICON Icon,
    DartULONG_PTR WParam,
    DartULONG_PTR LParam,
    PVOID Context);
typedef PPH_NF_ICON_MESSAGE_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PPH_NF_ICON_MESSAGE_CALLBACKFunction>>;

final class PH_NF_MSG_SHOWMINIINFOSECTION_DATA extends ffi.Struct {
  /// NULL to leave unchanged
  external PWSTR SectionName;
}

typedef PH_NF_MSG_SHOWMINIINFOSECTION_DATA$1
    = PH_NF_MSG_SHOWMINIINFOSECTION_DATA;
typedef PPH_NF_MSG_SHOWMINIINFOSECTION_DATA
    = ffi.Pointer<PH_NF_MSG_SHOWMINIINFOSECTION_DATA>;
typedef PH_PLUGIN$1 = PH_PLUGIN;

/// Public registration data
final class PH_NF_ICON_REGISTRATION_DATA extends ffi.Struct {
  external PPH_NF_ICON_UPDATE_CALLBACK UpdateCallback;

  external PPH_NF_ICON_MESSAGE_CALLBACK MessageCallback;
}

/// Public registration data
typedef PH_NF_ICON_REGISTRATION_DATA$1 = PH_NF_ICON_REGISTRATION_DATA;
typedef PPH_NF_ICON_REGISTRATION_DATA
    = ffi.Pointer<PH_NF_ICON_REGISTRATION_DATA>;

/// sysinfo
enum PH_SYSINFO_VIEW_TYPE {
  SysInfoSummaryView(0),
  SysInfoSectionView(1);

  final int value;
  const PH_SYSINFO_VIEW_TYPE(this.value);

  static PH_SYSINFO_VIEW_TYPE fromValue(int value) => switch (value) {
        0 => SysInfoSummaryView,
        1 => SysInfoSectionView,
        _ =>
          throw ArgumentError('Unknown value for PH_SYSINFO_VIEW_TYPE: $value'),
      };
}

typedef PPH_SYSINFO_COLOR_SETUP_FUNCTIONFunction = ffi.Void Function(
    PPH_GRAPH_DRAW_INFO DrawInfo,
    COLORREF Color1,
    COLORREF Color2,
    LONG WindowDpi);
typedef DartPPH_SYSINFO_COLOR_SETUP_FUNCTIONFunction = void Function(
    PPH_GRAPH_DRAW_INFO DrawInfo,
    DartDWORD Color1,
    DartDWORD Color2,
    DartLONG WindowDpi);
typedef PPH_SYSINFO_COLOR_SETUP_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<PPH_SYSINFO_COLOR_SETUP_FUNCTIONFunction>>;

final class PH_SYSINFO_PARAMETERS extends ffi.Struct {
  external HWND SysInfoWindowHandle;

  external HWND ContainerWindowHandle;

  external HFONT Font;

  external HFONT MediumFont;

  external HFONT LargeFont;

  @ULONG()
  external int FontHeight;

  @ULONG()
  external int FontAverageWidth;

  @ULONG()
  external int MediumFontHeight;

  @ULONG()
  external int MediumFontAverageWidth;

  @COLORREF()
  external int GraphBackColor;

  @COLORREF()
  external int PanelForeColor;

  external PPH_SYSINFO_COLOR_SETUP_FUNCTION ColorSetupFunction;

  @ULONG()
  external int MinimumGraphHeight;

  @ULONG()
  external int SectionViewGraphHeight;

  @LONG()
  external int PanelWidth;

  @LONG()
  external int WindowDpi;
}

typedef PH_SYSINFO_PARAMETERS$1 = PH_SYSINFO_PARAMETERS;
typedef PPH_SYSINFO_PARAMETERS = ffi.Pointer<PH_SYSINFO_PARAMETERS>;

enum PH_SYSINFO_SECTION_MESSAGE {
  SysInfoCreate(0),
  SysInfoDestroy(1),
  SysInfoTick(2),

  /// PH_SYSINFO_VIEW_TYPE Parameter1, PPH_SYSINFO_SECTION Parameter2
  SysInfoViewChanging(3),

  /// PPH_SYSINFO_CREATE_DIALOG Parameter1
  SysInfoCreateDialog(4),

  /// PPH_GRAPH_DRAW_INFO Parameter1
  SysInfoGraphGetDrawInfo(5),

  /// PPH_SYSINFO_GRAPH_GET_TOOLTIP_TEXT Parameter1
  SysInfoGraphGetTooltipText(6),

  /// PPH_SYSINFO_DRAW_PANEL Parameter1
  SysInfoGraphDrawPanel(7),

  /// ULONG Parameter1
  SysInfoDpiChanged(8),
  MaxSysInfoMessage(9);

  final int value;
  const PH_SYSINFO_SECTION_MESSAGE(this.value);

  static PH_SYSINFO_SECTION_MESSAGE fromValue(int value) => switch (value) {
        0 => SysInfoCreate,
        1 => SysInfoDestroy,
        2 => SysInfoTick,
        3 => SysInfoViewChanging,
        4 => SysInfoCreateDialog,
        5 => SysInfoGraphGetDrawInfo,
        6 => SysInfoGraphGetTooltipText,
        7 => SysInfoGraphDrawPanel,
        8 => SysInfoDpiChanged,
        9 => MaxSysInfoMessage,
        _ => throw ArgumentError(
            'Unknown value for PH_SYSINFO_SECTION_MESSAGE: $value'),
      };
}

typedef PPH_SYSINFO_SECTION = ffi.Pointer<PH_SYSINFO_SECTION>;
typedef PPH_SYSINFO_SECTION_CALLBACKFunction = BOOLEAN Function(
    PPH_SYSINFO_SECTION Section,
    ffi.UnsignedInt Message,
    PVOID Parameter1,
    PVOID Parameter2);
typedef DartPPH_SYSINFO_SECTION_CALLBACKFunction = Dartboolean Function(
    PPH_SYSINFO_SECTION Section,
    PH_SYSINFO_SECTION_MESSAGE Message,
    PVOID Parameter1,
    PVOID Parameter2);
typedef PPH_SYSINFO_SECTION_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PPH_SYSINFO_SECTION_CALLBACKFunction>>;

final class PH_SYSINFO_SECTION extends ffi.Struct {
  /// Initialization
  external PH_STRINGREF$1 Name;

  @ULONG()
  external int Flags;

  external PPH_SYSINFO_SECTION_CALLBACK Callback;

  external PVOID Context;

  @ffi.Array.multi([3])
  external ffi.Array<PVOID> Reserved;

  /// State
  external HWND GraphHandle;

  external PH_GRAPH_STATE$1 GraphState;

  external PPH_SYSINFO_PARAMETERS Parameters;

  @ffi.Array.multi([3])
  external ffi.Array<PVOID> Reserved2;
}

typedef INT_PTR = ffi.LongLong;
typedef DartINT_PTR = int;
typedef DLGPROCFunction = INT_PTR Function(HWND, UINT, WPARAM, LPARAM);
typedef DartDLGPROCFunction = DartINT_PTR Function(
    HWND, DartUINT, DartUINT_PTR, DartLONG_PTR);
typedef DLGPROC = ffi.Pointer<ffi.NativeFunction<DLGPROCFunction>>;

final class PH_SYSINFO_CREATE_DIALOG extends ffi.Struct {
  @BOOLEAN()
  external int CustomCreate;

  /// Parameters for default create
  external PVOID Instance;

  external PWSTR Template;

  external DLGPROC DialogProc;

  external PVOID Parameter;
}

typedef PH_SYSINFO_CREATE_DIALOG$1 = PH_SYSINFO_CREATE_DIALOG;
typedef PPH_SYSINFO_CREATE_DIALOG = ffi.Pointer<PH_SYSINFO_CREATE_DIALOG>;

final class PH_SYSINFO_GRAPH_GET_TOOLTIP_TEXT extends ffi.Struct {
  @ULONG()
  external int Index;

  external PH_STRINGREF$1 Text;
}

typedef PH_SYSINFO_GRAPH_GET_TOOLTIP_TEXT$1 = PH_SYSINFO_GRAPH_GET_TOOLTIP_TEXT;
typedef PPH_SYSINFO_GRAPH_GET_TOOLTIP_TEXT
    = ffi.Pointer<PH_SYSINFO_GRAPH_GET_TOOLTIP_TEXT>;

final class PH_SYSINFO_DRAW_PANEL extends ffi.Struct {
  external HDC hdc;

  external RECT Rect;

  @BOOLEAN()
  external int CustomDraw;

  /// Parameters for default draw
  external PPH_STRING Title;

  external PPH_STRING SubTitle;

  external PPH_STRING SubTitleOverflow;
}

typedef PH_SYSINFO_DRAW_PANEL$1 = PH_SYSINFO_DRAW_PANEL;
typedef PPH_SYSINFO_DRAW_PANEL = ffi.Pointer<PH_SYSINFO_DRAW_PANEL>;
typedef PH_SYSINFO_SECTION$1 = PH_SYSINFO_SECTION;

/// procgrp
final class PH_PROCESS_GROUP extends ffi.Struct {
  /// An element of Processes (no extra reference added)
  external PPH_PROCESS_ITEM Representative;

  /// List of PPH_PROCESS_ITEM
  external PPH_LIST Processes;

  /// Window handle of representative
  external HWND WindowHandle;
}

/// procgrp
typedef PH_PROCESS_GROUP$1 = PH_PROCESS_GROUP;
typedef PPH_PROCESS_GROUP = ffi.Pointer<PH_PROCESS_GROUP>;

/// Section
typedef PPH_MINIINFO_SECTION = ffi.Pointer<PH_MINIINFO_SECTION>;

enum PH_MINIINFO_SECTION_MESSAGE {
  MiniInfoCreate(0),
  MiniInfoDestroy(1),
  MiniInfoTick(2),

  /// PPH_MINIINFO_SECTION Parameter1
  MiniInfoSectionChanging(3),

  /// BOOLEAN Parameter1 (Showing)
  MiniInfoShowing(4),

  /// PPH_MINIINFO_CREATE_DIALOG Parameter1
  MiniInfoCreateDialog(5),
  MaxMiniInfoMessage(6);

  final int value;
  const PH_MINIINFO_SECTION_MESSAGE(this.value);

  static PH_MINIINFO_SECTION_MESSAGE fromValue(int value) => switch (value) {
        0 => MiniInfoCreate,
        1 => MiniInfoDestroy,
        2 => MiniInfoTick,
        3 => MiniInfoSectionChanging,
        4 => MiniInfoShowing,
        5 => MiniInfoCreateDialog,
        6 => MaxMiniInfoMessage,
        _ => throw ArgumentError(
            'Unknown value for PH_MINIINFO_SECTION_MESSAGE: $value'),
      };
}

typedef PPH_MINIINFO_SECTION_CALLBACKFunction = BOOLEAN Function(
    PPH_MINIINFO_SECTION Section,
    ffi.UnsignedInt Message,
    PVOID Parameter1,
    PVOID Parameter2);
typedef DartPPH_MINIINFO_SECTION_CALLBACKFunction = Dartboolean Function(
    PPH_MINIINFO_SECTION Section,
    PH_MINIINFO_SECTION_MESSAGE Message,
    PVOID Parameter1,
    PVOID Parameter2);
typedef PPH_MINIINFO_SECTION_CALLBACK
    = ffi.Pointer<ffi.NativeFunction<PPH_MINIINFO_SECTION_CALLBACKFunction>>;
typedef PPH_MINIINFO_SET_SECTION_TEXTFunction = ffi.Void Function(
    PPH_MINIINFO_SECTION Section, PPH_STRING Text);
typedef DartPPH_MINIINFO_SET_SECTION_TEXTFunction = void Function(
    PPH_MINIINFO_SECTION Section, PPH_STRING Text);
typedef PPH_MINIINFO_SET_SECTION_TEXT
    = ffi.Pointer<ffi.NativeFunction<PPH_MINIINFO_SET_SECTION_TEXTFunction>>;

final class PH_MINIINFO_PARAMETERS extends ffi.Struct {
  external HWND ContainerWindowHandle;

  external HWND MiniInfoWindowHandle;

  external HFONT Font;

  external HFONT MediumFont;

  @ULONG()
  external int FontHeight;

  @ULONG()
  external int FontAverageWidth;

  @ULONG()
  external int MediumFontHeight;

  @ULONG()
  external int MediumFontAverageWidth;

  external PPH_MINIINFO_SET_SECTION_TEXT SetSectionText;
}

typedef PPH_MINIINFO_PARAMETERS = ffi.Pointer<PH_MINIINFO_PARAMETERS>;

final class PH_MINIINFO_SECTION extends ffi.Struct {
  /// Initialization
  external PH_STRINGREF$1 Name;

  @ULONG()
  external int Flags;

  external PPH_MINIINFO_SECTION_CALLBACK Callback;

  external PVOID Context;

  @ffi.Array.multi([3])
  external ffi.Array<PVOID> Reserved1;

  external PPH_MINIINFO_PARAMETERS Parameters;

  @ffi.Array.multi([3])
  external ffi.Array<PVOID> Reserved2;
}

/// Section
typedef PH_MINIINFO_SECTION$1 = PH_MINIINFO_SECTION;
typedef PH_MINIINFO_PARAMETERS$1 = PH_MINIINFO_PARAMETERS;

final class PH_MINIINFO_CREATE_DIALOG extends ffi.Struct {
  @BOOLEAN()
  external int CustomCreate;

  /// Parameters for default create
  external PVOID Instance;

  external PWSTR Template;

  external DLGPROC DialogProc;

  external PVOID Parameter;
}

typedef PH_MINIINFO_CREATE_DIALOG$1 = PH_MINIINFO_CREATE_DIALOG;
typedef PPH_MINIINFO_CREATE_DIALOG = ffi.Pointer<PH_MINIINFO_CREATE_DIALOG>;

/// List section
enum PH_MINIINFO_LIST_SECTION_MESSAGE {
  MiListSectionCreate(0),
  MiListSectionDestroy(1),
  MiListSectionTick(2),

  /// BOOLEAN Parameter1 (Showing)
  MiListSectionShowing(3),

  /// HWND Parameter1 (DialogHandle)
  MiListSectionDialogCreated(4),

  /// PPH_MINIINFO_LIST_SECTION_SORT_LIST Parameter1
  MiListSectionSortProcessList(5),

  /// PPH_MINIINFO_LIST_SECTION_ASSIGN_SORT_DATA Parameter1
  MiListSectionAssignSortData(6),

  /// PPH_MINIINFO_LIST_SECTION_SORT_LIST Parameter1
  MiListSectionSortGroupList(7),

  /// PPH_MINIINFO_LIST_SECTION_GET_TITLE_TEXT Parameter1
  MiListSectionGetTitleText(8),

  /// PPH_MINIINFO_LIST_SECTION_GET_USAGE_TEXT Parameter1
  MiListSectionGetUsageText(9),

  /// PPH_MINIINFO_LIST_SECTION_MENU_INFORMATION Parameter1
  MiListSectionInitializeContextMenu(10),

  /// PPH_MINIINFO_LIST_SECTION_MENU_INFORMATION Parameter1
  MiListSectionHandleContextMenu(11),
  MaxMiListSectionMessage(12);

  final int value;
  const PH_MINIINFO_LIST_SECTION_MESSAGE(this.value);

  static PH_MINIINFO_LIST_SECTION_MESSAGE fromValue(int value) =>
      switch (value) {
        0 => MiListSectionCreate,
        1 => MiListSectionDestroy,
        2 => MiListSectionTick,
        3 => MiListSectionShowing,
        4 => MiListSectionDialogCreated,
        5 => MiListSectionSortProcessList,
        6 => MiListSectionAssignSortData,
        7 => MiListSectionSortGroupList,
        8 => MiListSectionGetTitleText,
        9 => MiListSectionGetUsageText,
        10 => MiListSectionInitializeContextMenu,
        11 => MiListSectionHandleContextMenu,
        12 => MaxMiListSectionMessage,
        _ => throw ArgumentError(
            'Unknown value for PH_MINIINFO_LIST_SECTION_MESSAGE: $value'),
      };
}

typedef PPH_MINIINFO_LIST_SECTION = ffi.Pointer<PH_MINIINFO_LIST_SECTION>;
typedef PPH_MINIINFO_LIST_SECTION_CALLBACKFunction = BOOLEAN Function(
    PPH_MINIINFO_LIST_SECTION ListSection,
    ffi.UnsignedInt Message,
    PVOID Parameter1,
    PVOID Parameter2);
typedef DartPPH_MINIINFO_LIST_SECTION_CALLBACKFunction = Dartboolean Function(
    PPH_MINIINFO_LIST_SECTION ListSection,
    PH_MINIINFO_LIST_SECTION_MESSAGE Message,
    PVOID Parameter1,
    PVOID Parameter2);
typedef PPH_MINIINFO_LIST_SECTION_CALLBACK = ffi
    .Pointer<ffi.NativeFunction<PPH_MINIINFO_LIST_SECTION_CALLBACKFunction>>;

final class PH_MINIINFO_LIST_SECTION extends ffi.Struct {
  /// State
  external PPH_MINIINFO_SECTION Section;

  /// State
  external HWND DialogHandle;

  /// State
  external HWND TreeNewHandle;

  /// Initialization
  external PVOID Context;

  /// Initialization
  external PPH_MINIINFO_LIST_SECTION_CALLBACK Callback;
}

typedef PH_MINIINFO_LIST_SECTION$1 = PH_MINIINFO_LIST_SECTION;

/// The list section performs the following steps when constructing the list of process groups:
/// 1. MiListSectionSortProcessList is sent in order to sort the process list.
/// 2. A small number of process groups is created from the first few processes in the sorted list (typically high
/// resource consumers).
/// 3. MiListSectionAssignSortData is sent for each process group so that the user can assign custom sort data to
/// each process group.
/// 4. MiListSectionSortGroupList is sent in order to ensure that the process groups are correctly sorted by resource
/// usage.
/// The user also has access to the sort data when handling MiListSectionGetTitleText and MiListSectionGetUsageText.
final class PH_MINIINFO_LIST_SECTION_SORT_DATA extends ffi.Opaque {}

/// The list section performs the following steps when constructing the list of process groups:
/// 1. MiListSectionSortProcessList is sent in order to sort the process list.
/// 2. A small number of process groups is created from the first few processes in the sorted list (typically high
/// resource consumers).
/// 3. MiListSectionAssignSortData is sent for each process group so that the user can assign custom sort data to
/// each process group.
/// 4. MiListSectionSortGroupList is sent in order to ensure that the process groups are correctly sorted by resource
/// usage.
/// The user also has access to the sort data when handling MiListSectionGetTitleText and MiListSectionGetUsageText.
typedef PH_MINIINFO_LIST_SECTION_SORT_DATA$1
    = PH_MINIINFO_LIST_SECTION_SORT_DATA;
typedef PPH_MINIINFO_LIST_SECTION_SORT_DATA
    = ffi.Pointer<PH_MINIINFO_LIST_SECTION_SORT_DATA>;

final class PH_MINIINFO_LIST_SECTION_ASSIGN_SORT_DATA extends ffi.Struct {
  external PPH_PROCESS_GROUP ProcessGroup;

  external PPH_MINIINFO_LIST_SECTION_SORT_DATA SortData;
}

typedef PH_MINIINFO_LIST_SECTION_ASSIGN_SORT_DATA$1
    = PH_MINIINFO_LIST_SECTION_ASSIGN_SORT_DATA;
typedef PPH_MINIINFO_LIST_SECTION_ASSIGN_SORT_DATA
    = ffi.Pointer<PH_MINIINFO_LIST_SECTION_ASSIGN_SORT_DATA>;

final class PH_MINIINFO_LIST_SECTION_SORT_LIST extends ffi.Struct {
  /// MiListSectionSortProcessList: List of PPH_PROCESS_NODE
  /// MiListSectionSortGroupList: List of PPH_MINIINFO_LIST_SECTION_SORT_DATA
  external PPH_LIST List;
}

typedef PH_MINIINFO_LIST_SECTION_SORT_LIST$1
    = PH_MINIINFO_LIST_SECTION_SORT_LIST;
typedef PPH_MINIINFO_LIST_SECTION_SORT_LIST
    = ffi.Pointer<PH_MINIINFO_LIST_SECTION_SORT_LIST>;

final class PH_MINIINFO_LIST_SECTION_GET_TITLE_TEXT extends ffi.Struct {
  external PPH_PROCESS_GROUP ProcessGroup;

  external PPH_MINIINFO_LIST_SECTION_SORT_DATA SortData;

  /// Top line (may already contain a string)
  external PPH_STRING Title;

  /// Bottom line (may already contain a string)
  external PPH_STRING Subtitle;

  @COLORREF()
  external int TitleColor;

  @COLORREF()
  external int SubtitleColor;
}

typedef PH_MINIINFO_LIST_SECTION_GET_TITLE_TEXT$1
    = PH_MINIINFO_LIST_SECTION_GET_TITLE_TEXT;
typedef PPH_MINIINFO_LIST_SECTION_GET_TITLE_TEXT
    = ffi.Pointer<PH_MINIINFO_LIST_SECTION_GET_TITLE_TEXT>;

final class PH_MINIINFO_LIST_SECTION_GET_USAGE_TEXT extends ffi.Struct {
  external PPH_PROCESS_GROUP ProcessGroup;

  external PPH_MINIINFO_LIST_SECTION_SORT_DATA SortData;

  /// Top line
  external PPH_STRING Line1;

  /// Bottom line
  external PPH_STRING Line2;

  @COLORREF()
  external int Line1Color;

  @COLORREF()
  external int Line2Color;
}

typedef PH_MINIINFO_LIST_SECTION_GET_USAGE_TEXT$1
    = PH_MINIINFO_LIST_SECTION_GET_USAGE_TEXT;
typedef PPH_MINIINFO_LIST_SECTION_GET_USAGE_TEXT
    = ffi.Pointer<PH_MINIINFO_LIST_SECTION_GET_USAGE_TEXT>;

final class PH_MINIINFO_LIST_SECTION_MENU_INFORMATION extends ffi.Struct {
  external PPH_PROCESS_GROUP ProcessGroup;

  external PPH_MINIINFO_LIST_SECTION_SORT_DATA SortData;

  external PPH_TREENEW_CONTEXT_MENU ContextMenu;

  external PPH_EMENU_ITEM SelectedItem;
}

typedef PH_MINIINFO_LIST_SECTION_MENU_INFORMATION$1
    = PH_MINIINFO_LIST_SECTION_MENU_INFORMATION;
typedef PPH_MINIINFO_LIST_SECTION_MENU_INFORMATION
    = ffi.Pointer<PH_MINIINFO_LIST_SECTION_MENU_INFORMATION>;

/// Callbacks
enum PH_GENERAL_CALLBACK {
  /// INT ShowCommand [main thread]
  GeneralCallbackMainWindowShowing(0),

  /// ULONG RunId [main thread]
  GeneralCallbackProcessesUpdated(1),

  /// PPH_PLUGIN_GET_HIGHLIGHTING_COLOR Data [main thread]
  GeneralCallbackGetProcessHighlightingColor(2),

  /// PPH_PLUGIN_GET_TOOLTIP_TEXT Data [main thread]
  GeneralCallbackGetProcessTooltipText(3),

  /// PPH_PLUGIN_PROCESS_PROPCONTEXT Data [properties thread]
  GeneralCallbackProcessPropertiesInitializing(4),

  /// PPH_PLUGIN_MENU_INFORMATION Data [main thread]
  GeneralCallbackMainMenuInitializing(5),

  /// PPH_PLUGIN_NOTIFY_EVENT Data [main thread]
  GeneralCallbackNotifyEvent(6),

  /// PPH_PLUGIN_OBJECT_PROPERTIES Data [properties thread]
  GeneralCallbackServicePropertiesInitializing(7),

  /// PPH_PLUGIN_OBJECT_PROPERTIES Data [properties thread]
  GeneralCallbackHandlePropertiesInitializing(8),

  /// PPH_PLUGIN_MENU_INFORMATION Data [main thread]
  GeneralCallbackProcessMenuInitializing(9),

  /// PPH_PLUGIN_MENU_INFORMATION Data [main thread]
  GeneralCallbackServiceMenuInitializing(10),

  /// PPH_PLUGIN_MENU_INFORMATION Data [main thread]
  GeneralCallbackNetworkMenuInitializing(11),

  /// PPH_PLUGIN_MENU_INFORMATION Data [main thread]
  GeneralCallbackIconMenuInitializing(12),

  /// PPH_PLUGIN_MENU_INFORMATION Data [properties thread]
  GeneralCallbackThreadMenuInitializing(13),

  /// PPH_PLUGIN_MENU_INFORMATION Data [properties thread]
  GeneralCallbackModuleMenuInitializing(14),

  /// PPH_PLUGIN_MENU_INFORMATION Data [properties thread]
  GeneralCallbackMemoryMenuInitializing(15),

  /// PPH_PLUGIN_MENU_INFORMATION Data [properties thread]
  GeneralCallbackHandleMenuInitializing(16),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [main thread]
  GeneralCallbackProcessTreeNewInitializing(17),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [main thread]
  GeneralCallbackServiceTreeNewInitializing(18),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [main thread]
  GeneralCallbackNetworkTreeNewInitializing(19),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
  GeneralCallbackModuleTreeNewInitializing(20),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
  GeneralCallbackModuleTreeNewUninitializing(21),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
  GeneralCallbackThreadTreeNewInitializing(22),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
  GeneralCallbackThreadTreeNewUninitializing(23),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
  GeneralCallbackHandleTreeNewInitializing(24),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
  GeneralCallbackHandleTreeNewUninitializing(25),

  /// PPH_PLUGIN_THREAD_STACK_CONTROL Data [properties thread]
  GeneralCallbackThreadStackControl(26),

  /// PPH_PLUGIN_SYSINFO_POINTERS Data [system information thread]
  GeneralCallbackSystemInformationInitializing(27),

  /// INT NewIndex [main thread]
  GeneralCallbackMainWindowTabChanged(28),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
  GeneralCallbackMemoryTreeNewInitializing(29),

  /// PPH_PLUGIN_TREENEW_INFORMATION Data [properties thread]
  GeneralCallbackMemoryTreeNewUninitializing(30),

  /// PPH_PLUGIN_MEMORY_ITEM_LIST_CONTROL Data [properties thread]
  GeneralCallbackMemoryItemListControl(31),

  /// PPH_PLUGIN_MINIINFO_POINTERS Data [main thread]
  GeneralCallbackMiniInformationInitializing(32),

  /// PPH_PLUGIN_MENU_INFORMATION Data [main thread]
  GeneralCallbackMiListSectionMenuInitializing(33),

  /// PH_PLUGIN_OPTIONS_POINTERS Data [main thread]
  GeneralCallbackOptionsWindowInitializing(34),

  /// PPH_PLUGIN_HANDLE_PROPERTIES_WINDOW_CONTEXT Data [properties thread]
  GeneralCallbackHandlePropertiesWindowInitialized(35),

  /// PPH_PLUGIN_HANDLE_PROPERTIES_WINDOW_CONTEXT Data [properties thread]
  GeneralCallbackHandlePropertiesWindowUninitializing(36),

  /// [process provider thread]
  GeneralCallbackProcessProviderAddedEvent(37),

  /// [process provider thread]
  GeneralCallbackProcessProviderModifiedEvent(38),

  /// [process provider thread]
  GeneralCallbackProcessProviderRemovedEvent(39),

  /// PPH_PROCESS_PROVIDER_UPDATED_EVENT [process provider thread]
  GeneralCallbackProcessProviderUpdatedEvent(40),

  /// [service provider thread]
  GeneralCallbackServiceProviderAddedEvent(41),

  /// [service provider thread]
  GeneralCallbackServiceProviderModifiedEvent(42),

  /// [service provider thread]
  GeneralCallbackServiceProviderRemovedEvent(43),

  /// [service provider thread]
  GeneralCallbackServiceProviderUpdatedEvent(44),

  /// [network provider thread]
  GeneralCallbackNetworkProviderAddedEvent(45),

  /// [network provider thread]
  GeneralCallbackNetworkProviderModifiedEvent(46),

  /// [network provider thread]
  GeneralCallbackNetworkProviderRemovedEvent(47),

  /// [network provider thread]
  GeneralCallbackNetworkProviderUpdatedEvent(48),

  /// [multiple provider threads]
  GeneralCallbackLoggedEvent(49),

  /// [device provider thread]
  GeneralCallbackDeviceNotificationEvent(50),

  /// [work queue thread]
  GeneralCallbackTrayIconsInitializing(51),
  GeneralCallbackTrayIconsUpdatedEvent(52),
  GeneralCallbackWindowNotifyEvent(53),
  GeneralCallbackProcessStatsNotifyEvent(54),
  GeneralCallbackSettingsUpdated(55),
  GeneralCallbackDangerousProcess(56),
  GeneralCallbackUpdateAutomatically(57),
  GeneralCallbackMaximum(58);

  final int value;
  const PH_GENERAL_CALLBACK(this.value);

  static PH_GENERAL_CALLBACK fromValue(int value) => switch (value) {
        0 => GeneralCallbackMainWindowShowing,
        1 => GeneralCallbackProcessesUpdated,
        2 => GeneralCallbackGetProcessHighlightingColor,
        3 => GeneralCallbackGetProcessTooltipText,
        4 => GeneralCallbackProcessPropertiesInitializing,
        5 => GeneralCallbackMainMenuInitializing,
        6 => GeneralCallbackNotifyEvent,
        7 => GeneralCallbackServicePropertiesInitializing,
        8 => GeneralCallbackHandlePropertiesInitializing,
        9 => GeneralCallbackProcessMenuInitializing,
        10 => GeneralCallbackServiceMenuInitializing,
        11 => GeneralCallbackNetworkMenuInitializing,
        12 => GeneralCallbackIconMenuInitializing,
        13 => GeneralCallbackThreadMenuInitializing,
        14 => GeneralCallbackModuleMenuInitializing,
        15 => GeneralCallbackMemoryMenuInitializing,
        16 => GeneralCallbackHandleMenuInitializing,
        17 => GeneralCallbackProcessTreeNewInitializing,
        18 => GeneralCallbackServiceTreeNewInitializing,
        19 => GeneralCallbackNetworkTreeNewInitializing,
        20 => GeneralCallbackModuleTreeNewInitializing,
        21 => GeneralCallbackModuleTreeNewUninitializing,
        22 => GeneralCallbackThreadTreeNewInitializing,
        23 => GeneralCallbackThreadTreeNewUninitializing,
        24 => GeneralCallbackHandleTreeNewInitializing,
        25 => GeneralCallbackHandleTreeNewUninitializing,
        26 => GeneralCallbackThreadStackControl,
        27 => GeneralCallbackSystemInformationInitializing,
        28 => GeneralCallbackMainWindowTabChanged,
        29 => GeneralCallbackMemoryTreeNewInitializing,
        30 => GeneralCallbackMemoryTreeNewUninitializing,
        31 => GeneralCallbackMemoryItemListControl,
        32 => GeneralCallbackMiniInformationInitializing,
        33 => GeneralCallbackMiListSectionMenuInitializing,
        34 => GeneralCallbackOptionsWindowInitializing,
        35 => GeneralCallbackHandlePropertiesWindowInitialized,
        36 => GeneralCallbackHandlePropertiesWindowUninitializing,
        37 => GeneralCallbackProcessProviderAddedEvent,
        38 => GeneralCallbackProcessProviderModifiedEvent,
        39 => GeneralCallbackProcessProviderRemovedEvent,
        40 => GeneralCallbackProcessProviderUpdatedEvent,
        41 => GeneralCallbackServiceProviderAddedEvent,
        42 => GeneralCallbackServiceProviderModifiedEvent,
        43 => GeneralCallbackServiceProviderRemovedEvent,
        44 => GeneralCallbackServiceProviderUpdatedEvent,
        45 => GeneralCallbackNetworkProviderAddedEvent,
        46 => GeneralCallbackNetworkProviderModifiedEvent,
        47 => GeneralCallbackNetworkProviderRemovedEvent,
        48 => GeneralCallbackNetworkProviderUpdatedEvent,
        49 => GeneralCallbackLoggedEvent,
        50 => GeneralCallbackDeviceNotificationEvent,
        51 => GeneralCallbackTrayIconsInitializing,
        52 => GeneralCallbackTrayIconsUpdatedEvent,
        53 => GeneralCallbackWindowNotifyEvent,
        54 => GeneralCallbackProcessStatsNotifyEvent,
        55 => GeneralCallbackSettingsUpdated,
        56 => GeneralCallbackDangerousProcess,
        57 => GeneralCallbackUpdateAutomatically,
        58 => GeneralCallbackMaximum,
        _ =>
          throw ArgumentError('Unknown value for PH_GENERAL_CALLBACK: $value'),
      };
}

/// Callbacks
typedef PPH_GENERAL_CALLBACK = ffi.Pointer<ffi.UnsignedInt>;

enum PH_PLUGIN_CALLBACK {
  /// PPH_LIST Parameters [main thread] // list of strings, might be NULL
  PluginCallbackLoad(0),

  /// BOOLEAN SessionEnding [main thread]
  PluginCallbackUnload(1),

  /// HWND ParentWindowHandle [main thread]
  PluginCallbackShowOptions(2),

  /// PPH_PLUGIN_MENU_ITEM MenuItem [main/properties thread]
  PluginCallbackMenuItem(3),

  /// PPH_PLUGIN_TREENEW_MESSAGE Message [main/properties thread]
  PluginCallbackTreeNewMessage(4),

  /// PPH_PLUGIN_PHSVC_REQUEST Message [phsvc thread]
  PluginCallbackPhSvcRequest(5),

  /// PH_PLUGIN_MENU_HOOK_INFORMATION MenuHookInfo [menu thread]
  PluginCallbackMenuHook(6),
  PluginCallbackMaximum(7);

  final int value;
  const PH_PLUGIN_CALLBACK(this.value);

  static PH_PLUGIN_CALLBACK fromValue(int value) => switch (value) {
        0 => PluginCallbackLoad,
        1 => PluginCallbackUnload,
        2 => PluginCallbackShowOptions,
        3 => PluginCallbackMenuItem,
        4 => PluginCallbackTreeNewMessage,
        5 => PluginCallbackPhSvcRequest,
        6 => PluginCallbackMenuHook,
        7 => PluginCallbackMaximum,
        _ =>
          throw ArgumentError('Unknown value for PH_PLUGIN_CALLBACK: $value'),
      };
}

typedef PPH_PLUGIN_CALLBACK = ffi.Pointer<ffi.UnsignedInt>;

/// Provider events
final class PH_PROCESS_PROVIDER_UPDATED_EVENT extends ffi.Struct {
  @ULONG()
  external int RunCount;
}

/// Provider events
typedef PH_PROCESS_PROVIDER_UPDATED_EVENT$1 = PH_PROCESS_PROVIDER_UPDATED_EVENT;
typedef PPH_PROCESS_PROVIDER_UPDATED_EVENT
    = ffi.Pointer<PH_PROCESS_PROVIDER_UPDATED_EVENT>;

/// Plugin events
final class PH_PLUGIN_GET_HIGHLIGHTING_COLOR extends ffi.Struct {
  /// Parameter is:
  /// PPH_PROCESS_ITEM for GeneralCallbackGetProcessHighlightingColor
  external PVOID Parameter;

  @COLORREF()
  external int BackColor;

  @COLORREF()
  external int ForeColor;

  @BOOLEAN()
  external int Handled;

  @BOOLEAN()
  external int Cache;
}

/// Plugin events
typedef PH_PLUGIN_GET_HIGHLIGHTING_COLOR$1 = PH_PLUGIN_GET_HIGHLIGHTING_COLOR;
typedef PPH_PLUGIN_GET_HIGHLIGHTING_COLOR
    = ffi.Pointer<PH_PLUGIN_GET_HIGHLIGHTING_COLOR>;

final class PH_STRING_BUILDER extends ffi.Struct {
  @SIZE_T()
  external int AllocatedLength;

  external PPH_STRING String;
}

typedef PPH_STRING_BUILDER = ffi.Pointer<PH_STRING_BUILDER>;

final class PH_PLUGIN_GET_TOOLTIP_TEXT extends ffi.Struct {
  /// Parameter is:
  /// PPH_PROCESS_ITEM for GeneralCallbackGetProcessTooltipText
  external PVOID Parameter;

  external PPH_STRING_BUILDER StringBuilder;

  @ULONG()
  external int ValidForMs;
}

typedef PH_PLUGIN_GET_TOOLTIP_TEXT$1 = PH_PLUGIN_GET_TOOLTIP_TEXT;
typedef PPH_PLUGIN_GET_TOOLTIP_TEXT = ffi.Pointer<PH_PLUGIN_GET_TOOLTIP_TEXT>;

final class PH_PLUGIN_PROCESS_PROPCONTEXT extends ffi.Struct {
  external PPH_PROCESS_PROPCONTEXT PropContext;

  external PPH_PROCESS_ITEM ProcessItem;
}

typedef PH_PLUGIN_PROCESS_PROPCONTEXT$1 = PH_PLUGIN_PROCESS_PROPCONTEXT;
typedef PPH_PLUGIN_PROCESS_PROPCONTEXT
    = ffi.Pointer<PH_PLUGIN_PROCESS_PROPCONTEXT>;

final class PH_PLUGIN_NOTIFY_EVENT extends ffi.Struct {
  /// Parameter is:
  /// PPH_PROCESS_ITEM for Type = PH_NOTIFY_PROCESS_*
  /// PPH_SERVICE_ITEM for Type = PH_NOTIFY_SERVICE_*
  /// PPH_DEVICE_ITEM for type = PH_NOTIFY_DEVICE_*
  @ULONG()
  external int Type;

  @BOOLEAN()
  external int Handled;

  external PVOID Parameter;
}

typedef PH_PLUGIN_NOTIFY_EVENT$1 = PH_PLUGIN_NOTIFY_EVENT;
typedef PPH_PLUGIN_NOTIFY_EVENT = ffi.Pointer<PH_PLUGIN_NOTIFY_EVENT>;

final class PSP extends ffi.Opaque {}

typedef HPROPSHEETPAGE = ffi.Pointer<PSP>;

final class PH_PLUGIN_OBJECT_PROPERTIES extends ffi.Struct {
  /// Parameter is:
  /// PPH_SERVICE_ITEM for GeneralCallbackServicePropertiesInitializing
  /// PPH_PLUGIN_HANDLE_PROPERTIES_CONTEXT for GeneralCallbackHandlePropertiesInitializing
  external PVOID Parameter;

  @ULONG()
  external int NumberOfPages;

  @ULONG()
  external int MaximumNumberOfPages;

  external ffi.Pointer<HPROPSHEETPAGE> Pages;
}

typedef PH_PLUGIN_OBJECT_PROPERTIES$1 = PH_PLUGIN_OBJECT_PROPERTIES;
typedef PPH_PLUGIN_OBJECT_PROPERTIES = ffi.Pointer<PH_PLUGIN_OBJECT_PROPERTIES>;

final class PH_PLUGIN_IS_DANGEROUS_PROCESS extends ffi.Struct {
  external HANDLE ProcessId;

  @BOOLEAN()
  external int DangerousProcess;
}

typedef PH_PLUGIN_IS_DANGEROUS_PROCESS$1 = PH_PLUGIN_IS_DANGEROUS_PROCESS;
typedef PPH_PLUGIN_IS_DANGEROUS_PROCESS
    = ffi.Pointer<PH_PLUGIN_IS_DANGEROUS_PROCESS>;

enum PH_PLUGIN_HANDLE_GENERAL_CATEGORY {
  /// common
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_BASICINFO(0),
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_REFERENCES(1),
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_QUOTA(2),

  /// extra
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_ALPC(3),
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_FILE(4),
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_SECTION(5),
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_MUTANT(6),
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_PROCESSTHREAD(7),
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_ETW(8),
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_SYMBOLICLINK(9),
  PH_PLUGIN_HANDLE_GENERAL_CATEGORY_MAXIMUM(10);

  final int value;
  const PH_PLUGIN_HANDLE_GENERAL_CATEGORY(this.value);

  static PH_PLUGIN_HANDLE_GENERAL_CATEGORY fromValue(int value) =>
      switch (value) {
        0 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_BASICINFO,
        1 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_REFERENCES,
        2 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_QUOTA,
        3 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_ALPC,
        4 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_FILE,
        5 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_SECTION,
        6 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_MUTANT,
        7 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_PROCESSTHREAD,
        8 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_ETW,
        9 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_SYMBOLICLINK,
        10 => PH_PLUGIN_HANDLE_GENERAL_CATEGORY_MAXIMUM,
        _ => throw ArgumentError(
            'Unknown value for PH_PLUGIN_HANDLE_GENERAL_CATEGORY: $value'),
      };
}

enum PH_PLUGIN_HANDLE_GENERAL_INDEX {
  PH_PLUGIN_HANDLE_GENERAL_INDEX_NAME(0),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_TYPE(1),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_OBJECT(2),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_ACCESSMASK(3),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_REFERENCES(4),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_HANDLES(5),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_PAGED(6),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_NONPAGED(7),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_FLAGS(8),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_SEQUENCENUMBER(9),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_PORTCONTEXT(10),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_FILETYPE(11),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEMODE(12),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEPOSITION(13),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_FILESIZE(14),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEPRIORITY(15),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEDRIVER(16),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEDRIVERIMAGE(17),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_SECTIONTYPE(18),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_SECTIONFILE(19),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_SECTIONSIZE(20),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_MUTANTCOUNT(21),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_MUTANTABANDONED(22),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_MUTANTOWNER(23),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_ALPCCONNECTION(24),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_ALPCSERVER(25),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_ALPCCLIENT(26),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_PROCESSTHREADNAME(27),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_PROCESSTHREADCREATETIME(28),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_PROCESSTHREADEXITTIME(29),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_PROCESSTHREADEXITCODE(30),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_ETWORIGINALNAME(31),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_ETWGROUPNAME(32),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_SYMBOLICLINKLINK(33),
  PH_PLUGIN_HANDLE_GENERAL_INDEX_MAXIMUM(34);

  final int value;
  const PH_PLUGIN_HANDLE_GENERAL_INDEX(this.value);

  static PH_PLUGIN_HANDLE_GENERAL_INDEX fromValue(int value) => switch (value) {
        0 => PH_PLUGIN_HANDLE_GENERAL_INDEX_NAME,
        1 => PH_PLUGIN_HANDLE_GENERAL_INDEX_TYPE,
        2 => PH_PLUGIN_HANDLE_GENERAL_INDEX_OBJECT,
        3 => PH_PLUGIN_HANDLE_GENERAL_INDEX_ACCESSMASK,
        4 => PH_PLUGIN_HANDLE_GENERAL_INDEX_REFERENCES,
        5 => PH_PLUGIN_HANDLE_GENERAL_INDEX_HANDLES,
        6 => PH_PLUGIN_HANDLE_GENERAL_INDEX_PAGED,
        7 => PH_PLUGIN_HANDLE_GENERAL_INDEX_NONPAGED,
        8 => PH_PLUGIN_HANDLE_GENERAL_INDEX_FLAGS,
        9 => PH_PLUGIN_HANDLE_GENERAL_INDEX_SEQUENCENUMBER,
        10 => PH_PLUGIN_HANDLE_GENERAL_INDEX_PORTCONTEXT,
        11 => PH_PLUGIN_HANDLE_GENERAL_INDEX_FILETYPE,
        12 => PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEMODE,
        13 => PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEPOSITION,
        14 => PH_PLUGIN_HANDLE_GENERAL_INDEX_FILESIZE,
        15 => PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEPRIORITY,
        16 => PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEDRIVER,
        17 => PH_PLUGIN_HANDLE_GENERAL_INDEX_FILEDRIVERIMAGE,
        18 => PH_PLUGIN_HANDLE_GENERAL_INDEX_SECTIONTYPE,
        19 => PH_PLUGIN_HANDLE_GENERAL_INDEX_SECTIONFILE,
        20 => PH_PLUGIN_HANDLE_GENERAL_INDEX_SECTIONSIZE,
        21 => PH_PLUGIN_HANDLE_GENERAL_INDEX_MUTANTCOUNT,
        22 => PH_PLUGIN_HANDLE_GENERAL_INDEX_MUTANTABANDONED,
        23 => PH_PLUGIN_HANDLE_GENERAL_INDEX_MUTANTOWNER,
        24 => PH_PLUGIN_HANDLE_GENERAL_INDEX_ALPCCONNECTION,
        25 => PH_PLUGIN_HANDLE_GENERAL_INDEX_ALPCSERVER,
        26 => PH_PLUGIN_HANDLE_GENERAL_INDEX_ALPCCLIENT,
        27 => PH_PLUGIN_HANDLE_GENERAL_INDEX_PROCESSTHREADNAME,
        28 => PH_PLUGIN_HANDLE_GENERAL_INDEX_PROCESSTHREADCREATETIME,
        29 => PH_PLUGIN_HANDLE_GENERAL_INDEX_PROCESSTHREADEXITTIME,
        30 => PH_PLUGIN_HANDLE_GENERAL_INDEX_PROCESSTHREADEXITCODE,
        31 => PH_PLUGIN_HANDLE_GENERAL_INDEX_ETWORIGINALNAME,
        32 => PH_PLUGIN_HANDLE_GENERAL_INDEX_ETWGROUPNAME,
        33 => PH_PLUGIN_HANDLE_GENERAL_INDEX_SYMBOLICLINKLINK,
        34 => PH_PLUGIN_HANDLE_GENERAL_INDEX_MAXIMUM,
        _ => throw ArgumentError(
            'Unknown value for PH_PLUGIN_HANDLE_GENERAL_INDEX: $value'),
      };
}

typedef INT = ffi.Int;
typedef DartINT = int;

final class PH_PLUGIN_HANDLE_PROPERTIES_WINDOW_CONTEXT extends ffi.Struct {
  external HWND ListViewHandle;

  external HWND ParentWindow;

  external HANDLE ProcessId;

  external PVOID ListViewClass;

  external PPH_HANDLE_ITEM HandleItem;

  external PH_LAYOUT_MANAGER$1 LayoutManager;

  @ffi.Array.multi([34])
  external ffi.Array<INT> ListViewRowCache;

  external PPH_PLUGIN OwnerPlugin;
}

typedef PH_PLUGIN_HANDLE_PROPERTIES_WINDOW_CONTEXT$1
    = PH_PLUGIN_HANDLE_PROPERTIES_WINDOW_CONTEXT;
typedef PPH_PLUGIN_HANDLE_PROPERTIES_WINDOW_CONTEXT
    = ffi.Pointer<PH_PLUGIN_HANDLE_PROPERTIES_WINDOW_CONTEXT>;

final class PH_PLUGIN_PROCESS_STATS_EVENT extends ffi.Struct {
  @ULONG()
  external int Version;

  @ULONG()
  external int Type;

  external PPH_PROCESS_ITEM ProcessItem;

  external PVOID Parameter;
}

typedef PH_PLUGIN_PROCESS_STATS_EVENT$1 = PH_PLUGIN_PROCESS_STATS_EVENT;
typedef PPH_PLUGIN_PROCESS_STATS_EVENT
    = ffi.Pointer<PH_PLUGIN_PROCESS_STATS_EVENT>;

final class PH_PLUGIN_HANDLE_PROPERTIES_CONTEXT extends ffi.Struct {
  external HWND ParentWindowHandle;

  external HANDLE ProcessId;

  external PPH_HANDLE_ITEM HandleItem;

  external PPH_PLUGIN OwnerPlugin;
}

typedef PH_PLUGIN_HANDLE_PROPERTIES_CONTEXT$1
    = PH_PLUGIN_HANDLE_PROPERTIES_CONTEXT;
typedef PPH_PLUGIN_HANDLE_PROPERTIES_CONTEXT
    = ffi.Pointer<PH_PLUGIN_HANDLE_PROPERTIES_CONTEXT>;

final class UnnamedStruct34 extends ffi.Struct {
  /// Reserve space for future expansion of this union
  @ffi.Array.multi([8])
  external ffi.Array<PVOID> Reserved;
}

final class UnnamedStruct35 extends ffi.Struct {
  @ULONG()
  external int SubMenuIndex;
}

final class UnnamedStruct36 extends ffi.Struct {
  external ffi.Pointer<PPH_PROCESS_ITEM> Processes;

  @ULONG()
  external int NumberOfProcesses;
}

final class UnnamedStruct37 extends ffi.Struct {
  external ffi.Pointer<PPH_SERVICE_ITEM> Services;

  @ULONG()
  external int NumberOfServices;
}

final class UnnamedStruct38 extends ffi.Struct {
  external ffi.Pointer<PPH_NETWORK_ITEM> NetworkItems;

  @ULONG()
  external int NumberOfNetworkItems;
}

final class UnnamedStruct39 extends ffi.Struct {
  external HANDLE ProcessId;

  external ffi.Pointer<PPH_THREAD_ITEM> Threads;

  @ULONG()
  external int NumberOfThreads;
}

final class UnnamedStruct40 extends ffi.Struct {
  external HANDLE ProcessId;

  external ffi.Pointer<PPH_MODULE_ITEM> Modules;

  @ULONG()
  external int NumberOfModules;
}

final class UnnamedStruct41 extends ffi.Struct {
  external HANDLE ProcessId;

  external ffi.Pointer<PPH_MEMORY_NODE> MemoryNodes;

  @ULONG()
  external int NumberOfMemoryNodes;
}

final class UnnamedStruct42 extends ffi.Struct {
  external HANDLE ProcessId;

  external ffi.Pointer<PPH_HANDLE_ITEM> Handles;

  @ULONG()
  external int NumberOfHandles;
}

final class UnnamedStruct43 extends ffi.Struct {
  external PPH_STRINGREF SectionName;

  external PPH_PROCESS_GROUP ProcessGroup;
}

final class UnnamedUnion39 extends ffi.Union {
  external UnnamedStruct34 DoNotUse;

  external UnnamedStruct35 MainMenu;

  external UnnamedStruct36 Process;

  external UnnamedStruct37 Service;

  external UnnamedStruct38 Network;

  external UnnamedStruct39 Thread;

  external UnnamedStruct40 Module;

  external UnnamedStruct41 Memory;

  external UnnamedStruct42 Handle;

  external UnnamedStruct43 MiListSection;
}

final class PH_PLUGIN_MENU_INFORMATION extends ffi.Struct {
  external PPH_EMENU Menu;

  external HWND OwnerWindow;

  external UnnamedUnion39 u;

  @ULONG()
  external int Flags;

  external PPH_LIST PluginHookList;
}

typedef PH_PLUGIN_MENU_INFORMATION$1 = PH_PLUGIN_MENU_INFORMATION;
typedef PPH_PLUGIN_MENU_INFORMATION = ffi.Pointer<PH_PLUGIN_MENU_INFORMATION>;

final class PH_PLUGIN_MENU_HOOK_INFORMATION extends ffi.Struct {
  external PPH_PLUGIN_MENU_INFORMATION MenuInfo;

  external PPH_EMENU SelectedItem;

  external PVOID Context;

  @BOOLEAN()
  external int Handled;
}

typedef PH_PLUGIN_MENU_HOOK_INFORMATION$1 = PH_PLUGIN_MENU_HOOK_INFORMATION;
typedef PPH_PLUGIN_MENU_HOOK_INFORMATION
    = ffi.Pointer<PH_PLUGIN_MENU_HOOK_INFORMATION>;

final class PH_PLUGIN_TREENEW_INFORMATION extends ffi.Struct {
  external HWND TreeNewHandle;

  external PVOID CmData;

  /// e.g. PPH_THREADS_CONTEXT
  external PVOID SystemContext;
}

typedef PH_PLUGIN_TREENEW_INFORMATION$1 = PH_PLUGIN_TREENEW_INFORMATION;
typedef PPH_PLUGIN_TREENEW_INFORMATION
    = ffi.Pointer<PH_PLUGIN_TREENEW_INFORMATION>;

enum PH_PLUGIN_THREAD_STACK_CONTROL_TYPE {
  PluginThreadStackInitializing(0),
  PluginThreadStackUninitializing(1),
  PluginThreadStackResolveSymbol(2),
  PluginThreadStackGetTooltip(3),
  PluginThreadStackWalkStack(4),
  PluginThreadStackBeginDefaultWalkStack(5),
  PluginThreadStackEndDefaultWalkStack(6),
  PluginThreadStackMaximum(7);

  final int value;
  const PH_PLUGIN_THREAD_STACK_CONTROL_TYPE(this.value);

  static PH_PLUGIN_THREAD_STACK_CONTROL_TYPE fromValue(int value) =>
      switch (value) {
        0 => PluginThreadStackInitializing,
        1 => PluginThreadStackUninitializing,
        2 => PluginThreadStackResolveSymbol,
        3 => PluginThreadStackGetTooltip,
        4 => PluginThreadStackWalkStack,
        5 => PluginThreadStackBeginDefaultWalkStack,
        6 => PluginThreadStackEndDefaultWalkStack,
        7 => PluginThreadStackMaximum,
        _ => throw ArgumentError(
            'Unknown value for PH_PLUGIN_THREAD_STACK_CONTROL_TYPE: $value'),
      };
}

final class PH_THREAD_STACK_FRAME extends ffi.Opaque {}

typedef PPH_THREAD_STACK_FRAME = ffi.Pointer<PH_THREAD_STACK_FRAME>;
typedef PPH_PLUGIN_WALK_THREAD_STACK_CALLBACKFunction = BOOLEAN Function(
    PPH_THREAD_STACK_FRAME StackFrame, PVOID Context);
typedef DartPPH_PLUGIN_WALK_THREAD_STACK_CALLBACKFunction = Dartboolean
    Function(PPH_THREAD_STACK_FRAME StackFrame, PVOID Context);
typedef PPH_PLUGIN_WALK_THREAD_STACK_CALLBACK = ffi
    .Pointer<ffi.NativeFunction<PPH_PLUGIN_WALK_THREAD_STACK_CALLBACKFunction>>;

final class UnnamedStruct44 extends ffi.Struct {
  external HANDLE ProcessId;

  external HANDLE ThreadId;

  external HANDLE ThreadHandle;

  external HANDLE ProcessHandle;

  external PPH_SYMBOL_PROVIDER SymbolProvider;

  @BOOLEAN()
  external int CustomWalk;
}

final class UnnamedStruct45 extends ffi.Struct {
  external PPH_THREAD_STACK_FRAME StackFrame;

  external PPH_STRING Symbol;

  external PPH_STRING FileName;
}

final class UnnamedStruct46 extends ffi.Struct {
  external PPH_THREAD_STACK_FRAME StackFrame;

  external PPH_STRING_BUILDER StringBuilder;
}

typedef PCLIENT_ID = ffi.Pointer<CLIENT_ID>;

final class UnnamedStruct47 extends ffi.Struct {
  @NTSTATUS()
  external int Status;

  external HANDLE ThreadHandle;

  external HANDLE ProcessHandle;

  external PCLIENT_ID ClientId;

  @ULONG()
  external int Flags;

  external PPH_PLUGIN_WALK_THREAD_STACK_CALLBACK Callback;

  external PVOID CallbackContext;
}

final class UnnamedUnion40 extends ffi.Union {
  external UnnamedStruct44 Initializing;

  external UnnamedStruct45 ResolveSymbol;

  external UnnamedStruct46 GetTooltip;

  external UnnamedStruct47 WalkStack;
}

final class PH_PLUGIN_THREAD_STACK_CONTROL extends ffi.Struct {
  @ffi.UnsignedInt()
  external int TypeAsInt;

  PH_PLUGIN_THREAD_STACK_CONTROL_TYPE get Type =>
      PH_PLUGIN_THREAD_STACK_CONTROL_TYPE.fromValue(TypeAsInt);

  external PVOID UniqueKey;

  external UnnamedUnion40 u;
}

typedef PH_PLUGIN_THREAD_STACK_CONTROL$1 = PH_PLUGIN_THREAD_STACK_CONTROL;
typedef PPH_PLUGIN_THREAD_STACK_CONTROL
    = ffi.Pointer<PH_PLUGIN_THREAD_STACK_CONTROL>;

enum PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL_TYPE {
  PluginMemoryItemListInitialized(0),
  PluginMemoryItemListMaximum(1);

  final int value;
  const PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL_TYPE(this.value);

  static PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL_TYPE fromValue(int value) =>
      switch (value) {
        0 => PluginMemoryItemListInitialized,
        1 => PluginMemoryItemListMaximum,
        _ => throw ArgumentError(
            'Unknown value for PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL_TYPE: $value'),
      };
}

final class UnnamedStruct48 extends ffi.Struct {
  external PPH_MEMORY_ITEM_LIST List;
}

final class UnnamedUnion41 extends ffi.Union {
  external UnnamedStruct48 Initialized;
}

final class PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL extends ffi.Struct {
  @ffi.UnsignedInt()
  external int TypeAsInt;

  PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL_TYPE get Type =>
      PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL_TYPE.fromValue(TypeAsInt);

  external UnnamedUnion41 u;
}

typedef PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL$1
    = PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL;
typedef PPH_PLUGIN_MEMORY_ITEM_LIST_CONTROL
    = ffi.Pointer<PH_PLUGIN_MEMORY_ITEM_LIST_CONTROL>;
typedef PPH_SYSINFO_CREATE_SECTIONFunction = PPH_SYSINFO_SECTION Function(
    PPH_SYSINFO_SECTION Template);
typedef PPH_SYSINFO_CREATE_SECTION
    = ffi.Pointer<ffi.NativeFunction<PPH_SYSINFO_CREATE_SECTIONFunction>>;
typedef PPH_SYSINFO_FIND_SECTIONFunction = PPH_SYSINFO_SECTION Function(
    PPH_STRINGREF Name);
typedef PPH_SYSINFO_FIND_SECTION
    = ffi.Pointer<ffi.NativeFunction<PPH_SYSINFO_FIND_SECTIONFunction>>;
typedef PPH_SYSINFO_ENTER_SECTION_VIEWFunction = ffi.Void Function(
    PPH_SYSINFO_SECTION NewSection);
typedef DartPPH_SYSINFO_ENTER_SECTION_VIEWFunction = void Function(
    PPH_SYSINFO_SECTION NewSection);
typedef PPH_SYSINFO_ENTER_SECTION_VIEW
    = ffi.Pointer<ffi.NativeFunction<PPH_SYSINFO_ENTER_SECTION_VIEWFunction>>;
typedef PPH_SYSINFO_RESTORE_SUMMARY_VIEWFunction = ffi.Void Function();
typedef DartPPH_SYSINFO_RESTORE_SUMMARY_VIEWFunction = void Function();
typedef PPH_SYSINFO_RESTORE_SUMMARY_VIEW
    = ffi.Pointer<ffi.NativeFunction<PPH_SYSINFO_RESTORE_SUMMARY_VIEWFunction>>;

final class PH_PLUGIN_SYSINFO_POINTERS extends ffi.Struct {
  external HWND WindowHandle;

  external PPH_SYSINFO_CREATE_SECTION CreateSection;

  external PPH_SYSINFO_FIND_SECTION FindSection;

  external PPH_SYSINFO_ENTER_SECTION_VIEW EnterSectionView;

  external PPH_SYSINFO_RESTORE_SUMMARY_VIEW RestoreSummaryView;
}

typedef PH_PLUGIN_SYSINFO_POINTERS$1 = PH_PLUGIN_SYSINFO_POINTERS;
typedef PPH_PLUGIN_SYSINFO_POINTERS = ffi.Pointer<PH_PLUGIN_SYSINFO_POINTERS>;
typedef PPH_MINIINFO_CREATE_SECTIONFunction = PPH_MINIINFO_SECTION Function(
    PPH_MINIINFO_SECTION Template);
typedef PPH_MINIINFO_CREATE_SECTION
    = ffi.Pointer<ffi.NativeFunction<PPH_MINIINFO_CREATE_SECTIONFunction>>;
typedef PPH_MINIINFO_FIND_SECTIONFunction = PPH_MINIINFO_SECTION Function(
    PPH_STRINGREF Name);
typedef PPH_MINIINFO_FIND_SECTION
    = ffi.Pointer<ffi.NativeFunction<PPH_MINIINFO_FIND_SECTIONFunction>>;
typedef PPH_MINIINFO_CREATE_LIST_SECTIONFunction = PPH_MINIINFO_LIST_SECTION
    Function(PWSTR Name, ULONG Flags, PPH_MINIINFO_LIST_SECTION Template);
typedef DartPPH_MINIINFO_CREATE_LIST_SECTIONFunction = PPH_MINIINFO_LIST_SECTION
    Function(PWSTR Name, DartDWORD Flags, PPH_MINIINFO_LIST_SECTION Template);
typedef PPH_MINIINFO_CREATE_LIST_SECTION
    = ffi.Pointer<ffi.NativeFunction<PPH_MINIINFO_CREATE_LIST_SECTIONFunction>>;

final class PH_PLUGIN_MINIINFO_POINTERS extends ffi.Struct {
  external HWND WindowHandle;

  external PPH_MINIINFO_CREATE_SECTION CreateSection;

  external PPH_MINIINFO_FIND_SECTION FindSection;

  external PPH_MINIINFO_CREATE_LIST_SECTION CreateListSection;
}

typedef PH_PLUGIN_MINIINFO_POINTERS$1 = PH_PLUGIN_MINIINFO_POINTERS;
typedef PPH_PLUGIN_MINIINFO_POINTERS = ffi.Pointer<PH_PLUGIN_MINIINFO_POINTERS>;
typedef PPH_REGISTER_TRAY_ICONFunction = PPH_PLUGIN Function(
    PPH_PLUGIN Plugin,
    ULONG SubId,
    GUID$1 Guid,
    PVOID Context,
    PWSTR Text,
    ULONG Flags,
    PPH_NF_ICON_REGISTRATION_DATA RegistrationData);
typedef DartPPH_REGISTER_TRAY_ICONFunction = PPH_PLUGIN Function(
    PPH_PLUGIN Plugin,
    DartDWORD SubId,
    GUID$1 Guid,
    PVOID Context,
    PWSTR Text,
    DartDWORD Flags,
    PPH_NF_ICON_REGISTRATION_DATA RegistrationData);

/// Creates a notification icon.
///
/// \param Plugin A plugin instance structure.
/// \param SubId An identifier for the column. This should be unique within the
/// plugin.
/// \param Guid A unique guid for this icon.
/// \param Context A user-defined value.
/// \param Text A string describing the notification icon.
/// \param Flags A combination of flags.
/// \li \c PH_NF_ICON_UNAVAILABLE The notification icon is currently unavailable.
/// \param RegistrationData A \ref PH_NF_ICON_REGISTRATION_DATA structure that
/// contains registration information.
typedef PPH_REGISTER_TRAY_ICON
    = ffi.Pointer<ffi.NativeFunction<PPH_REGISTER_TRAY_ICONFunction>>;

final class PH_TRAY_ICON_POINTERS extends ffi.Struct {
  external PPH_REGISTER_TRAY_ICON RegisterTrayIcon;
}

typedef PH_TRAY_ICON_POINTERS$1 = PH_TRAY_ICON_POINTERS;
typedef PPH_TRAY_ICON_POINTERS = ffi.Pointer<PH_TRAY_ICON_POINTERS>;

final class PH_OPTIONS_SECTION extends ffi.Struct {
  external PH_STRINGREF$1 Name;
}

typedef PH_OPTIONS_SECTION$1 = PH_OPTIONS_SECTION;
typedef PPH_OPTIONS_SECTION = ffi.Pointer<PH_OPTIONS_SECTION>;
typedef PPH_OPTIONS_CREATE_SECTIONFunction = PPH_OPTIONS_SECTION Function(
    PWSTR Name,
    PVOID Instance,
    PWSTR Template,
    DLGPROC DialogProc,
    PVOID Parameter);
typedef PPH_OPTIONS_CREATE_SECTION
    = ffi.Pointer<ffi.NativeFunction<PPH_OPTIONS_CREATE_SECTIONFunction>>;
typedef PPH_OPTIONS_FIND_SECTIONFunction = PPH_OPTIONS_SECTION Function(
    PPH_STRINGREF Name);
typedef PPH_OPTIONS_FIND_SECTION
    = ffi.Pointer<ffi.NativeFunction<PPH_OPTIONS_FIND_SECTIONFunction>>;
typedef PPH_OPTIONS_ENTER_SECTION_VIEWFunction = ffi.Void Function(
    PPH_OPTIONS_SECTION NewSection);
typedef DartPPH_OPTIONS_ENTER_SECTION_VIEWFunction = void Function(
    PPH_OPTIONS_SECTION NewSection);
typedef PPH_OPTIONS_ENTER_SECTION_VIEW
    = ffi.Pointer<ffi.NativeFunction<PPH_OPTIONS_ENTER_SECTION_VIEWFunction>>;

final class PH_PLUGIN_OPTIONS_POINTERS extends ffi.Struct {
  external HWND WindowHandle;

  external PPH_OPTIONS_CREATE_SECTION CreateSection;

  external PPH_OPTIONS_FIND_SECTION FindSection;

  external PPH_OPTIONS_ENTER_SECTION_VIEW EnterSectionView;
}

typedef PH_PLUGIN_OPTIONS_POINTERS$1 = PH_PLUGIN_OPTIONS_POINTERS;
typedef PPH_PLUGIN_OPTIONS_POINTERS = ffi.Pointer<PH_PLUGIN_OPTIONS_POINTERS>;

final class PH_PLUGIN_TREENEW_MESSAGE extends ffi.Struct {
  external HWND TreeNewHandle;

  @ffi.UnsignedInt()
  external int MessageAsInt;

  PH_TREENEW_MESSAGE get Message => PH_TREENEW_MESSAGE.fromValue(MessageAsInt);

  external PVOID Parameter1;

  external PVOID Parameter2;

  @ULONG()
  external int SubId;

  external PVOID Context;
}

typedef PH_PLUGIN_TREENEW_MESSAGE$1 = PH_PLUGIN_TREENEW_MESSAGE;
typedef PPH_PLUGIN_TREENEW_MESSAGE = ffi.Pointer<PH_PLUGIN_TREENEW_MESSAGE>;
typedef PPH_PLUGIN_TREENEW_SORT_FUNCTIONFunction = LONG Function(PVOID Node1,
    PVOID Node2, ULONG SubId, ffi.UnsignedInt SortOrder, PVOID Context);
typedef DartPPH_PLUGIN_TREENEW_SORT_FUNCTIONFunction = DartLONG Function(
    PVOID Node1,
    PVOID Node2,
    DartDWORD SubId,
    PH_SORT_ORDER SortOrder,
    PVOID Context);
typedef PPH_PLUGIN_TREENEW_SORT_FUNCTION
    = ffi.Pointer<ffi.NativeFunction<PPH_PLUGIN_TREENEW_SORT_FUNCTIONFunction>>;

final class PH_RELATIVE_BYTESREF extends ffi.Struct {
  @ULONG()
  external int Length;

  @ULONG()
  external int Offset;
}

typedef PPH_RELATIVE_STRINGREF = ffi.Pointer<PH_RELATIVE_BYTESREF>;
typedef PPHSVC_SERVER_PROBE_BUFFERFunction = NTSTATUS Function(
    PPH_RELATIVE_STRINGREF String,
    ULONG Alignment,
    BOOLEAN AllowNull,
    ffi.Pointer<PVOID> Pointer);
typedef DartPPHSVC_SERVER_PROBE_BUFFERFunction = DartLONG Function(
    PPH_RELATIVE_STRINGREF String,
    DartDWORD Alignment,
    Dartboolean AllowNull,
    ffi.Pointer<PVOID> Pointer);
typedef PPHSVC_SERVER_PROBE_BUFFER
    = ffi.Pointer<ffi.NativeFunction<PPHSVC_SERVER_PROBE_BUFFERFunction>>;
typedef PPHSVC_SERVER_CAPTURE_BUFFERFunction = NTSTATUS Function(
    PPH_RELATIVE_STRINGREF String,
    BOOLEAN AllowNull,
    ffi.Pointer<PVOID> CapturedBuffer);
typedef DartPPHSVC_SERVER_CAPTURE_BUFFERFunction = DartLONG Function(
    PPH_RELATIVE_STRINGREF String,
    Dartboolean AllowNull,
    ffi.Pointer<PVOID> CapturedBuffer);
typedef PPHSVC_SERVER_CAPTURE_BUFFER
    = ffi.Pointer<ffi.NativeFunction<PPHSVC_SERVER_CAPTURE_BUFFERFunction>>;
typedef PPHSVC_SERVER_CAPTURE_STRINGFunction = NTSTATUS Function(
    PPH_RELATIVE_STRINGREF String,
    BOOLEAN AllowNull,
    ffi.Pointer<PPH_STRING> CapturedString);
typedef DartPPHSVC_SERVER_CAPTURE_STRINGFunction = DartLONG Function(
    PPH_RELATIVE_STRINGREF String,
    Dartboolean AllowNull,
    ffi.Pointer<PPH_STRING> CapturedString);
typedef PPHSVC_SERVER_CAPTURE_STRING
    = ffi.Pointer<ffi.NativeFunction<PPHSVC_SERVER_CAPTURE_STRINGFunction>>;

final class PH_PLUGIN_PHSVC_REQUEST extends ffi.Struct {
  @ULONG()
  external int SubId;

  @NTSTATUS()
  external int ReturnStatus;

  external PVOID InBuffer;

  @ULONG()
  external int InLength;

  external PVOID OutBuffer;

  @ULONG()
  external int OutLength;

  external PPHSVC_SERVER_PROBE_BUFFER ProbeBuffer;

  external PPHSVC_SERVER_CAPTURE_BUFFER CaptureBuffer;

  external PPHSVC_SERVER_CAPTURE_STRING CaptureString;
}

typedef PH_PLUGIN_PHSVC_REQUEST$1 = PH_PLUGIN_PHSVC_REQUEST;
typedef PPH_PLUGIN_PHSVC_REQUEST = ffi.Pointer<PH_PLUGIN_PHSVC_REQUEST>;
typedef PPHSVC_CLIENT_FREE_HEAPFunction = ffi.Void Function(PVOID Memory);
typedef DartPPHSVC_CLIENT_FREE_HEAPFunction = void Function(PVOID Memory);
typedef PPHSVC_CLIENT_FREE_HEAP
    = ffi.Pointer<ffi.NativeFunction<PPHSVC_CLIENT_FREE_HEAPFunction>>;
typedef PPHSVC_CLIENT_CREATE_STRINGFunction = PVOID Function(
    PVOID String, SIZE_T Length, PPH_RELATIVE_STRINGREF StringRef);
typedef DartPPHSVC_CLIENT_CREATE_STRINGFunction = PVOID Function(
    PVOID String, DartULONG_PTR Length, PPH_RELATIVE_STRINGREF StringRef);
typedef PPHSVC_CLIENT_CREATE_STRING
    = ffi.Pointer<ffi.NativeFunction<PPHSVC_CLIENT_CREATE_STRINGFunction>>;

final class PH_PLUGIN_PHSVC_CLIENT extends ffi.Struct {
  external HANDLE ServerProcessId;

  external PPHSVC_CLIENT_FREE_HEAP FreeHeap;

  external PPHSVC_CLIENT_CREATE_STRING CreateString;
}

typedef PH_PLUGIN_PHSVC_CLIENT$1 = PH_PLUGIN_PHSVC_CLIENT;
typedef PPH_PLUGIN_PHSVC_CLIENT = ffi.Pointer<PH_PLUGIN_PHSVC_CLIENT>;

/// Plugin structures
final class PH_PLUGIN_INFORMATION extends ffi.Struct {
  external PWSTR DisplayName;

  external PWSTR Author;

  external PWSTR Description;

  external PWSTR Url;

  @BOOLEAN()
  external int HasOptions;

  @ffi.Array.multi([3])
  external ffi.Array<BOOLEAN> Reserved1;

  external PVOID Interface;
}

/// Plugin structures
typedef PH_PLUGIN_INFORMATION$1 = PH_PLUGIN_INFORMATION;
typedef PPH_PLUGIN_INFORMATION = ffi.Pointer<PH_PLUGIN_INFORMATION>;
typedef PPH_PLUGIN_MENU_ITEM = ffi.Pointer<PH_PLUGIN_MENU_ITEM>;
typedef PH_PLUGIN_MENU_ITEM_DELETE_FUNCTION
    = ffi.NativeFunction<ffi.Void Function(PPH_PLUGIN_MENU_ITEM MenuItem)>;
typedef PPH_PLUGIN_MENU_ITEM_DELETE_FUNCTION
    = ffi.Pointer<PH_PLUGIN_MENU_ITEM_DELETE_FUNCTION>;

final class PH_PLUGIN_MENU_ITEM extends ffi.Struct {
  external PPH_PLUGIN Plugin;

  @ULONG()
  external int Id;

  @ULONG()
  external int Reserved1;

  external PVOID Context;

  /// valid only when the menu item is chosen
  external HWND OwnerWindow;

  external PVOID Reserved2;

  external PVOID Reserved3;

  /// valid only for EMENU-based menu items
  external PPH_PLUGIN_MENU_ITEM_DELETE_FUNCTION DeleteFunction;
}

typedef PH_PLUGIN_MENU_ITEM$1 = PH_PLUGIN_MENU_ITEM;

final class SYSTEM_PERFORMANCE_INFORMATION extends ffi.Struct {
  external LARGE_INTEGER$1 IdleProcessTime;

  external LARGE_INTEGER$1 IoReadTransferCount;

  external LARGE_INTEGER$1 IoWriteTransferCount;

  external LARGE_INTEGER$1 IoOtherTransferCount;

  @ULONG()
  external int IoReadOperationCount;

  @ULONG()
  external int IoWriteOperationCount;

  @ULONG()
  external int IoOtherOperationCount;

  @ULONG()
  external int AvailablePages;

  @ULONG()
  external int CommittedPages;

  @ULONG()
  external int CommitLimit;

  @ULONG()
  external int PeakCommitment;

  @ULONG()
  external int PageFaultCount;

  @ULONG()
  external int CopyOnWriteCount;

  @ULONG()
  external int TransitionCount;

  @ULONG()
  external int CacheTransitionCount;

  @ULONG()
  external int DemandZeroCount;

  @ULONG()
  external int PageReadCount;

  @ULONG()
  external int PageReadIoCount;

  @ULONG()
  external int CacheReadCount;

  @ULONG()
  external int CacheIoCount;

  @ULONG()
  external int DirtyPagesWriteCount;

  @ULONG()
  external int DirtyWriteIoCount;

  @ULONG()
  external int MappedPagesWriteCount;

  @ULONG()
  external int MappedWriteIoCount;

  @ULONG()
  external int PagedPoolPages;

  @ULONG()
  external int NonPagedPoolPages;

  @ULONG()
  external int PagedPoolAllocs;

  @ULONG()
  external int PagedPoolFrees;

  @ULONG()
  external int NonPagedPoolAllocs;

  @ULONG()
  external int NonPagedPoolFrees;

  @ULONG()
  external int FreeSystemPtes;

  @ULONG()
  external int ResidentSystemCodePage;

  @ULONG()
  external int TotalSystemDriverPages;

  @ULONG()
  external int TotalSystemCodePages;

  @ULONG()
  external int NonPagedPoolLookasideHits;

  @ULONG()
  external int PagedPoolLookasideHits;

  @ULONG()
  external int AvailablePagedPoolPages;

  @ULONG()
  external int ResidentSystemCachePage;

  @ULONG()
  external int ResidentPagedPoolPage;

  @ULONG()
  external int ResidentSystemDriverPage;

  @ULONG()
  external int CcFastReadNoWait;

  @ULONG()
  external int CcFastReadWait;

  @ULONG()
  external int CcFastReadResourceMiss;

  @ULONG()
  external int CcFastReadNotPossible;

  @ULONG()
  external int CcFastMdlReadNoWait;

  @ULONG()
  external int CcFastMdlReadWait;

  @ULONG()
  external int CcFastMdlReadResourceMiss;

  @ULONG()
  external int CcFastMdlReadNotPossible;

  @ULONG()
  external int CcMapDataNoWait;

  @ULONG()
  external int CcMapDataWait;

  @ULONG()
  external int CcMapDataNoWaitMiss;

  @ULONG()
  external int CcMapDataWaitMiss;

  @ULONG()
  external int CcPinMappedDataCount;

  @ULONG()
  external int CcPinReadNoWait;

  @ULONG()
  external int CcPinReadWait;

  @ULONG()
  external int CcPinReadNoWaitMiss;

  @ULONG()
  external int CcPinReadWaitMiss;

  @ULONG()
  external int CcCopyReadNoWait;

  @ULONG()
  external int CcCopyReadWait;

  @ULONG()
  external int CcCopyReadNoWaitMiss;

  @ULONG()
  external int CcCopyReadWaitMiss;

  @ULONG()
  external int CcMdlReadNoWait;

  @ULONG()
  external int CcMdlReadWait;

  @ULONG()
  external int CcMdlReadNoWaitMiss;

  @ULONG()
  external int CcMdlReadWaitMiss;

  @ULONG()
  external int CcReadAheadIos;

  @ULONG()
  external int CcLazyWriteIos;

  @ULONG()
  external int CcLazyWritePages;

  @ULONG()
  external int CcDataFlushes;

  @ULONG()
  external int CcDataPages;

  @ULONG()
  external int ContextSwitches;

  @ULONG()
  external int FirstLevelTbFills;

  @ULONG()
  external int SecondLevelTbFills;

  @ULONG()
  external int SystemCalls;

  @ULONGLONG()
  external int CcTotalDirtyPages;

  @ULONGLONG()
  external int CcDirtyPageThreshold;

  @LONGLONG()
  external int ResidentAvailablePages;

  @ULONGLONG()
  external int SharedCommittedPages;

  @ULONGLONG()
  external int MdlPagesAllocated;

  @ULONGLONG()
  external int PfnDatabaseCommittedPages;

  @ULONGLONG()
  external int SystemPageTableCommittedPages;

  @ULONGLONG()
  external int ContiguousPagesAllocated;
}

typedef PSYSTEM_PERFORMANCE_INFORMATION
    = ffi.Pointer<SYSTEM_PERFORMANCE_INFORMATION>;

final class PH_PLUGIN_SYSTEM_STATISTICS extends ffi.Struct {
  external PSYSTEM_PERFORMANCE_INFORMATION Performance;

  @ULONG()
  external int NumberOfProcesses;

  @ULONG()
  external int NumberOfThreads;

  @ULONG()
  external int NumberOfHandles;

  @FLOAT()
  external double CpuKernelUsage;

  @FLOAT()
  external double CpuUserUsage;

  external PH_UINT64_DELTA$1 IoReadDelta;

  external PH_UINT64_DELTA$1 IoWriteDelta;

  external PH_UINT64_DELTA$1 IoOtherDelta;

  @ULONG()
  external int CommitPages;

  @ULONG()
  external int PhysicalPages;

  external HANDLE MaxCpuProcessId;

  external HANDLE MaxIoProcessId;

  external PPH_CIRCULAR_BUFFER_FLOAT CpuKernelHistory;

  external PPH_CIRCULAR_BUFFER_FLOAT CpuUserHistory;

  external ffi.Pointer<PPH_CIRCULAR_BUFFER_FLOAT> CpusKernelHistory;

  external ffi.Pointer<PPH_CIRCULAR_BUFFER_FLOAT> CpusUserHistory;

  external PPH_CIRCULAR_BUFFER_ULONG64 IoReadHistory;

  external PPH_CIRCULAR_BUFFER_ULONG64 IoWriteHistory;

  external PPH_CIRCULAR_BUFFER_ULONG64 IoOtherHistory;

  external PPH_CIRCULAR_BUFFER_ULONG CommitHistory;

  external PPH_CIRCULAR_BUFFER_ULONG PhysicalHistory;

  /// ID of max. CPU process
  external PPH_CIRCULAR_BUFFER_ULONG MaxCpuHistory;

  /// ID of max. I/O process
  external PPH_CIRCULAR_BUFFER_ULONG MaxIoHistory;

  external PPH_CIRCULAR_BUFFER_FLOAT MaxCpuUsageHistory;

  external PPH_CIRCULAR_BUFFER_ULONG64 MaxIoReadOtherHistory;

  external PPH_CIRCULAR_BUFFER_ULONG64 MaxIoWriteHistory;
}

typedef PH_PLUGIN_SYSTEM_STATISTICS$1 = PH_PLUGIN_SYSTEM_STATISTICS;
typedef PPH_PLUGIN_SYSTEM_STATISTICS = ffi.Pointer<PH_PLUGIN_SYSTEM_STATISTICS>;
typedef PH_PLUGIN_ENUMERATE = ffi
    .NativeFunction<NTSTATUS Function(PPH_PLUGIN Information, PVOID Context)>;
typedef PPH_PLUGIN_ENUMERATE = ffi.Pointer<PH_PLUGIN_ENUMERATE>;

/// actions
enum PH_PHSVC_MODE {
  ElevatedPhSvcMode(0),
  Wow64PhSvcMode(1);

  final int value;
  const PH_PHSVC_MODE(this.value);

  static PH_PHSVC_MODE fromValue(int value) => switch (value) {
        0 => ElevatedPhSvcMode,
        1 => Wow64PhSvcMode,
        _ => throw ArgumentError('Unknown value for PH_PHSVC_MODE: $value'),
      };
}

enum PH_POWERACTION_TYPE {
  PH_POWERACTION_TYPE_NONE(0),
  PH_POWERACTION_TYPE_WIN32(1),
  PH_POWERACTION_TYPE_NATIVE(2),
  PH_POWERACTION_TYPE_CRITICAL(3),
  PH_POWERACTION_TYPE_ADVANCEDBOOT(4),
  PH_POWERACTION_TYPE_FIRMWAREBOOT(5),
  PH_POWERACTION_TYPE_UPDATE(6),
  PH_POWERACTION_TYPE_WDOSCAN(7),
  PH_POWERACTION_TYPE_MAXIMUM(8);

  final int value;
  const PH_POWERACTION_TYPE(this.value);

  static PH_POWERACTION_TYPE fromValue(int value) => switch (value) {
        0 => PH_POWERACTION_TYPE_NONE,
        1 => PH_POWERACTION_TYPE_WIN32,
        2 => PH_POWERACTION_TYPE_NATIVE,
        3 => PH_POWERACTION_TYPE_CRITICAL,
        4 => PH_POWERACTION_TYPE_ADVANCEDBOOT,
        5 => PH_POWERACTION_TYPE_FIRMWAREBOOT,
        6 => PH_POWERACTION_TYPE_UPDATE,
        7 => PH_POWERACTION_TYPE_WDOSCAN,
        8 => PH_POWERACTION_TYPE_MAXIMUM,
        _ =>
          throw ArgumentError('Unknown value for PH_POWERACTION_TYPE: $value'),
      };
}

final class HINSTANCE__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef HINSTANCE = ffi.Pointer<HINSTANCE__>;

@ffi.Packed(2)
final class DLGTEMPLATE extends ffi.Struct {
  @DWORD()
  external int style;

  @DWORD()
  external int dwExtendedStyle;

  @WORD()
  external int cdit;

  @ffi.Short()
  external int x;

  @ffi.Short()
  external int y;

  @ffi.Short()
  external int cx;

  @ffi.Short()
  external int cy;
}

typedef LPCDLGTEMPLATEW = ffi.Pointer<DLGTEMPLATE>;
typedef LPCDLGTEMPLATE = LPCDLGTEMPLATEW;
typedef PROPSHEETPAGE_RESOURCE = LPCDLGTEMPLATE;

final class UnnamedUnion42 extends ffi.Union {
  external LPCWSTR pszTemplate;

  external PROPSHEETPAGE_RESOURCE pResource;
}

typedef LPFNPSPCALLBACKWFunction = UINT Function(
    HWND hwnd, UINT uMsg, ffi.Pointer<PROPSHEETPAGEW> ppsp);
typedef DartLPFNPSPCALLBACKWFunction = DartUINT Function(
    HWND hwnd, DartUINT uMsg, ffi.Pointer<PROPSHEETPAGEW> ppsp);
typedef LPFNPSPCALLBACKW
    = ffi.Pointer<ffi.NativeFunction<LPFNPSPCALLBACKWFunction>>;

final class UnnamedUnion43 extends ffi.Union {
  external HBITMAP hbmHeader;

  external LPCWSTR pszbmHeader;
}

final class PROPSHEETPAGEW extends ffi.Struct {
  @DWORD()
  external int dwSize;

  @DWORD()
  external int dwFlags;

  external HINSTANCE hInstance;

  external UnnamedUnion42 unnamed;

  external UnnamedUnion42 unnamed$1;

  external LPCWSTR pszTitle;

  external DLGPROC pfnDlgProc;

  @LPARAM()
  external int lParam;

  external LPFNPSPCALLBACKW pfnCallback;

  external ffi.Pointer<UINT> pcRefParent;

  external LPCWSTR pszHeaderTitle;

  external LPCWSTR pszHeaderSubTitle;

  external HANDLE hActCtx;

  external UnnamedUnion43 unnamed$2;
}

typedef PROPSHEETPAGEW_V4 = PROPSHEETPAGEW;
typedef PROPSHEETPAGEW$1 = PROPSHEETPAGEW_V4;

/// procprp
final class PH_PROCESS_PROPPAGECONTEXT extends ffi.Struct {
  external PPH_PROCESS_PROPCONTEXT PropContext;

  external PVOID Context;

  external PROPSHEETPAGEW$1 PropSheetPage;

  @BOOLEAN()
  external int LayoutInitialized;
}

/// procprp
typedef PH_PROCESS_PROPPAGECONTEXT$1 = PH_PROCESS_PROPPAGECONTEXT;
typedef PPH_PROCESS_PROPPAGECONTEXT = ffi.Pointer<PH_PROCESS_PROPPAGECONTEXT>;
typedef PH_CALLBACK_FUNCTION
    = ffi.NativeFunction<ffi.Void Function(PVOID Parameter, PVOID Context)>;
typedef PPH_CALLBACK_FUNCTION = ffi.Pointer<PH_CALLBACK_FUNCTION>;

final class PH_CALLBACK_REGISTRATION extends ffi.Struct {
  external LIST_ENTRY$1 ListEntry;

  external PPH_CALLBACK_FUNCTION Function$;

  external PVOID Context;

  @LONG()
  external int Busy;

  @BOOLEAN()
  external int Unregistering;

  @BOOLEAN()
  external int Reserved;

  @USHORT()
  external int Flags;
}

typedef PH_CALLBACK_REGISTRATION$1 = PH_CALLBACK_REGISTRATION;

/// procprpp
final class PH_THREADS_CONTEXT extends ffi.Struct {
  external PPH_THREAD_PROVIDER Provider;

  external PH_CALLBACK_REGISTRATION$1 ProviderRegistration;

  external PH_CALLBACK_REGISTRATION$1 AddedEventRegistration;

  external PH_CALLBACK_REGISTRATION$1 ModifiedEventRegistration;

  external PH_CALLBACK_REGISTRATION$1 RemovedEventRegistration;

  external PH_CALLBACK_REGISTRATION$1 UpdatedEventRegistration;

  external PH_CALLBACK_REGISTRATION$1 LoadingStateChangedEventRegistration;

  external HWND WindowHandle;

  /// phapppub
  external HWND Private;

  /// phapppub
  external HWND TreeNewHandle;
}

/// procprpp
typedef PH_THREADS_CONTEXT$1 = PH_THREADS_CONTEXT;
typedef PPH_THREADS_CONTEXT = ffi.Pointer<PH_THREADS_CONTEXT>;

final class PH_MODULES_CONTEXT extends ffi.Opaque {}

typedef PH_MODULES_CONTEXT$1 = PH_MODULES_CONTEXT;
typedef PPH_MODULES_CONTEXT = ffi.Pointer<PH_MODULES_CONTEXT>;

final class PH_HANDLES_CONTEXT extends ffi.Opaque {}

typedef PH_HANDLES_CONTEXT$1 = PH_HANDLES_CONTEXT;
typedef PPH_HANDLES_CONTEXT = ffi.Pointer<PH_HANDLES_CONTEXT>;

final class PH_MEMORY_CONTEXT extends ffi.Struct {
  external HANDLE ProcessId;

  external HWND WindowHandle;

  /// phapppub
  external HWND Private;

  /// phapppub
  external HWND TreeNewHandle;
}

typedef PH_MEMORY_CONTEXT$1 = PH_MEMORY_CONTEXT;
typedef PPH_MEMORY_CONTEXT = ffi.Pointer<PH_MEMORY_CONTEXT>;

/// hndlmenu
final class PH_HANDLE_ITEM_INFO extends ffi.Struct {
  external HANDLE ProcessId;

  external HANDLE Handle;

  external PPH_STRING TypeName;

  external PPH_STRING BestObjectName;
}

/// hndlmenu
typedef PH_HANDLE_ITEM_INFO$1 = PH_HANDLE_ITEM_INFO;
typedef PPH_HANDLE_ITEM_INFO = ffi.Pointer<PH_HANDLE_ITEM_INFO>;

const int PHNT_VERSION = 4294967295;

const int S_IFMT = 61440;

const int S_IFDIR = 16384;

const int S_IFCHR = 8192;

const int S_IFIFO = 4096;

const int S_IFREG = 32768;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int WINDOWS_ANCIENT = 0;

const int WINDOWS_XP = 51;

const int WINDOWS_SERVER_2003 = 52;

const int WINDOWS_VISTA = 60;

const int WINDOWS_7 = 61;

const int WINDOWS_8 = 62;

const int WINDOWS_8_1 = 63;

const int WINDOWS_10 = 100;

const int WINDOWS_10_TH2 = 101;

const int WINDOWS_10_RS1 = 102;

const int WINDOWS_10_RS2 = 103;

const int WINDOWS_10_RS3 = 104;

const int WINDOWS_10_RS4 = 105;

const int WINDOWS_10_RS5 = 106;

const int WINDOWS_10_19H1 = 107;

const int WINDOWS_10_19H2 = 108;

const int WINDOWS_10_20H1 = 109;

const int WINDOWS_10_20H2 = 110;

const int WINDOWS_10_21H1 = 111;

const int WINDOWS_10_21H2 = 112;

const int WINDOWS_10_22H2 = 113;

const int WINDOWS_11 = 114;

const int WINDOWS_11_22H2 = 115;

const int WINDOWS_11_23H2 = 116;

const int WINDOWS_11_24H2 = 117;

const int WINDOWS_NEW = 4294967295;

const int PIO_APC_ROUTINE_DEFINED = 1;

const int ALIGN_SIZE = 8;

const int UM_NDIS60 = 1;

const int PH_NETWORK_TYPE_NONE = 0;

const int PH_NETWORK_TYPE_IPV4 = 1;

const int PH_NETWORK_TYPE_IPV6 = 2;

const int PH_NETWORK_TYPE_HYPERV = 4;

const int PH_NETWORK_TYPE_MASK = 8;

const int PH_PROTOCOL_TYPE_NONE = 0;

const int PH_PROTOCOL_TYPE_TCP = 16;

const int PH_PROTOCOL_TYPE_UDP = 32;

const int PH_PROTOCOL_TYPE_MASK = 48;

const int PH_NETWORK_PROTOCOL_NONE = 0;

const int PH_NETWORK_PROTOCOL_TCP4 = 17;

const int PH_NETWORK_PROTOCOL_TCP6 = 18;

const int PH_NETWORK_PROTOCOL_UDP4 = 33;

const int PH_NETWORK_PROTOCOL_UDP6 = 34;

const int PH_NETWORK_PROTOCOL_HYPERV = 4;

const int PH_HTTP_DEFAULT_PORT = 0;

const int PH_HTTP_DEFAULT_HTTP_PORT = 80;

const int PH_HTTP_DEFAULT_HTTPS_PORT = 443;

const int PH_HTTP_FLAG_SECURE = 1;

const int PH_HTTP_FLAG_REFRESH = 2;

const int PH_HTTP_STATUS_OK = 200;

const int PH_HTTP_STATUS_CREATED = 201;

const int PH_HTTP_STATUS_REDIRECT_METHOD = 303;

const int PH_HTTP_STATUS_REDIRECT = 302;

const int PH_HTTP_QUERY_CONTENT_LENGTH = 1;

const int PH_HTTP_QUERY_STATUS_CODE = 2;

const int PH_HTTP_FEATURE_REDIRECTS = 1;

const int PH_HTTP_FEATURE_KEEP_ALIVE = 2;

const int PH_HTTP_SECURITY_IGNORE_UNKNOWN_CA = 1;

const int PH_HTTP_SECURITY_IGNORE_CERT_DATE_INVALID = 2;

const int PH_HTTP_PROTOCOL_FLAG_HTTP2 = 1;

const int PH_HTTP_PROTOCOL_FLAG_HTTP3 = 2;

const int PH_FILE_STREAM_HANDLE_UNOWNED = 1;

const int PH_FILE_STREAM_UNBUFFERED = 2;

const int PH_FILE_STREAM_ASYNCHRONOUS = 4;

const int PH_FILE_STREAM_OWN_POSITION = 8;

const int PH_FILE_STREAM_APPEND = 65536;

const int PH_FILE_STREAM_WRITTEN = 2147483648;

const int RFF_NOBROWSE = 1;

const int RFF_NODEFAULT = 2;

const int RFF_CALCDIRECTORY = 4;

const int RFF_NOLABEL = 8;

const int RFF_NOSEPARATEMEM = 32;

const int RFF_OPTRUNAS = 64;

const int RFN_VALIDATE = -510;

const int RFN_LIMITEDRUNAS = -511;

const int RF_OK = 0;

const int RF_CANCEL = 1;

const int RF_RETRY = 2;

const int DCX_USESTYLE = 65536;

const int DCX_NODELETERGN = 262144;

const int PH_WINDOW_TIMER_DEFAULT = 15;

const int WM_REFLECT = 8192;

const int PH_GET_WINDOW_TEXT_INTERNAL = 1;

const int PH_GET_WINDOW_TEXT_LENGTH_ONLY = 2;

const int PH_LOAD_ICON_SHARED = 1;

const int PH_LOAD_ICON_SIZE_SMALL = 2;

const int PH_LOAD_ICON_SIZE_LARGE = 4;

const int PH_LOAD_ICON_STRICT = 8;

const int PH_ANCHOR_LEFT = 1;

const int PH_ANCHOR_TOP = 2;

const int PH_ANCHOR_RIGHT = 4;

const int PH_ANCHOR_BOTTOM = 8;

const int PH_ANCHOR_ALL = 15;

const int PH_LAYOUT_FORCE_INVALIDATE = 4096;

const int PH_LAYOUT_TAB_CONTROL = 8192;

const int PH_LAYOUT_IMMEDIATE_RESIZE = 16384;

const int PH_LAYOUT_DUMMY_MASK = 8192;

const int PH_WINDOW_CONTEXT_DEFAULT = 65535;

const int PH_ALIGN_CENTER = 0;

const int PH_ALIGN_LEFT = 1;

const int PH_ALIGN_RIGHT = 2;

const int PH_ALIGN_TOP = 4;

const int PH_ALIGN_BOTTOM = 8;

const int PH_ALIGN_MONOSPACE_FONT = 2147483648;

const int ELVM_ADDFALLBACKCOLUMN = 33874;

const int ELVM_ADDFALLBACKCOLUMNS = 33877;

const int ELVM_RESERVED5 = 33888;

const int ELVM_INIT = 33870;

const int ELVM_SETCOLUMNWIDTH = 33889;

const int ELVM_SETCOMPAREFUNCTION = 33872;

const int ELVM_SETCONTEXT = 33871;

const int ELVM_SETCURSOR = 33882;

const int ELVM_RESERVED4 = 33886;

const int ELVM_SETITEMCOLORFUNCTION = 33879;

const int ELVM_SETITEMFONTFUNCTION = 33885;

const int ELVM_RESERVED1 = 33880;

const int ELVM_SETREDRAW = 33884;

const int ELVM_GETSORT = 33881;

const int ELVM_SETSORT = 33876;

const int ELVM_SETSORTFAST = 33887;

const int ELVM_RESERVED0 = 33878;

const int ELVM_SETTRISTATE = 33875;

const int ELVM_SETTRISTATECOMPAREFUNCTION = 33873;

const int ELVM_SORTITEMS = 33869;

const int ELVM_RESERVED3 = 33883;

const int ELVSCW_AUTOSIZE = -1;

const int ELVSCW_AUTOSIZE_USEHEADER = -2;

const int ELVSCW_AUTOSIZE_REMAININGSPACE = -3;

const int PH_SHUTDOWN_RESTART = 1;

const int PH_SHUTDOWN_POWEROFF = 2;

const int PH_SHUTDOWN_INSTALL_UPDATES = 4;

const int PH_SHUTDOWN_HYBRID = 8;

const int PH_SHUTDOWN_RESTART_BOOTOPTIONS = 16;

const int PH_DRAW_TIMELINE_OVERFLOW = 1;

const int PH_DRAW_TIMELINE_DARKTHEME = 2;

const int DBT_DEVICEARRIVAL = 32768;

const int DBT_DEVICEREMOVECOMPLETE = 32772;

const int DBT_DEVTYP_VOLUME = 2;

const String PH_TREENEW_CLASSNAME = 'P';

const int TN_STYLE_ICONS = 1;

const int TN_STYLE_DOUBLE_BUFFERED = 2;

const int TN_STYLE_NO_DIVIDER = 4;

const int TN_STYLE_ANIMATE_DIVIDER = 8;

const int TN_STYLE_NO_COLUMN_SORT = 16;

const int TN_STYLE_NO_COLUMN_REORDER = 32;

const int TN_STYLE_THIN_ROWS = 64;

const int TN_STYLE_NO_COLUMN_HEADER = 128;

const int TN_STYLE_CUSTOM_COLORS = 256;

const int TN_STYLE_ALWAYS_SHOW_SELECTION = 512;

const int TN_STYLE_CUSTOM_HEADERDRAW = 1024;

const int TN_FLAG_ITEM_DRAG_SELECT = 1;

const int TN_FLAG_NO_UNFOLDING_TOOLTIPS = 2;

const int TN_CACHE = 1;

const int TN_AUTO_FORECOLOR = 4096;

const int TN_COLUMN_FIXED = -2;

const int TN_COLUMN_CONTEXT = 1;

const int TN_COLUMN_TEXT = 2;

const int TN_COLUMN_WIDTH = 4;

const int TN_COLUMN_ALIGNMENT = 8;

const int TN_COLUMN_DISPLAYINDEX = 16;

const int TN_COLUMN_TEXTFLAGS = 32;

const int TN_COLUMN_FLAG_VISIBLE = 1048576;

const int TN_COLUMN_FLAG_CUSTOMDRAW = 2097152;

const int TN_COLUMN_FLAG_FIXED = 4194304;

const int TN_COLUMN_FLAG_SORTDESCENDING = 8388608;

const int TN_COLUMN_FLAG_NODPISCALEONADD = 16777216;

const int TN_COLUMN_FLAGS = 4293918720;

const int TN_CACHE_COLOR = 1;

const int TN_CACHE_FONT = 2;

const int TN_CACHE_ICON = 4;

const int TN_MEASURE_TEXT = 1;

const int TN_PART_CELL = 1;

const int TN_PART_PLUSMINUS = 2;

const int TN_PART_ICON = 4;

const int TN_PART_CONTENT = 8;

const int TN_PART_TEXT = 16;

const int TN_TEST_COLUMN = 1;

const int TN_TEST_SUBITEM = 2;

const int TN_HIT_LEFT = 1;

const int TN_HIT_RIGHT = 2;

const int TN_HIT_ABOVE = 4;

const int TN_HIT_BELOW = 8;

const int TN_HIT_ITEM = 16;

const int TN_HIT_ITEM_PLUSMINUS = 32;

const int TN_HIT_ITEM_ICON = 64;

const int TN_HIT_ITEM_CONTENT = 128;

const int TN_HIT_DIVIDER = 256;

const int TN_SELECT_DESELECT = 1;

const int TN_SELECT_TOGGLE = 2;

const int TN_SELECT_RESET = 4;

const int TN_AUTOSIZE_REMAINING_SPACE = 1;

const int PH_TREENEW_SEARCH_TIMEOUT = 1000;

const int PH_TREENEW_SEARCH_MAXIMUM_LENGTH = 1023;

const int PH_TREENEW_HEADER_TEXT_SIZE_MAX = 64;

const int TNM_FIRST = 1025;

const int TNM_SETCALLBACK = 1025;

const int TNM_NODESADDED = 1026;

const int TNM_NODESREMOVED = 1027;

const int TNM_NODESSTRUCTURED = 1028;

const int TNM_ADDCOLUMN = 1029;

const int TNM_REMOVECOLUMN = 1030;

const int TNM_GETCOLUMN = 1031;

const int TNM_SETCOLUMN = 1032;

const int TNM_GETCOLUMNORDERARRAY = 1033;

const int TNM_SETCOLUMNORDERARRAY = 1034;

const int TNM_SETCURSOR = 1035;

const int TNM_GETSORT = 1036;

const int TNM_SETSORT = 1037;

const int TNM_SETTRISTATE = 1038;

const int TNM_ENSUREVISIBLE = 1039;

const int TNM_SCROLL = 1040;

const int TNM_GETFLATNODECOUNT = 1041;

const int TNM_GETFLATNODE = 1042;

const int TNM_GETCELLTEXT = 1043;

const int TNM_SETNODEEXPANDED = 1044;

const int TNM_GETMAXID = 1045;

const int TNM_SETMAXID = 1046;

const int TNM_INVALIDATENODE = 1047;

const int TNM_INVALIDATENODES = 1048;

const int TNM_GETFIXEDHEADER = 1049;

const int TNM_GETHEADER = 1050;

const int TNM_GETTOOLTIPS = 1051;

const int TNM_SELECTRANGE = 1052;

const int TNM_DESELECTRANGE = 1053;

const int TNM_GETCOLUMNCOUNT = 1054;

const int TNM_SETREDRAW = 1055;

const int TNM_GETVIEWPARTS = 1056;

const int TNM_GETFIXEDCOLUMN = 1057;

const int TNM_GETFIRSTCOLUMN = 1058;

const int TNM_SETFOCUSNODE = 1059;

const int TNM_SETMARKNODE = 1060;

const int TNM_SETHOTNODE = 1061;

const int TNM_SETEXTENDEDFLAGS = 1062;

const int TNM_GETCALLBACK = 1063;

const int TNM_HITTEST = 1064;

const int TNM_GETVISIBLECOLUMNCOUNT = 1065;

const int TNM_AUTOSIZECOLUMN = 1066;

const int TNM_SETEMPTYTEXT = 1067;

const int TNM_SETROWHEIGHT = 1068;

const int TNM_ISFLATNODEVALID = 1069;

const int TNM_THEMESUPPORT = 1070;

const int TNM_SETIMAGELIST = 1071;

const int TNM_SETCOLUMNTEXTCACHE = 1072;

const int TNM_ENSUREVISIBLEINDEX = 1073;

const int TNM_GETVISIBLECOLUMN = 1074;

const int TNM_GETVISIBLECOLUMNARRAY = 1075;

const int TNM_GETSELECTEDCOUNT = 1076;

const int TNM_GETSELECTEDNODE = 1077;

const int TNM_FOCUSMARKSELECT = 1078;

const int TNM_LAST = 1079;

const int PH_GRAPH_USE_GRID_X = 1;

const int PH_GRAPH_USE_GRID_Y = 2;

const int PH_GRAPH_LOGARITHMIC_GRID_Y = 4;

const int PH_GRAPH_USE_LINE_2 = 16;

const int PH_GRAPH_OVERLAY_LINE_2 = 32;

const int PH_GRAPH_LABEL_MAX_Y = 4096;

const String PH_GRAPH_CLASSNAME = 'P';

const int GC_STYLE_FADEOUT = 1;

const int GC_STYLE_DRAW_PANEL = 2;

const int GCM_GETDRAWINFO = 2325;

const int GCM_SETDRAWINFO = 2326;

const int GCM_DRAW = 2327;

const int GCM_MOVEGRID = 2328;

const int GCM_GETBUFFEREDCONTEXT = 2329;

const int GCM_SETTOOLTIP = 2330;

const int GCM_UPDATETOOLTIP = 2331;

const int GCM_GETOPTIONS = 2332;

const int GCM_SETOPTIONS = 2333;

const int GCM_UPDATE = 2334;

const int GCM_SETCALLBACK = 2335;

const int GCN_GETDRAWINFO = 2375;

const int GCN_GETTOOLTIPTEXT = 2376;

const int GCN_MOUSEEVENT = 2377;

const int GCN_DRAWPANEL = 2378;

const int PH_EMENU_DISABLED = 1;

const int PH_EMENU_CHECKED = 2;

const int PH_EMENU_HIGHLIGHT = 4;

const int PH_EMENU_MENUBARBREAK = 8;

const int PH_EMENU_MENUBREAK = 16;

const int PH_EMENU_DEFAULT = 32;

const int PH_EMENU_MOUSESELECT = 64;

const int PH_EMENU_RADIOCHECK = 128;

const int PH_EMENU_RIGHTORDER = 256;

const int PH_EMENU_SEPARATECHECKSPACE = 1048576;

const int PH_EMENU_SEPARATOR = 2097152;

const int PH_EMENU_MAINMENU = 4194304;

const int PH_EMENU_CALLBACK = 8388608;

const int PH_EMENU_TEXT_OWNED = 2147483648;

const int PH_EMENU_BITMAP_OWNED = 1073741824;

const int PH_EMENU_FIND_DESCEND = 1;

const int PH_EMENU_FIND_STARTSWITH = 2;

const int PH_EMENU_FIND_LITERAL = 4;

const int PH_EMENU_CONVERT_ID = 1;

const int PH_EMENU_SHOW_SEND_COMMAND = 1;

const int PH_EMENU_SHOW_LEFTRIGHT = 2;

const int PH_EMENU_MODIFY_TEXT = 1;

const int PH_EMENU_MODIFY_BITMAP = 2;

const int PH_EXPORT_MODE_TABS = 0;

const int PH_EXPORT_MODE_SPACES = 1;

const int PH_EXPORT_MODE_CSV = 2;

const int PH_LIST_VIEW_CTRL_C_BEHAVIOR = 1;

const int PH_LIST_VIEW_CTRL_A_BEHAVIOR = 2;

const int PH_LIST_VIEW_DEFAULT_1_BEHAVIORS = 3;

const int PH_SHELL_APP_PROPAGATE_PARAMETERS = 1;

const int PH_SHELL_APP_PROPAGATE_PARAMETERS_IGNORE_VISIBILITY = 2;

const int PH_TN_COLUMN_MENU_HIDE_COLUMN_ID = 4294967295;

const int PH_TN_COLUMN_MENU_CHOOSE_COLUMNS_ID = 4294967294;

const int PH_TN_COLUMN_MENU_SIZE_COLUMN_TO_FIT_ID = 4294967293;

const int PH_TN_COLUMN_MENU_SIZE_ALL_COLUMNS_TO_FIT_ID = 4294967292;

const int PH_TN_COLUMN_MENU_RESET_SORT_ID = 4294967291;

const int PH_TN_COLUMN_MENU_NO_VISIBILITY = 1;

const int PH_TN_COLUMN_MENU_SHOW_RESET_SORT = 2;

const int PH_LOG_ENTRY_MESSAGE = 100;

const int PH_CHOICE_DIALOG_SAVED_CHOICES = 10;

const int PH_CHOICE_DIALOG_CHOICE = 0;

const int PH_CHOICE_DIALOG_USER_CHOICE = 1;

const int PH_CHOICE_DIALOG_PASSWORD = 2;

const int PH_CHOICE_DIALOG_TYPE_MASK = 3;

const int WM_PH_SET_LIST_VIEW_SETTINGS = 33469;

const int PH_PROCESS_ITEM_REMOVED = 1;

const int PH_PROCESS_RECORD_DEAD = 1;

const int PH_PROCESS_RECORD_STAT_REF = 2;

const int PH_NETWORK_OWNER_INFO_SIZE = 16;

const int PH_HANDLE_FILE_SHARED_READ = 1;

const int PH_HANDLE_FILE_SHARED_WRITE = 2;

const int PH_HANDLE_FILE_SHARED_DELETE = 4;

const int PH_HANDLE_FILE_SHARED_MASK = 7;

const int PH_QUERY_MEMORY_IGNORE_FREE = 1;

const int PH_QUERY_MEMORY_REGION_TYPE = 2;

const int PH_QUERY_MEMORY_WS_COUNTERS = 4;

const int PH_QUERY_MEMORY_ZERO_PAD_ADDRESSES = 8;

const int PH_PROVIDER_EVENT_TYPE_MASK = 3;

const int PH_PROVIDER_EVENT_OBJECT_MASK = -4;

const int WM_PH_FIRST = 32867;

const int WM_PH_ACTIVATE = 32867;

const int WM_PH_SHOW_DIALOG = 32868;

const int WM_PH_UPDATE_DIALOG = 32869;

const int PH_ACTIVATE_REPLY = 4377;

const int WM_PH_NOTIFY_ICON_MESSAGE = 32894;

const int WM_PH_UPDATE_FONT = 32904;

const int PH_NOTIFY_MINIMUM = 1;

const int PH_NOTIFY_PROCESS_CREATE = 1;

const int PH_NOTIFY_PROCESS_DELETE = 2;

const int PH_NOTIFY_SERVICE_CREATE = 4;

const int PH_NOTIFY_SERVICE_DELETE = 8;

const int PH_NOTIFY_SERVICE_START = 16;

const int PH_NOTIFY_SERVICE_STOP = 32;

const int PH_NOTIFY_SERVICE_MODIFIED = 64;

const int PH_NOTIFY_DEVICE_ARRIVED = 128;

const int PH_NOTIFY_DEVICE_REMOVED = 256;

const int PH_NOTIFY_MAXIMUM = 512;

const int PH_NOTIFY_VALID_MASK = 511;

const int PH_NF_UPDATE_IS_BITMAP = 1;

const int PH_NF_UPDATE_DESTROY_RESOURCE = 2;

const int PH_NF_MSG_SHOWMINIINFOSECTION = 32769;

const int PH_NF_ICON_ENABLED = 1;

const int PH_NF_ICON_UNAVAILABLE = 2;

const int PH_NF_ICON_NOSHOW_MINIINFO = 4;

const int PH_MINIINFO_SECTION_NO_UPPER_MARGINS = 1;

const int PH_PLUGIN_MENU_DISALLOW_HOOKS = 1;

const int PH_PLUGIN_FLAG_RESERVED = 1;

const int PH_MENU_ITEM_LOCATION_SYSTEM = 0;

const int PH_MENU_ITEM_LOCATION_VIEW = 1;

const int PH_MENU_ITEM_LOCATION_TOOLS = 2;

const int PH_MENU_ITEM_LOCATION_USERS = 3;

const int PH_MENU_ITEM_LOCATION_HELP = 4;
