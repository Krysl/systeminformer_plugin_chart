// LGPLv3 https://www.gnu.org/licenses/lgpl-3.0.en.html#license-text
// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace SystemInformer {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class SystemInformerHostApi;
  friend class MessageFlutterApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


enum class Code {
  kOne = 0,
  kTwo = 1
};

enum class SettingType {
  kStringSettingType = 0,
  kIntegerSettingType = 1,
  kIntegerPairSettingType = 2,
  kScalableIntegerPairSettingType = 3
};


// Generated class from Pigeon that represents data sent in messages.
class MessageData {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit MessageData(
    const Code& code,
    const flutter::EncodableMap& data);

  // Constructs an object setting all fields.
  explicit MessageData(
    const std::string* name,
    const std::string* description,
    const Code& code,
    const flutter::EncodableMap& data);

  const std::string* name() const;
  void set_name(const std::string_view* value_arg);
  void set_name(std::string_view value_arg);

  const std::string* description() const;
  void set_description(const std::string_view* value_arg);
  void set_description(std::string_view value_arg);

  const Code& code() const;
  void set_code(const Code& value_arg);

  const flutter::EncodableMap& data() const;
  void set_data(const flutter::EncodableMap& value_arg);

 private:
  static MessageData FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class SystemInformerHostApi;
  friend class MessageFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::optional<std::string> name_;
  std::optional<std::string> description_;
  Code code_;
  flutter::EncodableMap data_;
};


// Generated class from Pigeon that represents data sent in messages.
class ProcessItemsRaw {
 public:
  // Constructs an object setting all fields.
  explicit ProcessItemsRaw(const flutter::EncodableList& items);

  // PPH_PROCESS_ITEM *ProcessItems
  // PULONG NumberOfProcessItems
  const flutter::EncodableList& items() const;
  void set_items(const flutter::EncodableList& value_arg);

 private:
  static ProcessItemsRaw FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class SystemInformerHostApi;
  friend class MessageFlutterApi;
  friend class PigeonInternalCodecSerializer;
  flutter::EncodableList items_;
};


class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;
 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;
};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class SystemInformerHostApi {
 public:
  SystemInformerHostApi(const SystemInformerHostApi&) = delete;
  SystemInformerHostApi& operator=(const SystemInformerHostApi&) = delete;
  virtual ~SystemInformerHostApi() {}
  virtual ErrorOr<std::string> GetStringSetting(const std::string& key) = 0;
  virtual ErrorOr<int64_t> GetIntegerSetting(const std::string& key) = 0;
  virtual ErrorOr<ProcessItemsRaw> EnumProcessItems() = 0;
  //  VOID PhAddSetting(
  //    _In_ PH_SETTING_TYPE Type,
  //    _In_ PPH_STRINGREF Name,
  //    _In_ PPH_STRINGREF DefaultValue
  //  );
  virtual std::optional<FlutterError> AddSetting(
    const SettingType& type,
    const std::string& name,
    const std::string& default_value) = 0;
  // PHAPPAPI
  // HICON
  // NTAPI
  // PhGetImageListIcon(
  //     _In_ ULONG_PTR Index,
  //     _In_ BOOLEAN Large
  //     );
  virtual ErrorOr<int64_t> GetImageListIcon(
    int64_t index,
    bool is_large) = 0;
  // PHAPPAPI
  // VOID
  // NTAPI
  // PhPluginGetSystemStatistics(
  //     _Out_ PPH_PLUGIN_SYSTEM_STATISTICS Statistics
  //     );
  virtual ErrorOr<int64_t> GetSystemStatistics() = 0;
  // typedef struct _PH_SYSTEM_BASIC_INFORMATION
  // {
  //     USHORT PageSize;
  //     USHORT NumberOfProcessors;
  //     ULONG MaximumTimerResolution;
  //     ULONG NumberOfPhysicalPages;
  //     ULONG AllocationGranularity;
  //     ULONG_PTR MaximumUserModeAddress;
  //     KAFFINITY ActiveProcessorsAffinityMask;
  // } PH_SYSTEM_BASIC_INFORMATION, *PPH_SYSTEM_BASIC_INFORMATION;
  //
  // PHLIBAPI extern PH_SYSTEM_BASIC_INFORMATION PhSystemBasicInformation;
  virtual ErrorOr<int64_t> GetSystemBasicInformation() = 0;
  virtual void SendMessage(
    const MessageData& message,
    std::function<void(ErrorOr<bool> reply)> result) = 0;

  // The codec used by SystemInformerHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `SystemInformerHostApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    SystemInformerHostApi* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    SystemInformerHostApi* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);
 protected:
  SystemInformerHostApi() = default;
};
// Generated class from Pigeon that represents Flutter messages that can be called from C++.
class MessageFlutterApi {
 public:
  MessageFlutterApi(flutter::BinaryMessenger* binary_messenger);
  MessageFlutterApi(
    flutter::BinaryMessenger* binary_messenger,
    const std::string& message_channel_suffix);
  static const flutter::StandardMessageCodec& GetCodec();
  void FlutterMethod(
    const std::string* a_string,
    std::function<void(const std::string&)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
 private:
  flutter::BinaryMessenger* binary_messenger_;
  std::string message_channel_suffix_;
};

}  // namespace SystemInformer
#endif  // PIGEON_MESSAGES_G_H_
